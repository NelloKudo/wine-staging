From dd305e7b072569a178f3736e8185c28986cb1a4a Mon Sep 17 00:00:00 2001
From: Dmitry Timoshkov <dmitry@baikal.ru>
Date: Tue, 26 Apr 2016 12:11:17 +0800
Subject: [PATCH] oleaut32/tests: Add some tests for loading and saving EMF
 using IPicture interface.

---
 dlls/oleaut32/tests/olepicture.c | 45 +++++++++++++++++++-------------
 1 file changed, 27 insertions(+), 18 deletions(-)

diff --git a/dlls/oleaut32/tests/olepicture.c b/dlls/oleaut32/tests/olepicture.c
index 58d5577631c..025f7c84873 100644
--- a/dlls/oleaut32/tests/olepicture.c
+++ b/dlls/oleaut32/tests/olepicture.c
@@ -1634,55 +1634,64 @@ static void test_load_save_emf(void)
     desc.emf.hemf = CloseEnhMetaFile(hdc);
     ok(desc.emf.hemf != 0, "CloseEnhMetaFile failed\n");
     hr = OleCreatePictureIndirect(&desc, &IID_IPicture, FALSE, (void**)&pic);
-    ok(hr == S_OK, "OleCreatePictureIndirect error %#lx\n", hr);
+    ok(hr == S_OK, "OleCreatePictureIndirect error %#x\n", hr);
 
     type = -1;
     hr = IPicture_get_Type(pic, &type);
-    ok(hr == S_OK, "get_Type error %#lx\n", hr);
+    ok(hr == S_OK,"get_Type error %#8x\n", hr);
     ok(type == PICTYPE_ENHMETAFILE,"expected PICTYPE_ENHMETAFILE, got %d\n", type);
 
     hr = IPicture_get_Handle(pic, &handle);
-    ok(hr == S_OK,"get_Handle error %#lx\n", hr);
+    ok(hr == S_OK,"get_Handle error %#8x\n", hr);
     ok(IntToPtr(handle) == desc.emf.hemf, "get_Handle returned wrong handle %#x\n", handle);
 
     hmem = GlobalAlloc(GMEM_MOVEABLE, 0);
     hr = CreateStreamOnHGlobal(hmem, FALSE, &dst_stream);
-    ok(hr == S_OK, "createstreamonhglobal error %#lx\n", hr);
+    ok(hr == S_OK, "createstreamonhglobal error %#x\n", hr);
 
     size = -1;
     hr = IPicture_SaveAsFile(pic, dst_stream, TRUE, &size);
-    ok(hr == S_OK, "IPicture_SaveasFile error %#lx\n", hr);
-    ok(size == 128, "expected 128, got %ld\n", size);
+    ok(hr == S_OK, "IPicture_SaveasFile error %#x\n", hr);
+todo_wine
+    ok(size == 128, "expected 128, got %d\n", size);
     emh = GlobalLock(hmem);
-    ok(emh->iType == EMR_HEADER, "wrong iType %04lx\n", emh->iType);
-    ok(emh->dSignature == ENHMETA_SIGNATURE, "wrong dSignature %08lx\n", emh->dSignature);
+if (size)
+{
+    ok(emh->iType == EMR_HEADER, "wrong iType %04x\n", emh->iType);
+    ok(emh->dSignature == ENHMETA_SIGNATURE, "wrong dSignature %08x\n", emh->dSignature);
+}
     GlobalUnlock(hmem);
 
     size = -1;
     hr = IPicture_SaveAsFile(pic, dst_stream, FALSE, &size);
-    ok(hr == E_FAIL, "expected E_FAIL, got %#lx\n", hr);
-    ok(size == -1, "expected -1, got %ld\n", size);
+todo_wine
+    ok(hr == E_FAIL, "expected E_FAIL, got %#x\n", hr);
+todo_wine
+    ok(size == -1, "expected -1, got %d\n", size);
 
     offset.QuadPart = 0;
     hr = IStream_Seek(dst_stream, offset, SEEK_SET, NULL);
-    ok(hr == S_OK, "IStream_Seek %#lx\n", hr);
+    ok(hr == S_OK, "IStream_Seek %#x\n", hr);
 
     hr = IPicture_QueryInterface(pic, &IID_IPersistStream, (void **)&src_stream);
-    ok(hr == S_OK, "QueryInterface error %#lx\n", hr);
+    ok(hr == S_OK, "QueryInterface error %#x\n", hr);
 
     hr = IPersistStream_Save(src_stream, dst_stream, TRUE);
-    ok(hr == S_OK, "Save error %#lx\n", hr);
+todo_wine
+    ok(hr == S_OK, "Save error %#x\n", hr);
 
     IPersistStream_Release(src_stream);
     IStream_Release(dst_stream);
 
     mem = GlobalLock(hmem);
-    ok(!memcmp(mem, "lt\0\0", 4), "got wrong stream header %04lx\n", mem[0]);
-    ok(mem[1] == 128, "expected 128, got %lu\n", mem[1]);
+if (hr == S_OK)
+{
+    ok(!memcmp(mem, "lt\0\0", 4), "got wrong stream header %04x\n", mem[0]);
+    ok(mem[1] == 128, "expected 128, got %u\n", mem[1]);
     emh = (ENHMETAHEADER *)(mem + 2);
-    ok(emh->iType == EMR_HEADER, "wrong iType %04lx\n", emh->iType);
-    ok(emh->dSignature == ENHMETA_SIGNATURE, "wrong dSignature %08lx\n", emh->dSignature);
-
+    ok(emh->iType == EMR_HEADER, "wrong iType %04x\n", emh->iType);
+    ok(emh->dSignature == ENHMETA_SIGNATURE, "wrong dSignature %08x\n", emh->dSignature);
+}
     GlobalUnlock(hmem);
     GlobalFree(hmem);
 
-- 
2.47.2

