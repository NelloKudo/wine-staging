From e077ea2bfbd18f30ead3f9101aae92b2784efe7a Mon Sep 17 00:00:00 2001
From: Dmitry Timoshkov <dmitry@baikal.ru>
Date: Fri, 16 Dec 2016 18:08:51 +0800
Subject: [PATCH] windowscodecs: Tolerate partial reads in the IFD metadata
 loader.

---
 dlls/windowscodecs/metadatahandler.c | 35 +++++++++++-----------------
 1 file changed, 14 insertions(+), 21 deletions(-)

diff --git a/dlls/windowscodecs/metadatahandler.c b/dlls/windowscodecs/metadatahandler.c
index 1969d6288ba..2c86bb79d5c 100644
--- a/dlls/windowscodecs/metadatahandler.c
+++ b/dlls/windowscodecs/metadatahandler.c
@@ -916,9 +916,8 @@ static HRESULT load_IFD_entry(IStream *input, const GUID *vendor, DWORD options,
             CoTaskMemFree(item->value.caub.pElems);
             return hr;
         }
-        hr = IStream_Read(input, item->value.caub.pElems, count, &bytesread);
-        if (bytesread != count) hr = E_FAIL;
-        if (hr != S_OK)
+        hr = IStream_Read(input, item->value.caub.pElems, count, NULL);
+        if (FAILED(hr))
         {
             CoTaskMemFree(item->value.caub.pElems);
             return hr;
@@ -951,7 +950,7 @@ static HRESULT load_IFD_entry(IStream *input, const GUID *vendor, DWORD options,
 
         item->value.vt |= VT_VECTOR;
         item->value.caui.cElems = count;
-        item->value.caui.pElems = CoTaskMemAlloc(count * 2);
+        item->value.caui.pElems = HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, count * 2);
         if (!item->value.caui.pElems) return E_OUTOFMEMORY;
 
         pos.QuadPart = value;
@@ -961,9 +960,8 @@ static HRESULT load_IFD_entry(IStream *input, const GUID *vendor, DWORD options,
             CoTaskMemFree(item->value.caui.pElems);
             return hr;
         }
-        hr = IStream_Read(input, item->value.caui.pElems, count * 2, &bytesread);
-        if (bytesread != count * 2) hr = E_FAIL;
-        if (hr != S_OK)
+        hr = IStream_Read(input, item->value.caui.pElems, count * 2, NULL);
+        if (FAILED(hr))
         {
             CoTaskMemFree(item->value.caui.pElems);
             return hr;
@@ -994,9 +992,8 @@ static HRESULT load_IFD_entry(IStream *input, const GUID *vendor, DWORD options,
             CoTaskMemFree(item->value.caul.pElems);
             return hr;
         }
-        hr = IStream_Read(input, item->value.caul.pElems, count * 4, &bytesread);
-        if (bytesread != count * 4) hr = E_FAIL;
-        if (hr != S_OK)
+        hr = IStream_Read(input, item->value.caul.pElems, count * 4, NULL);
+        if (FAILED(hr))
         {
             CoTaskMemFree(item->value.caul.pElems);
             return hr;
@@ -1022,8 +1019,7 @@ static HRESULT load_IFD_entry(IStream *input, const GUID *vendor, DWORD options,
             hr = IStream_Seek(input, pos, STREAM_SEEK_SET, NULL);
             if (FAILED(hr)) return hr;
 
-            hr = IStream_Read(input, &ull, sizeof(ull), &bytesread);
-            if (bytesread != sizeof(ull)) hr = E_FAIL;
+            hr = IStream_Read(input, &ull, sizeof(ull), NULL);
             if (hr != S_OK) return hr;
 
             item->value.uhVal.QuadPart = ull;
@@ -1051,9 +1047,8 @@ static HRESULT load_IFD_entry(IStream *input, const GUID *vendor, DWORD options,
                 CoTaskMemFree(item->value.cauh.pElems);
                 return hr;
             }
-            hr = IStream_Read(input, item->value.cauh.pElems, count * 8, &bytesread);
-            if (bytesread != count * 8) hr = E_FAIL;
-            if (hr != S_OK)
+            hr = IStream_Read(input, item->value.cauh.pElems, count * 8, NULL);
+            if (FAILED(hr))
             {
                 CoTaskMemFree(item->value.cauh.pElems);
                 return hr;
@@ -1089,9 +1084,8 @@ static HRESULT load_IFD_entry(IStream *input, const GUID *vendor, DWORD options,
             CoTaskMemFree(item->value.pszVal);
             return hr;
         }
-        hr = IStream_Read(input, item->value.pszVal, count, &bytesread);
-        if (bytesread != count) hr = E_FAIL;
-        if (hr != S_OK)
+        hr = IStream_Read(input, item->value.pszVal, count, NULL);
+        if (FAILED(hr))
         {
             CoTaskMemFree(item->value.pszVal);
             return hr;
@@ -1125,9 +1119,8 @@ static HRESULT load_IFD_entry(IStream *input, const GUID *vendor, DWORD options,
             CoTaskMemFree(item->value.blob.pBlobData);
             return hr;
         }
-        hr = IStream_Read(input, item->value.blob.pBlobData, count, &bytesread);
-        if (bytesread != count) hr = E_FAIL;
-        if (hr != S_OK)
+        hr = IStream_Read(input, item->value.blob.pBlobData, count, NULL);
+        if (FAILED(hr))
         {
             CoTaskMemFree(item->value.blob.pBlobData);
             return hr;
-- 
2.47.2

