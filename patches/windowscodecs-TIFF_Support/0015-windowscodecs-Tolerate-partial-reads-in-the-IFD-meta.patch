From 17a42ea7b9cf8a29fee0e7bac01724b512c2bf76 Mon Sep 17 00:00:00 2001
From: Dmitry Timoshkov <dmitry@baikal.ru>
Date: Fri, 16 Dec 2016 18:08:51 +0800
Subject: [PATCH] windowscodecs: Tolerate partial reads in the IFD metadata
 loader.

---
 dlls/windowscodecs/metadatahandler.c | 37 +++++++++++-----------------
 1 file changed, 15 insertions(+), 22 deletions(-)

diff --git a/dlls/windowscodecs/metadatahandler.c b/dlls/windowscodecs/metadatahandler.c
index 7618d8cd6aa..10233236f7f 100644
--- a/dlls/windowscodecs/metadatahandler.c
+++ b/dlls/windowscodecs/metadatahandler.c
@@ -791,7 +791,7 @@ static int tag_to_vt(SHORT tag)
 static HRESULT load_IFD_entry(IStream *input, const struct IFD_entry *entry,
                               MetadataItem *item, BOOL native_byte_order)
 {
-    ULONG count, value, i, bytesread;
+    ULONG count, value, i;
     SHORT type;
     LARGE_INTEGER pos;
     HRESULT hr;
@@ -843,9 +843,8 @@ static HRESULT load_IFD_entry(IStream *input, const struct IFD_entry *entry,
             CoTaskMemFree(item->value.caub.pElems);
             return hr;
         }
-        hr = IStream_Read(input, item->value.caub.pElems, count, &bytesread);
-        if (bytesread != count) hr = E_FAIL;
-        if (hr != S_OK)
+        hr = IStream_Read(input, item->value.caub.pElems, count, NULL);
+        if (FAILED(hr))
         {
             CoTaskMemFree(item->value.caub.pElems);
             return hr;
@@ -878,7 +877,7 @@ static HRESULT load_IFD_entry(IStream *input, const struct IFD_entry *entry,
 
         item->value.vt |= VT_VECTOR;
         item->value.caui.cElems = count;
-        item->value.caui.pElems = CoTaskMemAlloc(count * 2);
+        item->value.caui.pElems = HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, count * 2);
         if (!item->value.caui.pElems) return E_OUTOFMEMORY;
 
         pos.QuadPart = value;
@@ -888,9 +887,8 @@ static HRESULT load_IFD_entry(IStream *input, const struct IFD_entry *entry,
             CoTaskMemFree(item->value.caui.pElems);
             return hr;
         }
-        hr = IStream_Read(input, item->value.caui.pElems, count * 2, &bytesread);
-        if (bytesread != count * 2) hr = E_FAIL;
-        if (hr != S_OK)
+        hr = IStream_Read(input, item->value.caui.pElems, count * 2, NULL);
+        if (FAILED(hr))
         {
             CoTaskMemFree(item->value.caui.pElems);
             return hr;
@@ -921,9 +919,8 @@ static HRESULT load_IFD_entry(IStream *input, const struct IFD_entry *entry,
             CoTaskMemFree(item->value.caul.pElems);
             return hr;
         }
-        hr = IStream_Read(input, item->value.caul.pElems, count * 4, &bytesread);
-        if (bytesread != count * 4) hr = E_FAIL;
-        if (hr != S_OK)
+        hr = IStream_Read(input, item->value.caul.pElems, count * 4, NULL);
+        if (FAILED(hr))
         {
             CoTaskMemFree(item->value.caul.pElems);
             return hr;
@@ -949,8 +946,7 @@ static HRESULT load_IFD_entry(IStream *input, const struct IFD_entry *entry,
             hr = IStream_Seek(input, pos, STREAM_SEEK_SET, NULL);
             if (FAILED(hr)) return hr;
 
-            hr = IStream_Read(input, &ull, sizeof(ull), &bytesread);
-            if (bytesread != sizeof(ull)) hr = E_FAIL;
+            hr = IStream_Read(input, &ull, sizeof(ull), NULL);
             if (hr != S_OK) return hr;
 
             item->value.uhVal.QuadPart = ull;
@@ -978,9 +974,8 @@ static HRESULT load_IFD_entry(IStream *input, const struct IFD_entry *entry,
                 CoTaskMemFree(item->value.cauh.pElems);
                 return hr;
             }
-            hr = IStream_Read(input, item->value.cauh.pElems, count * 8, &bytesread);
-            if (bytesread != count * 8) hr = E_FAIL;
-            if (hr != S_OK)
+            hr = IStream_Read(input, item->value.cauh.pElems, count * 8, NULL);
+            if (FAILED(hr))
             {
                 CoTaskMemFree(item->value.cauh.pElems);
                 return hr;
@@ -1016,9 +1011,8 @@ static HRESULT load_IFD_entry(IStream *input, const struct IFD_entry *entry,
             CoTaskMemFree(item->value.pszVal);
             return hr;
         }
-        hr = IStream_Read(input, item->value.pszVal, count, &bytesread);
-        if (bytesread != count) hr = E_FAIL;
-        if (hr != S_OK)
+        hr = IStream_Read(input, item->value.pszVal, count, NULL);
+        if (FAILED(hr))
         {
             CoTaskMemFree(item->value.pszVal);
             return hr;
@@ -1052,9 +1046,8 @@ static HRESULT load_IFD_entry(IStream *input, const struct IFD_entry *entry,
             CoTaskMemFree(item->value.blob.pBlobData);
             return hr;
         }
-        hr = IStream_Read(input, item->value.blob.pBlobData, count, &bytesread);
-        if (bytesread != count) hr = E_FAIL;
-        if (hr != S_OK)
+        hr = IStream_Read(input, item->value.blob.pBlobData, count, NULL);
+        if (FAILED(hr))
         {
             CoTaskMemFree(item->value.blob.pBlobData);
             return hr;
-- 
2.45.2

