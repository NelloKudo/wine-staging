From 26584146fbac7cbb91cf497812033bfe0ab01445 Mon Sep 17 00:00:00 2001
From: Alistair Leslie-Hughes <leslie_alistair@hotmail.com>
Date: Thu, 2 Feb 2023 14:20:44 +1100
Subject: [PATCH] odbc32: Remove unixODBC support

---
 configure.ac            |   10 -
 dlls/odbc32/Makefile.in |    5 +-
 dlls/odbc32/proxyodbc.c | 1968 +++++----------------
 dlls/odbc32/unixlib.c   | 3673 ---------------------------------------
 dlls/odbc32/unixlib.h   | 1256 -------------
 5 files changed, 419 insertions(+), 6493 deletions(-)
 delete mode 100644 dlls/odbc32/unixlib.c
 delete mode 100644 dlls/odbc32/unixlib.h

diff --git a/configure.ac b/configure.ac
index db3f14bb970..2cca343becc 100644
--- a/configure.ac
+++ b/configure.ac
@@ -1428,16 +1428,6 @@ WINE_NOTICE_WITH(pcsclite,[test "x$PCSCLITE_LIBS" = x],
                  [libpcsclite not found, smart cards won't be supported.],
                  [enable_winscard])
 
-dnl **** Check for libodbc ****
-if test "x$with_odbc" != "xno"
-then
-    WINE_PACKAGE_FLAGS(ODBC,[odbc],[-lodbc],,,
-        [AC_CHECK_LIB(odbc,SQLConnect,[:],[ODBC_LIBS=""],[$ODBC_LIBS])])
-fi
-WINE_NOTICE_WITH(odbc,[test "x$ODBC_LIBS" = x],
-                 [libodbc not found, ODBC won't be supported.],
-                 [enable_odbc32])
-
 dnl **** Check for inotify ****
 if test "x$with_inotify" != "xno"
 then
diff --git a/dlls/odbc32/Makefile.in b/dlls/odbc32/Makefile.in
index 0ec0ae8eaf4..a42f1473d67 100644
--- a/dlls/odbc32/Makefile.in
+++ b/dlls/odbc32/Makefile.in
@@ -1,10 +1,7 @@
 MODULE    = odbc32.dll
-UNIXLIB   = odbc32.so
 IMPORTLIB = odbc32
 IMPORTS   = advapi32
-UNIX_LIBS = $(ODBC_LIBS)
 
 SOURCES = \
 	proxyodbc.c \
-	rsrc.rc \
-	unixlib.c
+	rsrc.rc
diff --git a/dlls/odbc32/proxyodbc.c b/dlls/odbc32/proxyodbc.c
index a3732c001be..0604d928366 100644
--- a/dlls/odbc32/proxyodbc.c
+++ b/dlls/odbc32/proxyodbc.c
@@ -40,36 +40,19 @@
 #include "sql.h"
 #include "sqltypes.h"
 #include "sqlext.h"
-#include "unixlib.h"
 
 WINE_DEFAULT_DEBUG_CHANNEL(odbc);
-WINE_DECLARE_DEBUG_CHANNEL(winediag);
 
-#define ODBC_CALL( func, params ) WINE_UNIX_CALL( unix_ ## func, params )
 
 /*************************************************************************
  *				SQLAllocConnect           [ODBC32.001]
  */
 SQLRETURN WINAPI SQLAllocConnect(SQLHENV EnvironmentHandle, SQLHDBC *ConnectionHandle)
 {
-    struct SQLAllocConnect_params params;
-    struct handle *con, *env = EnvironmentHandle;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(EnvironmentHandle %p, ConnectionHandle %p)\n", EnvironmentHandle, ConnectionHandle);
-
-    *ConnectionHandle = 0;
-    if (!(con = calloc( 1, sizeof(*con) ))) return SQL_ERROR;
-
-    params.EnvironmentHandle = env->unix_handle;
-    if (SUCCESS((ret = ODBC_CALL( SQLAllocConnect, &params ))))
-    {
-        con->unix_handle = params.ConnectionHandle;
-        *ConnectionHandle = con;
-    }
-    else free( con );
-
-    TRACE("Returning %d, ConnectionHandle %p\n", ret, *ConnectionHandle);
+    FIXME("(EnvironmentHandle %p, ConnectionHandle %p)\n", EnvironmentHandle, ConnectionHandle);
+    *ConnectionHandle = SQL_NULL_HDBC;
     return ret;
 }
 
@@ -78,23 +61,12 @@ SQLRETURN WINAPI SQLAllocConnect(SQLHENV EnvironmentHandle, SQLHDBC *ConnectionH
  */
 SQLRETURN WINAPI SQLAllocEnv(SQLHENV *EnvironmentHandle)
 {
-    struct SQLAllocEnv_params params;
-    struct handle *env;
-    SQLRETURN ret;
-
-    TRACE("(EnvironmentHandle %p)\n", EnvironmentHandle);
+    SQLRETURN ret = SQL_ERROR;
 
-    *EnvironmentHandle = 0;
-    if (!(env = calloc( 1, sizeof(*env) ))) return SQL_ERROR;
+    FIXME("(EnvironmentHandle %p)\n", EnvironmentHandle);
 
-    if (SUCCESS((ret = ODBC_CALL( SQLAllocEnv, &params ))))
-    {
-        env->unix_handle = params.EnvironmentHandle;
-        *EnvironmentHandle = env;
-    }
-    else free( env );
+    *EnvironmentHandle = SQL_NULL_HENV;
 
-    TRACE("Returning %d, EnvironmentHandle %p\n", ret, *EnvironmentHandle);
     return ret;
 }
 
@@ -103,25 +75,11 @@ SQLRETURN WINAPI SQLAllocEnv(SQLHENV *EnvironmentHandle)
  */
 SQLRETURN WINAPI SQLAllocHandle(SQLSMALLINT HandleType, SQLHANDLE InputHandle, SQLHANDLE *OutputHandle)
 {
-    struct SQLAllocHandle_params params;
-    struct handle *output, *input = InputHandle;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(HandleType %d, InputHandle %p, OutputHandle %p)\n", HandleType, InputHandle, OutputHandle);
+    FIXME("(HandleType %d, InputHandle %p, OutputHandle %p)\n", HandleType, InputHandle, OutputHandle);
 
     *OutputHandle = 0;
-    if (!(output = calloc( 1, sizeof(*output) ))) return SQL_ERROR;
-
-    params.HandleType  = HandleType;
-    params.InputHandle = input ? input->unix_handle : 0;
-    if (SUCCESS((ret = ODBC_CALL( SQLAllocHandle, &params ))))
-    {
-        output->unix_handle = params.OutputHandle;
-        *OutputHandle = output;
-    }
-    else free( output );
-
-    TRACE("Returning %d, OutputHandle %p\n", ret, *OutputHandle);
     return ret;
 }
 
@@ -130,24 +88,11 @@ SQLRETURN WINAPI SQLAllocHandle(SQLSMALLINT HandleType, SQLHANDLE InputHandle, S
  */
 SQLRETURN WINAPI SQLAllocStmt(SQLHDBC ConnectionHandle, SQLHSTMT *StatementHandle)
 {
-    struct SQLAllocStmt_params params;
-    struct handle *stmt, *con = ConnectionHandle;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(ConnectionHandle %p, StatementHandle %p)\n", ConnectionHandle, StatementHandle);
+    FIXME("(ConnectionHandle %p, StatementHandle %p)\n", ConnectionHandle, StatementHandle);
 
-    *StatementHandle = 0;
-    if (!(stmt = calloc( 1, sizeof(*stmt) ))) return SQL_ERROR;
-
-    params.ConnectionHandle = con->unix_handle;
-    if (SUCCESS((ret = ODBC_CALL( SQLAllocStmt, &params ))))
-    {
-        stmt->unix_handle = params.StatementHandle;
-        *StatementHandle = stmt;
-    }
-    else free( stmt );
-
-    TRACE ("Returning %d, StatementHandle %p\n", ret, *StatementHandle);
+    *StatementHandle = SQL_NULL_HSTMT;
     return ret;
 }
 
@@ -156,25 +101,11 @@ SQLRETURN WINAPI SQLAllocStmt(SQLHDBC ConnectionHandle, SQLHSTMT *StatementHandl
  */
 SQLRETURN WINAPI SQLAllocHandleStd(SQLSMALLINT HandleType, SQLHANDLE InputHandle, SQLHANDLE *OutputHandle)
 {
-    struct SQLAllocHandleStd_params params;
-    struct handle *output, *input = InputHandle;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(HandleType %d, InputHandle %p, OutputHandle %p)\n", HandleType, InputHandle, OutputHandle);
+    FIXME("(HandleType %d, InputHandle %p, OutputHandle %p)\n", HandleType, InputHandle, OutputHandle);
 
     *OutputHandle = 0;
-    if (!(output = calloc( 1, sizeof(*output) ))) return SQL_ERROR;
-
-    params.HandleType  = HandleType;
-    params.InputHandle = input ? input->unix_handle : 0;
-    if (SUCCESS((ret = ODBC_CALL( SQLAllocHandleStd, &params ))))
-    {
-        output->unix_handle = params.OutputHandle;
-        *OutputHandle = output;
-    }
-    else free( output );
-
-    TRACE ("Returning %d, OutputHandle %p\n", ret, *OutputHandle);
     return ret;
 }
 
@@ -187,43 +118,17 @@ static const char *debugstr_sqllen( SQLLEN len )
 #endif
 }
 
-static BOOL resize_binding( struct param_binding *binding, UINT32 count )
-{
-    struct param *tmp;
-    UINT32 new_count = max( binding->count, count );
-
-    if (!(tmp = realloc( binding->param, new_count * sizeof(*tmp) ))) return FALSE;
-    memset( tmp + binding->count, 0, (new_count - binding->count) * sizeof(*tmp) );
-    binding->param = tmp;
-    binding->count = new_count;
-    return TRUE;
-}
-
 /*************************************************************************
  *				SQLBindCol           [ODBC32.004]
  */
 SQLRETURN WINAPI SQLBindCol(SQLHSTMT StatementHandle, SQLUSMALLINT ColumnNumber, SQLSMALLINT TargetType,
                             SQLPOINTER TargetValue, SQLLEN BufferLength, SQLLEN *StrLen_or_Ind)
 {
-    struct SQLBindCol_params params = { 0, ColumnNumber, TargetType, TargetValue, BufferLength };
-    struct handle *handle = StatementHandle;
-    UINT i = ColumnNumber - 1;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p, ColumnNumber %d, TargetType %d, TargetValue %p, BufferLength %s, StrLen_or_Ind %p)\n",
+    FIXME("(StatementHandle %p, ColumnNumber %d, TargetType %d, TargetValue %p, BufferLength %s, StrLen_or_Ind %p)\n",
           StatementHandle, ColumnNumber, TargetType, TargetValue, debugstr_sqllen(BufferLength), StrLen_or_Ind);
 
-    if (!handle) return SQL_INVALID_HANDLE;
-    if (!ColumnNumber)
-    {
-        FIXME( "column 0 not handled\n" );
-        return SQL_ERROR;
-    }
-    if (!resize_binding( &handle->bind_col, ColumnNumber )) return SQL_ERROR;
-    params.StatementHandle = handle->unix_handle;
-    params.StrLen_or_Ind   = &handle->bind_col.param[i].len;
-    if (SUCCESS(( ret = ODBC_CALL( SQLBindCol, &params )))) handle->bind_col.param[i].ptr = StrLen_or_Ind;
-    TRACE ("Returning %d\n", ret);
     return ret;
 }
 
@@ -243,28 +148,12 @@ SQLRETURN WINAPI SQLBindParam(SQLHSTMT StatementHandle, SQLUSMALLINT ParameterNu
                               SQLSMALLINT ParameterType, SQLULEN LengthPrecision, SQLSMALLINT ParameterScale,
                               SQLPOINTER ParameterValue, SQLLEN *StrLen_or_Ind)
 {
-    struct SQLBindParam_params params = { 0, ParameterNumber, ValueType, ParameterType, LengthPrecision,
-                                          ParameterScale, ParameterValue };
-    struct handle *handle = StatementHandle;
-    UINT i = ParameterNumber - 1;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p, ParameterNumber %d, ValueType %d, ParameterType %d, LengthPrecision %s,"
+    FIXME("(StatementHandle %p, ParameterNumber %d, ValueType %d, ParameterType %d, LengthPrecision %s,"
           " ParameterScale %d, ParameterValue %p, StrLen_or_Ind %p)\n", StatementHandle, ParameterNumber, ValueType,
           ParameterType, debugstr_sqlulen(LengthPrecision), ParameterScale, ParameterValue, StrLen_or_Ind);
 
-    if (!handle) return SQL_INVALID_HANDLE;
-    if (!ParameterNumber)
-    {
-        FIXME( "parameter 0 not handled\n" );
-        return SQL_ERROR;
-    }
-    if (!resize_binding( &handle->bind_param, ParameterNumber )) return SQL_ERROR;
-
-    params.StatementHandle = handle->unix_handle;
-    params.StrLen_or_Ind   = &handle->bind_param.param[i].len;
-    if (SUCCESS(( ret = ODBC_CALL( SQLBindParam, &params )))) handle->bind_param.param[i].ptr = StrLen_or_Ind;
-    TRACE ("Returning %d\n", ret);
     return ret;
 }
 
@@ -273,17 +162,10 @@ SQLRETURN WINAPI SQLBindParam(SQLHSTMT StatementHandle, SQLUSMALLINT ParameterNu
  */
 SQLRETURN WINAPI SQLCancel(SQLHSTMT StatementHandle)
 {
-    struct SQLCancel_params params;
-    struct handle *handle = StatementHandle;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p)\n", StatementHandle);
+    FIXME("(StatementHandle %p)\n", StatementHandle);
 
-    if (!handle) return SQL_INVALID_HANDLE;
-
-    params.StatementHandle = handle->unix_handle;
-    ret = ODBC_CALL( SQLCancel, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -292,43 +174,27 @@ SQLRETURN WINAPI SQLCancel(SQLHSTMT StatementHandle)
  */
 SQLRETURN WINAPI SQLCloseCursor(SQLHSTMT StatementHandle)
 {
-    struct SQLCloseCursor_params params;
-    struct handle *handle = StatementHandle;
-    SQLRETURN ret;
-
-    TRACE("(StatementHandle %p)\n", StatementHandle);
+    SQLRETURN ret = SQL_ERROR;
 
-    if (!handle) return SQL_INVALID_HANDLE;
+    FIXME("(StatementHandle %p)\n", StatementHandle);
 
-    params.StatementHandle = handle->unix_handle;
-    ret = ODBC_CALL( SQLCloseCursor, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
 /*************************************************************************
  *				SQLColAttribute           [ODBC32.027]
  */
-SQLRETURN WINAPI SQLColAttribute(SQLHSTMT StatementHandle, SQLUSMALLINT ColumnNumber, SQLUSMALLINT FieldIdentifier,
-                                 SQLPOINTER CharacterAttribute, SQLSMALLINT BufferLength, SQLSMALLINT *StringLength,
+SQLRETURN WINAPI SQLColAttribute(SQLHSTMT StatementHandle, SQLUSMALLINT ColumnNumber,
+                                 SQLUSMALLINT FieldIdentifier, SQLPOINTER CharacterAttribute,
+                                 SQLSMALLINT BufferLength, SQLSMALLINT *StringLength,
                                  SQLLEN *NumericAttribute)
 {
-    struct SQLColAttribute_params params = { 0, ColumnNumber, FieldIdentifier, CharacterAttribute, BufferLength,
-                                             StringLength };
-    struct handle *handle = StatementHandle;
-    INT64 num_attr = 0;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p, ColumnNumber %d, FieldIdentifier %d, CharacterAttribute %p, BufferLength %d,"
+    FIXME("(StatementHandle %p, ColumnNumber %d, FieldIdentifier %d, CharacterAttribute %p, BufferLength %d,"
           " StringLength %p, NumericAttribute %p)\n", StatementHandle, ColumnNumber, FieldIdentifier,
           CharacterAttribute, BufferLength, StringLength, NumericAttribute);
 
-    if (!handle) return SQL_INVALID_HANDLE;
-
-    params.StatementHandle  = handle->unix_handle;
-    params.NumericAttribute = &num_attr;
-    if (SUCCESS(( ret = ODBC_CALL( SQLColAttribute, &params )))) *NumericAttribute = num_attr;
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -339,23 +205,15 @@ SQLRETURN WINAPI SQLColumns(SQLHSTMT StatementHandle, SQLCHAR *CatalogName, SQLS
                             SQLCHAR *SchemaName, SQLSMALLINT NameLength2, SQLCHAR *TableName,
                             SQLSMALLINT NameLength3, SQLCHAR *ColumnName, SQLSMALLINT NameLength4)
 {
-    struct SQLColumns_params params = { 0, CatalogName, NameLength1, SchemaName, NameLength2, TableName,
-                                        NameLength3, ColumnName, NameLength4 };
-    struct handle *handle = StatementHandle;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p, CatalogName %s, NameLength1 %d, SchemaName %s, NameLength2 %d, TableName %s,"
+    FIXME("(StatementHandle %p, CatalogName %s, NameLength1 %d, SchemaName %s, NameLength2 %d, TableName %s,"
           " NameLength3 %d, ColumnName %s, NameLength4 %d)\n", StatementHandle,
           debugstr_an((const char *)CatalogName, NameLength1), NameLength1,
           debugstr_an((const char *)SchemaName, NameLength2), NameLength2,
           debugstr_an((const char *)TableName, NameLength3), NameLength3,
           debugstr_an((const char *)ColumnName, NameLength4), NameLength4);
 
-    if (!handle) return SQL_INVALID_HANDLE;
-
-    params.StatementHandle  = handle->unix_handle;
-    ret = ODBC_CALL( SQLColumns, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -366,21 +224,14 @@ SQLRETURN WINAPI SQLConnect(SQLHDBC ConnectionHandle, SQLCHAR *ServerName, SQLSM
                             SQLCHAR *UserName, SQLSMALLINT NameLength2, SQLCHAR *Authentication,
                             SQLSMALLINT NameLength3)
 {
-    struct SQLConnect_params params = { 0, ServerName, NameLength1, UserName, NameLength2, Authentication, NameLength3 };
-    struct handle *handle = ConnectionHandle;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(ConnectionHandle %p, ServerName %s, NameLength1 %d, UserName %s, NameLength2 %d, Authentication %s,"
+    FIXME("(ConnectionHandle %p, ServerName %s, NameLength1 %d, UserName %s, NameLength2 %d, Authentication %s,"
           " NameLength3 %d)\n", ConnectionHandle,
           debugstr_an((const char *)ServerName, NameLength1), NameLength1,
           debugstr_an((const char *)UserName, NameLength2), NameLength2,
           debugstr_an((const char *)Authentication, NameLength3), NameLength3);
 
-    if (!handle) return SQL_INVALID_HANDLE;
-
-    params.ConnectionHandle = handle->unix_handle;
-    ret = ODBC_CALL( SQLConnect, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -389,18 +240,10 @@ SQLRETURN WINAPI SQLConnect(SQLHDBC ConnectionHandle, SQLCHAR *ServerName, SQLSM
  */
 SQLRETURN WINAPI SQLCopyDesc(SQLHDESC SourceDescHandle, SQLHDESC TargetDescHandle)
 {
-    struct SQLCopyDesc_params params;
-    struct handle *source = SourceDescHandle, *target = TargetDescHandle;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(SourceDescHandle %p, TargetDescHandle %p)\n", SourceDescHandle, TargetDescHandle);
+    FIXME("(SourceDescHandle %p, TargetDescHandle %p)\n", SourceDescHandle, TargetDescHandle);
 
-    if (!source || !target) return SQL_INVALID_HANDLE;
-
-    params.SourceDescHandle = source->unix_handle;
-    params.TargetDescHandle = target->unix_handle;
-    ret = ODBC_CALL( SQLCopyDesc, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -411,28 +254,12 @@ SQLRETURN WINAPI SQLDataSources(SQLHENV EnvironmentHandle, SQLUSMALLINT Directio
                                 SQLSMALLINT BufferLength1, SQLSMALLINT *NameLength1, SQLCHAR *Description,
                                 SQLSMALLINT BufferLength2, SQLSMALLINT *NameLength2)
 {
-    struct SQLDataSources_params params = { 0, Direction, ServerName, BufferLength1, NameLength1, Description,
-                                            BufferLength2, NameLength2 };
-    struct handle *handle = EnvironmentHandle;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_NO_DATA;
 
-    TRACE("(EnvironmentHandle %p, Direction %d, ServerName %p, BufferLength1 %d, NameLength1 %p, Description %p,"
+    FIXME("(EnvironmentHandle %p, Direction %d, ServerName %p, BufferLength1 %d, NameLength1 %p, Description %p,"
           " BufferLength2 %d, NameLength2 %p)\n", EnvironmentHandle, Direction, ServerName, BufferLength1,
           NameLength1, Description, BufferLength2, NameLength2);
 
-    if (!handle) return SQL_INVALID_HANDLE;
-
-    params.EnvironmentHandle = handle->unix_handle;
-    if (SUCCESS((ret = ODBC_CALL( SQLDataSources, &params ))) && TRACE_ON(odbc))
-    {
-        if (ServerName && NameLength1 && *NameLength1 > 0)
-            TRACE(" DataSource %s", debugstr_an((const char *)ServerName, *NameLength1));
-        if (Description && NameLength2 && *NameLength2 > 0)
-            TRACE(" Description %s", debugstr_an((const char *)Description, *NameLength2));
-        TRACE("\n");
-    }
-
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -440,8 +267,13 @@ SQLRETURN WINAPI SQLDataSourcesA(SQLHENV EnvironmentHandle, SQLUSMALLINT Directi
                                  SQLSMALLINT BufferLength1, SQLSMALLINT *NameLength1, SQLCHAR *Description,
                                  SQLSMALLINT BufferLength2, SQLSMALLINT *NameLength2)
 {
-    return SQLDataSources( EnvironmentHandle, Direction, ServerName, BufferLength1, NameLength1, Description,
-                           BufferLength2, NameLength2 );
+    SQLRETURN ret = SQL_NO_DATA;
+
+    FIXME("(EnvironmentHandle %p, Direction %d, ServerName %p, BufferLength1 %d, NameLength1 %p, Description %p,"
+          " BufferLength2 %d, NameLength2 %p)\n", EnvironmentHandle, Direction, ServerName, BufferLength1,
+          NameLength1, Description, BufferLength2, NameLength2);
+
+    return ret;
 }
 
 /*************************************************************************
@@ -451,36 +283,12 @@ SQLRETURN WINAPI SQLDescribeCol(SQLHSTMT StatementHandle, SQLUSMALLINT ColumnNum
                                 SQLSMALLINT BufferLength, SQLSMALLINT *NameLength, SQLSMALLINT *DataType,
                                 SQLULEN *ColumnSize, SQLSMALLINT *DecimalDigits, SQLSMALLINT *Nullable)
 {
-    struct SQLDescribeCol_params params = { 0, ColumnNumber, ColumnName, BufferLength, NameLength, DataType,
-                                            NULL, DecimalDigits, Nullable };
-    struct handle *handle = StatementHandle;
-    UINT64 size;
-    SQLSMALLINT dummy;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p, ColumnNumber %d, ColumnName %p, BufferLength %d, NameLength %p, DataType %p,"
+    FIXME("(StatementHandle %p, ColumnNumber %d, ColumnName %p, BufferLength %d, NameLength %p, DataType %p,"
           " ColumnSize %p, DecimalDigits %p, Nullable %p)\n", StatementHandle, ColumnNumber, ColumnName,
           BufferLength, NameLength, DataType, ColumnSize, DecimalDigits, Nullable);
 
-    if (!handle) return SQL_INVALID_HANDLE;
-
-    params.StatementHandle = handle->unix_handle;
-    if (!params.NameLength) params.NameLength = &dummy; /* workaround for drivers that don't accept NULL NameLength */
-    params.ColumnSize      = &size;
-    if (SUCCESS((ret = ODBC_CALL( SQLDescribeCol, &params ))))
-    {
-        if (ColumnName && NameLength) TRACE(" ColumnName %s\n", debugstr_an((const char *)ColumnName, *NameLength));
-        if (DataType) TRACE(" DataType %d\n", *DataType);
-        if (ColumnSize)
-        {
-            *ColumnSize = size;
-            TRACE(" ColumnSize %s\n", debugstr_sqlulen(*ColumnSize));
-        }
-        if (DecimalDigits) TRACE(" DecimalDigits %d\n", *DecimalDigits);
-        if (Nullable) TRACE(" Nullable %d\n", *Nullable);
-    }
-
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -489,17 +297,10 @@ SQLRETURN WINAPI SQLDescribeCol(SQLHSTMT StatementHandle, SQLUSMALLINT ColumnNum
  */
 SQLRETURN WINAPI SQLDisconnect(SQLHDBC ConnectionHandle)
 {
-    struct SQLDisconnect_params params;
-    struct handle *handle = ConnectionHandle;
-    SQLRETURN ret;
-
-    TRACE("(ConnectionHandle %p)\n", ConnectionHandle);
+    SQLRETURN ret = SQL_ERROR;
 
-    if (!handle) return SQL_INVALID_HANDLE;
+    FIXME("(ConnectionHandle %p)\n", ConnectionHandle);
 
-    params.ConnectionHandle = handle->unix_handle;
-    ret = ODBC_CALL( SQLDisconnect, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -508,17 +309,10 @@ SQLRETURN WINAPI SQLDisconnect(SQLHDBC ConnectionHandle)
  */
 SQLRETURN WINAPI SQLEndTran(SQLSMALLINT HandleType, SQLHANDLE Handle, SQLSMALLINT CompletionType)
 {
-    struct SQLEndTran_params params = { HandleType, 0, CompletionType };
-    struct handle *handle = Handle;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(HandleType %d, Handle %p, CompletionType %d)\n", HandleType, Handle, CompletionType);
+    FIXME("(HandleType %d, Handle %p, CompletionType %d)\n", HandleType, Handle, CompletionType);
 
-    if (!handle) return SQL_INVALID_HANDLE;
-
-    params.Handle = handle->unix_handle;
-    ret = ODBC_CALL( SQLEndTran, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -526,28 +320,15 @@ SQLRETURN WINAPI SQLEndTran(SQLSMALLINT HandleType, SQLHANDLE Handle, SQLSMALLIN
  *				SQLError           [ODBC32.010]
  */
 SQLRETURN WINAPI SQLError(SQLHENV EnvironmentHandle, SQLHDBC ConnectionHandle, SQLHSTMT StatementHandle,
-                          SQLCHAR *SqlState, SQLINTEGER *NativeError, SQLCHAR *MessageText,
+                          SQLCHAR *Sqlstate, SQLINTEGER *NativeError, SQLCHAR *MessageText,
                           SQLSMALLINT BufferLength, SQLSMALLINT *TextLength)
 {
-    struct SQLError_params params = { 0, 0, 0, SqlState, NativeError, MessageText, BufferLength, TextLength };
-    struct handle *env = EnvironmentHandle, *con = ConnectionHandle, *stmt = StatementHandle;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(EnvironmentHandle %p, ConnectionHandle %p, StatementHandle %p, SqlState %p, NativeError %p,"
+    FIXME("(EnvironmentHandle %p, ConnectionHandle %p, StatementHandle %p, Sqlstate %p, NativeError %p,"
           " MessageText %p, BufferLength %d, TextLength %p)\n", EnvironmentHandle, ConnectionHandle,
-          StatementHandle, SqlState, NativeError, MessageText, BufferLength, TextLength);
+          StatementHandle, Sqlstate, NativeError, MessageText, BufferLength, TextLength);
 
-    if (env) params.EnvironmentHandle = env->unix_handle;
-    if (con) params.ConnectionHandle = con->unix_handle;
-    if (stmt) params.StatementHandle = stmt->unix_handle;
-    if (SUCCESS((ret = ODBC_CALL( SQLError, &params ))))
-    {
-        TRACE(" SqlState %s\n", debugstr_an((const char *)SqlState, 5));
-        TRACE(" Error %d\n", *NativeError);
-        TRACE(" MessageText %s\n", debugstr_an((const char *)MessageText, *TextLength));
-    }
-
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -556,18 +337,11 @@ SQLRETURN WINAPI SQLError(SQLHENV EnvironmentHandle, SQLHDBC ConnectionHandle, S
  */
 SQLRETURN WINAPI SQLExecDirect(SQLHSTMT StatementHandle, SQLCHAR *StatementText, SQLINTEGER TextLength)
 {
-    struct SQLExecDirect_params params = { 0, StatementText, TextLength };
-    struct handle *handle = StatementHandle;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p, StatementText %s, TextLength %d)\n", StatementHandle,
+    FIXME("(StatementHandle %p, StatementText %s, TextLength %d)\n", StatementHandle,
           debugstr_an((const char *)StatementText, TextLength), TextLength);
 
-    if (!handle) return SQL_INVALID_HANDLE;
-
-    params.StatementHandle = handle->unix_handle;
-    ret = ODBC_CALL( SQLExecDirect, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -576,58 +350,22 @@ SQLRETURN WINAPI SQLExecDirect(SQLHSTMT StatementHandle, SQLCHAR *StatementText,
  */
 SQLRETURN WINAPI SQLExecute(SQLHSTMT StatementHandle)
 {
-    struct SQLExecute_params params;
-    struct handle *handle = StatementHandle;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p)\n", StatementHandle);
+    FIXME("(StatementHandle %p)\n", StatementHandle);
 
-    if (!handle) return SQL_INVALID_HANDLE;
-
-    params.StatementHandle = handle->unix_handle;
-    ret = ODBC_CALL( SQLExecute, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
-static void update_result_lengths( struct handle *handle )
-{
-    UINT i;
-    for (i = 0; i < handle->bind_col.count; i++)
-    {
-        if (handle->bind_col.param[i].ptr)
-            *(SQLLEN *)handle->bind_col.param[i].ptr = handle->bind_col.param[i].len;
-    }
-    for (i = 0; i < handle->bind_param.count; i++)
-    {
-        if (handle->bind_param.param[i].ptr)
-            *(SQLLEN *)handle->bind_param.param[i].ptr = handle->bind_param.param[i].len;
-    }
-    for (i = 0; i < handle->bind_parameter.count; i++)
-    {
-        if (handle->bind_parameter.param[i].ptr)
-        {
-            *(SQLLEN *)handle->bind_parameter.param[i].ptr = handle->bind_parameter.param[i].len;
-        }
-    }
-}
-
 /*************************************************************************
  *				SQLFetch           [ODBC32.013]
  */
 SQLRETURN WINAPI SQLFetch(SQLHSTMT StatementHandle)
 {
-    struct SQLFetch_params params;
-    struct handle *handle = StatementHandle;
-    SQLRETURN ret;
-
-    TRACE("(StatementHandle %p)\n", StatementHandle);
+    SQLRETURN ret = SQL_ERROR;
 
-    if (!handle) return SQL_INVALID_HANDLE;
+    FIXME("(StatementHandle %p)\n", StatementHandle);
 
-    params.StatementHandle = handle->unix_handle;
-    if (SUCCESS(( ret = ODBC_CALL( SQLFetch, &params )))) update_result_lengths( handle );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -636,18 +374,11 @@ SQLRETURN WINAPI SQLFetch(SQLHSTMT StatementHandle)
  */
 SQLRETURN WINAPI SQLFetchScroll(SQLHSTMT StatementHandle, SQLSMALLINT FetchOrientation, SQLLEN FetchOffset)
 {
-    struct SQLFetchScroll_params params = { 0, FetchOrientation, FetchOffset };
-    struct handle *handle = StatementHandle;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p, FetchOrientation %d, FetchOffset %s)\n", StatementHandle, FetchOrientation,
+    FIXME("(StatementHandle %p, FetchOrientation %d, FetchOffset %s)\n", StatementHandle, FetchOrientation,
           debugstr_sqllen(FetchOffset));
 
-    if (!handle) return SQL_INVALID_HANDLE;
-
-    params.StatementHandle = handle->unix_handle;
-    if (SUCCESS(( ret = ODBC_CALL( SQLFetchScroll, &params )))) update_result_lengths( handle );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -656,18 +387,10 @@ SQLRETURN WINAPI SQLFetchScroll(SQLHSTMT StatementHandle, SQLSMALLINT FetchOrien
  */
 SQLRETURN WINAPI SQLFreeConnect(SQLHDBC ConnectionHandle)
 {
-    struct SQLFreeConnect_params params;
-    struct handle *handle = ConnectionHandle;
-    SQLRETURN ret;
-
-    TRACE("(ConnectionHandle %p)\n", ConnectionHandle);
+    SQLRETURN ret = SQL_ERROR;
 
-    if (!handle) return SQL_INVALID_HANDLE;
+    FIXME("(ConnectionHandle %p)\n", ConnectionHandle);
 
-    params.ConnectionHandle = handle->unix_handle;
-    ret = ODBC_CALL( SQLFreeConnect, &params );
-    free( handle );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -676,47 +399,22 @@ SQLRETURN WINAPI SQLFreeConnect(SQLHDBC ConnectionHandle)
  */
 SQLRETURN WINAPI SQLFreeEnv(SQLHENV EnvironmentHandle)
 {
-    struct SQLFreeEnv_params params;
-    struct handle *handle = EnvironmentHandle;
-    SQLRETURN ret;
-
-    TRACE("(EnvironmentHandle %p)\n", EnvironmentHandle);
+    SQLRETURN ret = SQL_ERROR;
 
-    if (!handle) return SQL_INVALID_HANDLE;
+    FIXME("(EnvironmentHandle %p)\n", EnvironmentHandle);
 
-    params.EnvironmentHandle = handle->unix_handle;
-    ret = ODBC_CALL( SQLFreeEnv, &params );
-    free( handle );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
-static void free_bindings( struct handle *handle )
-{
-    free( handle->bind_col.param );
-    free( handle->bind_param.param );
-    free( handle->bind_parameter.param );
-}
-
 /*************************************************************************
  *				SQLFreeHandle           [ODBC32.031]
  */
 SQLRETURN WINAPI SQLFreeHandle(SQLSMALLINT HandleType, SQLHANDLE Handle)
 {
-    struct SQLFreeHandle_params params;
-    struct handle *handle = Handle;
-    SQLRETURN ret;
-
-    TRACE("(HandleType %d, Handle %p)\n", HandleType, Handle);
+    SQLRETURN ret = SQL_ERROR;
 
-    if (!handle) return SQL_INVALID_HANDLE;
+    FIXME("(HandleType %d, Handle %p)\n", HandleType, Handle);
 
-    params.HandleType = HandleType;
-    params.Handle     = handle->unix_handle;
-    ret = ODBC_CALL( SQLFreeHandle, &params );
-    free_bindings( handle );
-    free( handle );
-    TRACE ("Returning %d\n", ret);
     return ret;
 }
 
@@ -725,20 +423,10 @@ SQLRETURN WINAPI SQLFreeHandle(SQLSMALLINT HandleType, SQLHANDLE Handle)
  */
 SQLRETURN WINAPI SQLFreeStmt(SQLHSTMT StatementHandle, SQLUSMALLINT Option)
 {
-    struct SQLFreeStmt_params params;
-    struct handle *handle = StatementHandle;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p, Option %d)\n", StatementHandle, Option);
+    FIXME("(StatementHandle %p, Option %d)\n", StatementHandle, Option);
 
-    if (!handle) return SQL_INVALID_HANDLE;
-
-    params.StatementHandle = handle->unix_handle;
-    params.Option          = Option;
-    ret = ODBC_CALL( SQLFreeStmt, &params );
-    free_bindings( handle );
-    free( handle );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -748,18 +436,11 @@ SQLRETURN WINAPI SQLFreeStmt(SQLHSTMT StatementHandle, SQLUSMALLINT Option)
 SQLRETURN WINAPI SQLGetConnectAttr(SQLHDBC ConnectionHandle, SQLINTEGER Attribute, SQLPOINTER Value,
                                    SQLINTEGER BufferLength, SQLINTEGER *StringLength)
 {
-    struct SQLGetConnectAttr_params params = { 0, Attribute, Value, BufferLength, StringLength };
-    struct handle *handle = ConnectionHandle;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(ConnectionHandle %p, Attribute %d, Value %p, BufferLength %d, StringLength %p)\n", ConnectionHandle,
+    FIXME("(ConnectionHandle %p, Attribute %d, Value %p, BufferLength %d, StringLength %p)\n", ConnectionHandle,
           Attribute, Value, BufferLength, StringLength);
 
-    if (!handle) return SQL_INVALID_HANDLE;
-
-    params.ConnectionHandle = handle->unix_handle;
-    ret = ODBC_CALL( SQLGetConnectAttr, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -768,17 +449,10 @@ SQLRETURN WINAPI SQLGetConnectAttr(SQLHDBC ConnectionHandle, SQLINTEGER Attribut
  */
 SQLRETURN WINAPI SQLGetConnectOption(SQLHDBC ConnectionHandle, SQLUSMALLINT Option, SQLPOINTER Value)
 {
-    struct SQLGetConnectOption_params params = { 0, Option, Value };
-    struct handle *handle = ConnectionHandle;
-    SQLRETURN ret;
-
-    TRACE("(ConnectionHandle %p, Option %d, Value %p)\n", ConnectionHandle, Option, Value);
+    SQLRETURN ret = SQL_ERROR;
 
-    if (!handle) return SQL_INVALID_HANDLE;
+    FIXME("(ConnectionHandle %p, Option %d, Value %p)\n", ConnectionHandle, Option, Value);
 
-    params.ConnectionHandle = handle->unix_handle;
-    ret = ODBC_CALL( SQLGetConnectOption, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -788,18 +462,11 @@ SQLRETURN WINAPI SQLGetConnectOption(SQLHDBC ConnectionHandle, SQLUSMALLINT Opti
 SQLRETURN WINAPI SQLGetCursorName(SQLHSTMT StatementHandle, SQLCHAR *CursorName, SQLSMALLINT BufferLength,
                                   SQLSMALLINT *NameLength)
 {
-    struct SQLGetCursorName_params params = { 0, CursorName, BufferLength, NameLength };
-    struct handle *handle = StatementHandle;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p, CursorName %p, BufferLength %d, NameLength %p)\n", StatementHandle, CursorName,
+    FIXME("(StatementHandle %p, CursorName %p, BufferLength %d, NameLength %p)\n", StatementHandle, CursorName,
           BufferLength, NameLength);
 
-    if (!handle) return SQL_INVALID_HANDLE;
-
-    params.StatementHandle = handle->unix_handle;
-    ret = ODBC_CALL( SQLGetCursorName, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -809,20 +476,11 @@ SQLRETURN WINAPI SQLGetCursorName(SQLHSTMT StatementHandle, SQLCHAR *CursorName,
 SQLRETURN WINAPI SQLGetData(SQLHSTMT StatementHandle, SQLUSMALLINT ColumnNumber, SQLSMALLINT TargetType,
                             SQLPOINTER TargetValue, SQLLEN BufferLength, SQLLEN *StrLen_or_Ind)
 {
-    struct SQLGetData_params params = { 0, ColumnNumber, TargetType, TargetValue, BufferLength };
-    struct handle *handle = StatementHandle;
-    INT64 len;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p, ColumnNumber %d, TargetType %d, TargetValue %p, BufferLength %s, StrLen_or_Ind %p)\n",
+    FIXME("(StatementHandle %p, ColumnNumber %d, TargetType %d, TargetValue %p, BufferLength %s, StrLen_or_Ind %p)\n",
           StatementHandle, ColumnNumber, TargetType, TargetValue, debugstr_sqllen(BufferLength), StrLen_or_Ind);
 
-    if (!handle) return SQL_INVALID_HANDLE;
-
-    params.StatementHandle = handle->unix_handle;
-    params.StrLen_or_Ind   = &len;
-    if (SUCCESS((ret = ODBC_CALL( SQLGetData, &params )))) *StrLen_or_Ind = len;
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -832,18 +490,11 @@ SQLRETURN WINAPI SQLGetData(SQLHSTMT StatementHandle, SQLUSMALLINT ColumnNumber,
 SQLRETURN WINAPI SQLGetDescField(SQLHDESC DescriptorHandle, SQLSMALLINT RecNumber, SQLSMALLINT FieldIdentifier,
                                  SQLPOINTER Value, SQLINTEGER BufferLength, SQLINTEGER *StringLength)
 {
-    struct SQLGetDescField_params params = { 0, RecNumber, FieldIdentifier, Value, BufferLength, StringLength };
-    struct handle *handle = DescriptorHandle;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(DescriptorHandle %p, RecNumber %d, FieldIdentifier %d, Value %p, BufferLength %d, StringLength %p)\n",
+    FIXME("(DescriptorHandle %p, RecNumber %d, FieldIdentifier %d, Value %p, BufferLength %d, StringLength %p)\n",
           DescriptorHandle, RecNumber, FieldIdentifier, Value, BufferLength, StringLength);
 
-    if (!handle) return SQL_INVALID_HANDLE;
-
-    params.DescriptorHandle = handle->unix_handle;
-    ret = ODBC_CALL( SQLGetDescField, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -855,22 +506,12 @@ SQLRETURN WINAPI SQLGetDescRec(SQLHDESC DescriptorHandle, SQLSMALLINT RecNumber,
                                SQLSMALLINT *SubType, SQLLEN *Length, SQLSMALLINT *Precision,
                                SQLSMALLINT *Scale, SQLSMALLINT *Nullable)
 {
-    struct SQLGetDescRec_params params = { 0, RecNumber, Name, BufferLength, StringLength, Type, SubType, NULL,
-                                           Precision, Scale, Nullable };
-    struct handle *handle = DescriptorHandle;
-    INT64 len;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(DescriptorHandle %p, RecNumber %d, Name %p, BufferLength %d, StringLength %p, Type %p, SubType %p,"
+    FIXME("(DescriptorHandle %p, RecNumber %d, Name %p, BufferLength %d, StringLength %p, Type %p, SubType %p,"
           " Length %p, Precision %p, Scale %p, Nullable %p)\n", DescriptorHandle, RecNumber, Name, BufferLength,
           StringLength, Type, SubType, Length, Precision, Scale, Nullable);
 
-    if (!handle) return SQL_INVALID_HANDLE;
-
-    params.DescriptorHandle = handle->unix_handle;
-    params.Length           = &len;
-    if (SUCCESS((ret = ODBC_CALL( SQLGetDescRec, &params )))) *Length = len;
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -881,19 +522,11 @@ SQLRETURN WINAPI SQLGetDiagField(SQLSMALLINT HandleType, SQLHANDLE Handle, SQLSM
                                  SQLSMALLINT DiagIdentifier, SQLPOINTER DiagInfo, SQLSMALLINT BufferLength,
                                  SQLSMALLINT *StringLength)
 {
-    struct SQLGetDiagField_params params = { HandleType, 0, RecNumber, DiagIdentifier, DiagInfo, BufferLength,
-                                             StringLength };
-    struct handle *handle = Handle;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(HandleType %d, Handle %p, RecNumber %d, DiagIdentifier %d, DiagInfo %p, BufferLength %d,"
+    FIXME("(HandleType %d, Handle %p, RecNumber %d, DiagIdentifier %d, DiagInfo %p, BufferLength %d,"
           " StringLength %p)\n", HandleType, Handle, RecNumber, DiagIdentifier, DiagInfo, BufferLength, StringLength);
 
-    if (!handle) return SQL_INVALID_HANDLE;
-
-    params.Handle = handle->unix_handle;
-    ret = ODBC_CALL( SQLGetDiagField, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -901,23 +534,15 @@ SQLRETURN WINAPI SQLGetDiagField(SQLSMALLINT HandleType, SQLHANDLE Handle, SQLSM
  *				SQLGetDiagRec           [ODBC32.036]
  */
 SQLRETURN WINAPI SQLGetDiagRec(SQLSMALLINT HandleType, SQLHANDLE Handle, SQLSMALLINT RecNumber,
-                               SQLCHAR *SqlState, SQLINTEGER *NativeError, SQLCHAR *MessageText,
+                               SQLCHAR *Sqlstate, SQLINTEGER *NativeError, SQLCHAR *MessageText,
                                SQLSMALLINT BufferLength, SQLSMALLINT *TextLength)
 {
-    struct SQLGetDiagRec_params params = { HandleType, 0, RecNumber, SqlState, NativeError, MessageText,
-                                           BufferLength, TextLength };
-    struct handle *handle = Handle;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(HandleType %d, Handle %p, RecNumber %d, SqlState %p, NativeError %p, MessageText %p, BufferLength %d,"
-          " TextLength %p)\n", HandleType, Handle, RecNumber, SqlState, NativeError, MessageText, BufferLength,
+    FIXME("(HandleType %d, Handle %p, RecNumber %d, Sqlstate %p, NativeError %p, MessageText %p, BufferLength %d,"
+          " TextLength %p)\n", HandleType, Handle, RecNumber, Sqlstate, NativeError, MessageText, BufferLength,
           TextLength);
 
-    if (!handle) return SQL_INVALID_HANDLE;
-
-    params.Handle = handle->unix_handle;
-    ret = ODBC_CALL( SQLGetDiagRec, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -927,18 +552,11 @@ SQLRETURN WINAPI SQLGetDiagRec(SQLSMALLINT HandleType, SQLHANDLE Handle, SQLSMAL
 SQLRETURN WINAPI SQLGetEnvAttr(SQLHENV EnvironmentHandle, SQLINTEGER Attribute, SQLPOINTER Value,
                                SQLINTEGER BufferLength, SQLINTEGER *StringLength)
 {
-    struct SQLGetEnvAttr_params params = { 0, Attribute, Value, BufferLength, StringLength };
-    struct handle *handle = EnvironmentHandle;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(EnvironmentHandle %p, Attribute %d, Value %p, BufferLength %d, StringLength %p)\n",
+    FIXME("(EnvironmentHandle %p, Attribute %d, Value %p, BufferLength %d, StringLength %p)\n",
           EnvironmentHandle, Attribute, Value, BufferLength, StringLength);
 
-    if (!handle) return SQL_INVALID_HANDLE;
-
-    params.EnvironmentHandle = handle->unix_handle;
-    ret = ODBC_CALL( SQLGetEnvAttr, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -947,17 +565,10 @@ SQLRETURN WINAPI SQLGetEnvAttr(SQLHENV EnvironmentHandle, SQLINTEGER Attribute,
  */
 SQLRETURN WINAPI SQLGetFunctions(SQLHDBC ConnectionHandle, SQLUSMALLINT FunctionId, SQLUSMALLINT *Supported)
 {
-    struct SQLGetFunctions_params params = { 0, FunctionId, Supported };
-    struct handle *handle = ConnectionHandle;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(ConnectionHandle %p, FunctionId %d, Supported %p)\n", ConnectionHandle, FunctionId, Supported);
+    FIXME("(ConnectionHandle %p, FunctionId %d, Supported %p)\n", ConnectionHandle, FunctionId, Supported);
 
-    if (!handle) return SQL_INVALID_HANDLE;
-
-    params.ConnectionHandle = handle->unix_handle;
-    ret = ODBC_CALL( SQLGetFunctions, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -967,18 +578,11 @@ SQLRETURN WINAPI SQLGetFunctions(SQLHDBC ConnectionHandle, SQLUSMALLINT Function
 SQLRETURN WINAPI SQLGetInfo(SQLHDBC ConnectionHandle, SQLUSMALLINT InfoType, SQLPOINTER InfoValue,
                             SQLSMALLINT BufferLength, SQLSMALLINT *StringLength)
 {
-    struct SQLGetInfo_params params = { 0, InfoType, InfoValue, BufferLength, StringLength };
-    struct handle *handle = ConnectionHandle;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(ConnectionHandle, %p, InfoType %d, InfoValue %p, BufferLength %d, StringLength %p)\n", ConnectionHandle,
+    FIXME("(ConnectionHandle, %p, InfoType %d, InfoValue %p, BufferLength %d, StringLength %p)\n", ConnectionHandle,
           InfoType, InfoValue, BufferLength, StringLength);
 
-    if (!handle) return SQL_INVALID_HANDLE;
-
-    params.ConnectionHandle = handle->unix_handle;
-    ret = ODBC_CALL( SQLGetInfo, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -988,11 +592,9 @@ SQLRETURN WINAPI SQLGetInfo(SQLHDBC ConnectionHandle, SQLUSMALLINT InfoType, SQL
 SQLRETURN WINAPI SQLGetStmtAttr(SQLHSTMT StatementHandle, SQLINTEGER Attribute, SQLPOINTER Value,
                                 SQLINTEGER BufferLength, SQLINTEGER *StringLength)
 {
-    struct SQLGetStmtAttr_params params = { 0, Attribute, Value, BufferLength, StringLength };
-    struct handle *handle = StatementHandle;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p, Attribute %d, Value %p, BufferLength %d, StringLength %p)\n", StatementHandle,
+    FIXME("(StatementHandle %p, Attribute %d, Value %p, BufferLength %d, StringLength %p)\n", StatementHandle,
           Attribute, Value, BufferLength, StringLength);
 
     if (!Value)
@@ -1001,11 +603,6 @@ SQLRETURN WINAPI SQLGetStmtAttr(SQLHSTMT StatementHandle, SQLINTEGER Attribute,
         return SQL_ERROR;
     }
 
-    if (!handle) return SQL_INVALID_HANDLE;
-
-    params.StatementHandle = handle->unix_handle;
-    ret = ODBC_CALL( SQLGetStmtAttr, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -1014,17 +611,10 @@ SQLRETURN WINAPI SQLGetStmtAttr(SQLHSTMT StatementHandle, SQLINTEGER Attribute,
  */
 SQLRETURN WINAPI SQLGetStmtOption(SQLHSTMT StatementHandle, SQLUSMALLINT Option, SQLPOINTER Value)
 {
-    struct SQLGetStmtOption_params params = { 0, Option, Value };
-    struct handle *handle = StatementHandle;
-    SQLRETURN ret;
-
-    TRACE("(StatementHandle %p, Option %d, Value %p)\n", StatementHandle, Option, Value);
+    SQLRETURN ret = SQL_ERROR;
 
-    if (!handle) return SQL_INVALID_HANDLE;
+    FIXME("(StatementHandle %p, Option %d, Value %p)\n", StatementHandle, Option, Value);
 
-    params.StatementHandle = handle->unix_handle;
-    ret = ODBC_CALL( SQLGetStmtOption, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -1033,17 +623,10 @@ SQLRETURN WINAPI SQLGetStmtOption(SQLHSTMT StatementHandle, SQLUSMALLINT Option,
  */
 SQLRETURN WINAPI SQLGetTypeInfo(SQLHSTMT StatementHandle, SQLSMALLINT DataType)
 {
-    struct SQLGetTypeInfo_params params = { 0, DataType };
-    struct handle *handle = StatementHandle;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p, DataType %d)\n", StatementHandle, DataType);
+    FIXME("(StatementHandle %p, DataType %d)\n", StatementHandle, DataType);
 
-    if (!handle) return SQL_INVALID_HANDLE;
-
-    params.StatementHandle = handle->unix_handle;
-    ret = ODBC_CALL( SQLGetTypeInfo, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -1052,17 +635,10 @@ SQLRETURN WINAPI SQLGetTypeInfo(SQLHSTMT StatementHandle, SQLSMALLINT DataType)
  */
 SQLRETURN WINAPI SQLNumResultCols(SQLHSTMT StatementHandle, SQLSMALLINT *ColumnCount)
 {
-    struct SQLNumResultCols_params params = { 0, ColumnCount };
-    struct handle *handle = StatementHandle;
-    SQLRETURN ret;
-
-    TRACE("(StatementHandle %p, ColumnCount %p)\n", StatementHandle, ColumnCount);
+    SQLRETURN ret = SQL_ERROR;
 
-    if (!handle) return SQL_INVALID_HANDLE;
+    FIXME("(StatementHandle %p, ColumnCount %p)\n", StatementHandle, ColumnCount);
 
-    params.StatementHandle = handle->unix_handle;
-    ret = ODBC_CALL( SQLNumResultCols, &params );
-    TRACE("Returning %d ColumnCount %d\n", ret, *ColumnCount);
     return ret;
 }
 
@@ -1071,17 +647,10 @@ SQLRETURN WINAPI SQLNumResultCols(SQLHSTMT StatementHandle, SQLSMALLINT *ColumnC
  */
 SQLRETURN WINAPI SQLParamData(SQLHSTMT StatementHandle, SQLPOINTER *Value)
 {
-    struct SQLParamData_params params = { 0, Value };
-    struct handle *handle = StatementHandle;
-    SQLRETURN ret;
-
-    TRACE("(StatementHandle %p, Value %p)\n", StatementHandle, Value);
+    SQLRETURN ret = SQL_ERROR;
 
-    if (!handle) return SQL_INVALID_HANDLE;
+    FIXME("(StatementHandle %p, Value %p)\n", StatementHandle, Value);
 
-    params.StatementHandle = handle->unix_handle;
-    ret = ODBC_CALL( SQLParamData, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -1090,18 +659,11 @@ SQLRETURN WINAPI SQLParamData(SQLHSTMT StatementHandle, SQLPOINTER *Value)
  */
 SQLRETURN WINAPI SQLPrepare(SQLHSTMT StatementHandle, SQLCHAR *StatementText, SQLINTEGER TextLength)
 {
-    struct SQLPrepare_params params = { 0, StatementText, TextLength };
-    struct handle *handle = StatementHandle;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p, StatementText %s, TextLength %d)\n", StatementHandle,
+    FIXME("(StatementHandle %p, StatementText %s, TextLength %d)\n", StatementHandle,
           debugstr_an((const char *)StatementText, TextLength), TextLength);
 
-    if (!handle) return SQL_INVALID_HANDLE;
-
-    params.StatementHandle = handle->unix_handle;
-    ret = ODBC_CALL( SQLPrepare, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -1110,17 +672,10 @@ SQLRETURN WINAPI SQLPrepare(SQLHSTMT StatementHandle, SQLCHAR *StatementText, SQ
  */
 SQLRETURN WINAPI SQLPutData(SQLHSTMT StatementHandle, SQLPOINTER Data, SQLLEN StrLen_or_Ind)
 {
-    struct SQLPutData_params params = { 0, Data, StrLen_or_Ind };
-    struct handle *handle = StatementHandle;
-    SQLRETURN ret;
-
-    TRACE("(StatementHandle %p, Data %p, StrLen_or_Ind %s)\n", StatementHandle, Data, debugstr_sqllen(StrLen_or_Ind));
+    SQLRETURN ret = SQL_ERROR;
 
-    if (!handle) return SQL_INVALID_HANDLE;
+    FIXME("(StatementHandle %p, Data %p, StrLen_or_Ind %s)\n", StatementHandle, Data, debugstr_sqllen(StrLen_or_Ind));
 
-    params.StatementHandle = handle->unix_handle;
-    ret = ODBC_CALL( SQLPutData, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -1129,23 +684,10 @@ SQLRETURN WINAPI SQLPutData(SQLHSTMT StatementHandle, SQLPOINTER Data, SQLLEN St
  */
 SQLRETURN WINAPI SQLRowCount(SQLHSTMT StatementHandle, SQLLEN *RowCount)
 {
-    struct SQLRowCount_params params;
-    struct handle *handle = StatementHandle;
-    INT64 count;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p, RowCount %p)\n", StatementHandle, RowCount);
+    FIXME("(StatementHandle %p, RowCount %p)\n", StatementHandle, RowCount);
 
-    if (!handle) return SQL_INVALID_HANDLE;
-
-    params.StatementHandle = handle->unix_handle;
-    params.RowCount        = &count;
-    if (SUCCESS((ret = ODBC_CALL( SQLRowCount, &params ))) && RowCount)
-    {
-        *RowCount = count;
-        TRACE(" RowCount %s\n", debugstr_sqllen(*RowCount));
-    }
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -1155,18 +697,11 @@ SQLRETURN WINAPI SQLRowCount(SQLHSTMT StatementHandle, SQLLEN *RowCount)
 SQLRETURN WINAPI SQLSetConnectAttr(SQLHDBC ConnectionHandle, SQLINTEGER Attribute, SQLPOINTER Value,
                                    SQLINTEGER StringLength)
 {
-    struct SQLSetConnectAttr_params params = { 0, Attribute, Value, StringLength };
-    struct handle *handle = ConnectionHandle;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(ConnectionHandle %p, Attribute %d, Value %p, StringLength %d)\n", ConnectionHandle, Attribute, Value,
+    FIXME("(ConnectionHandle %p, Attribute %d, Value %p, StringLength %d)\n", ConnectionHandle, Attribute, Value,
           StringLength);
 
-    if (!handle) return SQL_INVALID_HANDLE;
-
-    params.ConnectionHandle = handle->unix_handle;
-    ret = ODBC_CALL( SQLSetConnectAttr, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -1175,17 +710,10 @@ SQLRETURN WINAPI SQLSetConnectAttr(SQLHDBC ConnectionHandle, SQLINTEGER Attribut
  */
 SQLRETURN WINAPI SQLSetConnectOption(SQLHDBC ConnectionHandle, SQLUSMALLINT Option, SQLULEN Value)
 {
-    struct SQLSetConnectOption_params params = { 0, Option, Value };
-    struct handle *handle = ConnectionHandle;
-    SQLRETURN ret;
-
-    TRACE("(ConnectionHandle %p, Option %d, Value %s)\n", ConnectionHandle, Option, debugstr_sqlulen(Value));
+    SQLRETURN ret = SQL_ERROR;
 
-    if (!handle) return SQL_INVALID_HANDLE;
+    FIXME("(ConnectionHandle %p, Option %d, Value %s)\n", ConnectionHandle, Option, debugstr_sqlulen(Value));
 
-    params.ConnectionHandle = handle->unix_handle;
-    ret = ODBC_CALL( SQLSetConnectOption, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -1194,18 +722,11 @@ SQLRETURN WINAPI SQLSetConnectOption(SQLHDBC ConnectionHandle, SQLUSMALLINT Opti
  */
 SQLRETURN WINAPI SQLSetCursorName(SQLHSTMT StatementHandle, SQLCHAR *CursorName, SQLSMALLINT NameLength)
 {
-    struct SQLSetCursorName_params params = { 0, CursorName, NameLength };
-    struct handle *handle = StatementHandle;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p, CursorName %s, NameLength %d)\n", StatementHandle,
+    FIXME("(StatementHandle %p, CursorName %s, NameLength %d)\n", StatementHandle,
           debugstr_an((const char *)CursorName, NameLength), NameLength);
 
-    if (!handle) return SQL_INVALID_HANDLE;
-
-    params.StatementHandle = handle->unix_handle;
-    ret = ODBC_CALL( SQLSetCursorName, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -1215,18 +736,11 @@ SQLRETURN WINAPI SQLSetCursorName(SQLHSTMT StatementHandle, SQLCHAR *CursorName,
 SQLRETURN WINAPI SQLSetDescField(SQLHDESC DescriptorHandle, SQLSMALLINT RecNumber, SQLSMALLINT FieldIdentifier,
                                  SQLPOINTER Value, SQLINTEGER BufferLength)
 {
-    struct SQLSetDescField_params params = { 0, RecNumber, FieldIdentifier, Value, BufferLength };
-    struct handle *handle = DescriptorHandle;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(DescriptorHandle %p, RecNumber %d, FieldIdentifier %d, Value %p, BufferLength %d)\n", DescriptorHandle,
+    FIXME("(DescriptorHandle %p, RecNumber %d, FieldIdentifier %d, Value %p, BufferLength %d)\n", DescriptorHandle,
           RecNumber, FieldIdentifier, Value, BufferLength);
 
-    if (!handle) return SQL_INVALID_HANDLE;
-
-    params.DescriptorHandle = handle->unix_handle;
-    ret = ODBC_CALL( SQLSetDescField, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -1237,26 +751,12 @@ SQLRETURN WINAPI SQLSetDescRec(SQLHDESC DescriptorHandle, SQLSMALLINT RecNumber,
                                SQLSMALLINT SubType, SQLLEN Length, SQLSMALLINT Precision, SQLSMALLINT Scale,
                                SQLPOINTER Data, SQLLEN *StringLength, SQLLEN *Indicator)
 {
-    struct SQLSetDescRec_params params = { 0, RecNumber, Type, SubType, Length, Precision, Scale, Data };
-    struct handle *handle = DescriptorHandle;
-    INT64 stringlen, indicator;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(DescriptorHandle %p, RecNumber %d, Type %d, SubType %d, Length %s, Precision %d, Scale %d, Data %p,"
+    FIXME("(DescriptorHandle %p, RecNumber %d, Type %d, SubType %d, Length %s, Precision %d, Scale %d, Data %p,"
           " StringLength %p, Indicator %p)\n", DescriptorHandle, RecNumber, Type, SubType, debugstr_sqllen(Length),
           Precision, Scale, Data, StringLength, Indicator);
 
-    if (!handle) return SQL_INVALID_HANDLE;
-
-    params.DescriptorHandle = handle->unix_handle;
-    params.StringLength     = &stringlen;
-    params.Indicator        = &indicator;
-    if (SUCCESS((ret = ODBC_CALL( SQLSetDescRec, &params ))))
-    {
-        *StringLength = stringlen;
-        *Indicator = indicator;
-    }
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -1266,16 +766,11 @@ SQLRETURN WINAPI SQLSetDescRec(SQLHDESC DescriptorHandle, SQLSMALLINT RecNumber,
 SQLRETURN WINAPI SQLSetEnvAttr(SQLHENV EnvironmentHandle, SQLINTEGER Attribute, SQLPOINTER Value,
                                SQLINTEGER StringLength)
 {
-    struct SQLSetEnvAttr_params params = { 0, Attribute, Value, StringLength };
-    struct handle *handle = EnvironmentHandle;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(EnvironmentHandle %p, Attribute %d, Value %p, StringLength %d)\n", EnvironmentHandle, Attribute, Value,
+    FIXME("(EnvironmentHandle %p, Attribute %d, Value %p, StringLength %d)\n", EnvironmentHandle, Attribute, Value,
           StringLength);
 
-    params.EnvironmentHandle = handle ? handle->unix_handle : 0;
-    ret = ODBC_CALL( SQLSetEnvAttr, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -1286,22 +781,12 @@ SQLRETURN WINAPI SQLSetParam(SQLHSTMT StatementHandle, SQLUSMALLINT ParameterNum
                              SQLSMALLINT ParameterType, SQLULEN LengthPrecision, SQLSMALLINT ParameterScale,
                              SQLPOINTER ParameterValue, SQLLEN *StrLen_or_Ind)
 {
-    struct SQLSetParam_params params = { 0, ParameterNumber, ValueType, ParameterType, LengthPrecision, ParameterScale,
-                                         ParameterValue };
-    struct handle *handle = StatementHandle;
-    INT64 len;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p, ParameterNumber %d, ValueType %d, ParameterType %d, LengthPrecision %s,"
+    FIXME("(StatementHandle %p, ParameterNumber %d, ValueType %d, ParameterType %d, LengthPrecision %s,"
           " ParameterScale %d, ParameterValue %p, StrLen_or_Ind %p)\n", StatementHandle, ParameterNumber, ValueType,
           ParameterType, debugstr_sqlulen(LengthPrecision), ParameterScale, ParameterValue, StrLen_or_Ind);
 
-    if (!handle) return SQL_INVALID_HANDLE;
-
-    params.StatementHandle = handle->unix_handle;
-    params.StrLen_or_Ind   = &len;
-    if (SUCCESS((ret = ODBC_CALL( SQLSetParam, &params )))) *StrLen_or_Ind = len;
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -1311,18 +796,11 @@ SQLRETURN WINAPI SQLSetParam(SQLHSTMT StatementHandle, SQLUSMALLINT ParameterNum
 SQLRETURN WINAPI SQLSetStmtAttr(SQLHSTMT StatementHandle, SQLINTEGER Attribute, SQLPOINTER Value,
                                 SQLINTEGER StringLength)
 {
-    struct SQLSetStmtAttr_params params = { 0, Attribute, Value, StringLength };
-    struct handle *handle = StatementHandle;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p, Attribute %d, Value %p, StringLength %d)\n", StatementHandle, Attribute, Value,
+    FIXME("(StatementHandle %p, Attribute %d, Value %p, StringLength %d)\n", StatementHandle, Attribute, Value,
           StringLength);
 
-    if (!handle) return SQL_INVALID_HANDLE;
-
-    params.StatementHandle = handle->unix_handle;
-    ret = ODBC_CALL( SQLSetStmtAttr, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -1331,17 +809,10 @@ SQLRETURN WINAPI SQLSetStmtAttr(SQLHSTMT StatementHandle, SQLINTEGER Attribute,
  */
 SQLRETURN WINAPI SQLSetStmtOption(SQLHSTMT StatementHandle, SQLUSMALLINT Option, SQLULEN Value)
 {
-    struct SQLSetStmtOption_params params = { 0, Option, Value };
-    struct handle *handle = StatementHandle;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p, Option %d, Value %s)\n", StatementHandle, Option, debugstr_sqlulen(Value));
+    FIXME("(StatementHandle %p, Option %d, Value %s)\n", StatementHandle, Option, debugstr_sqlulen(Value));
 
-    if (!handle) return SQL_INVALID_HANDLE;
-
-    params.StatementHandle = handle->unix_handle;
-    ret = ODBC_CALL( SQLSetStmtOption, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -1353,22 +824,14 @@ SQLRETURN WINAPI SQLSpecialColumns(SQLHSTMT StatementHandle, SQLUSMALLINT Identi
                                    SQLCHAR *TableName, SQLSMALLINT NameLength3, SQLUSMALLINT Scope,
                                    SQLUSMALLINT Nullable)
 {
-    struct SQLSpecialColumns_params params = { 0, IdentifierType, CatalogName, NameLength1, SchemaName, NameLength2,
-                                               TableName, NameLength3, Scope, Nullable };
-    struct handle *handle = StatementHandle;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p, IdentifierType %d, CatalogName %s, NameLength1 %d, SchemaName %s, NameLength2 %d,"
+    FIXME("(StatementHandle %p, IdentifierType %d, CatalogName %s, NameLength1 %d, SchemaName %s, NameLength2 %d,"
           " TableName %s, NameLength3 %d, Scope %d, Nullable %d)\n", StatementHandle, IdentifierType,
           debugstr_an((const char *)CatalogName, NameLength1), NameLength1,
           debugstr_an((const char *)SchemaName, NameLength2), NameLength2,
           debugstr_an((const char *)TableName, NameLength3), NameLength3, Scope, Nullable);
 
-    if (!handle) return SQL_INVALID_HANDLE;
-
-    params.StatementHandle = handle->unix_handle;
-    ret = ODBC_CALL( SQLSpecialColumns, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -1379,22 +842,14 @@ SQLRETURN WINAPI SQLStatistics(SQLHSTMT StatementHandle, SQLCHAR *CatalogName, S
                                SQLCHAR *SchemaName, SQLSMALLINT NameLength2, SQLCHAR *TableName,
                                SQLSMALLINT NameLength3, SQLUSMALLINT Unique, SQLUSMALLINT Reserved)
 {
-    struct SQLStatistics_params params = { 0, CatalogName, NameLength1, SchemaName, NameLength2, TableName,
-                                           NameLength3, Unique, Reserved };
-    struct handle *handle = StatementHandle;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p, CatalogName %s, NameLength1 %d SchemaName %s, NameLength2 %d, TableName %s"
+    FIXME("(StatementHandle %p, CatalogName %s, NameLength1 %d SchemaName %s, NameLength2 %d, TableName %s"
           " NameLength3 %d, Unique %d, Reserved %d)\n", StatementHandle,
           debugstr_an((const char *)CatalogName, NameLength1), NameLength1,
           debugstr_an((const char *)SchemaName, NameLength2), NameLength2,
           debugstr_an((const char *)TableName, NameLength3), NameLength3, Unique, Reserved);
 
-    if (!handle) return SQL_INVALID_HANDLE;
-
-    params.StatementHandle = handle->unix_handle;
-    ret = ODBC_CALL( SQLStatistics, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -1405,23 +860,15 @@ SQLRETURN WINAPI SQLTables(SQLHSTMT StatementHandle, SQLCHAR *CatalogName, SQLSM
                            SQLCHAR *SchemaName, SQLSMALLINT NameLength2, SQLCHAR *TableName,
                            SQLSMALLINT NameLength3, SQLCHAR *TableType, SQLSMALLINT NameLength4)
 {
-    struct SQLTables_params params = { 0, CatalogName, NameLength1, SchemaName, NameLength2, TableName,
-                                       NameLength3, TableType, NameLength4 };
-    struct handle *handle = StatementHandle;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p, CatalogName %s, NameLength1 %d, SchemaName %s, NameLength2 %d, TableName %s,"
+    FIXME("(StatementHandle %p, CatalogName %s, NameLength1 %d, SchemaName %s, NameLength2 %d, TableName %s,"
           " NameLength3 %d, TableType %s, NameLength4 %d)\n", StatementHandle,
           debugstr_an((const char *)CatalogName, NameLength1), NameLength1,
           debugstr_an((const char *)SchemaName, NameLength2), NameLength2,
           debugstr_an((const char *)TableName, NameLength3), NameLength3,
           debugstr_an((const char *)TableType, NameLength4), NameLength4);
 
-    if (!handle) return SQL_INVALID_HANDLE;
-
-    params.StatementHandle = handle->unix_handle;
-    ret = ODBC_CALL( SQLTables, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -1430,42 +877,27 @@ SQLRETURN WINAPI SQLTables(SQLHSTMT StatementHandle, SQLCHAR *CatalogName, SQLSM
  */
 SQLRETURN WINAPI SQLTransact(SQLHENV EnvironmentHandle, SQLHDBC ConnectionHandle, SQLUSMALLINT CompletionType)
 {
-    struct SQLTransact_params params = { 0, 0, CompletionType };
-    struct handle *env = EnvironmentHandle, *con = ConnectionHandle;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(EnvironmentHandle %p, ConnectionHandle %p, CompletionType %d)\n", EnvironmentHandle, ConnectionHandle,
+    FIXME("(EnvironmentHandle %p, ConnectionHandle %p, CompletionType %d)\n", EnvironmentHandle, ConnectionHandle,
           CompletionType);
 
-    if (!env || !con) return SQL_INVALID_HANDLE;
-
-    params.EnvironmentHandle = env->unix_handle;
-    params.ConnectionHandle  = con->unix_handle;
-    ret = ODBC_CALL( SQLTransact, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
 /*************************************************************************
  *				SQLBrowseConnect           [ODBC32.055]
  */
-SQLRETURN WINAPI SQLBrowseConnect(SQLHDBC ConnectionHandle, SQLCHAR *InConnectionString, SQLSMALLINT StringLength1,
-                                  SQLCHAR *OutConnectionString, SQLSMALLINT BufferLength, SQLSMALLINT *StringLength2)
+SQLRETURN WINAPI SQLBrowseConnect(SQLHDBC hdbc, SQLCHAR *szConnStrIn, SQLSMALLINT cbConnStrIn,
+                                  SQLCHAR *szConnStrOut, SQLSMALLINT cbConnStrOutMax,
+                                  SQLSMALLINT *pcbConnStrOut)
 {
-    struct SQLBrowseConnect_params params = { 0, InConnectionString, StringLength1, OutConnectionString, BufferLength,
-                                              StringLength2 };
-    struct handle *handle = ConnectionHandle;
-    SQLRETURN ret;
-
-    TRACE("(ConnectionHandle %p, InConnectionString %s, StringLength1 %d, OutConnectionString %p, BufferLength, %d, "
-          "StringLength2 %p)\n", ConnectionHandle, debugstr_an((const char *)InConnectionString, StringLength1),
-          StringLength1, OutConnectionString, BufferLength, StringLength2);
+    SQLRETURN ret = SQL_ERROR;
 
-    if (!handle) return SQL_INVALID_HANDLE;
+    FIXME("(hdbc %p, szConnStrIn %s, cbConnStrIn %d, szConnStrOut %p, cbConnStrOutMax %d, pcbConnStrOut %p)\n",
+          hdbc, debugstr_an((const char *)szConnStrIn, cbConnStrIn), cbConnStrIn, szConnStrOut, cbConnStrOutMax,
+          pcbConnStrOut);
 
-    params.ConnectionHandle = handle->unix_handle;
-    ret = ODBC_CALL( SQLBrowseConnect, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -1474,149 +906,96 @@ SQLRETURN WINAPI SQLBrowseConnect(SQLHDBC ConnectionHandle, SQLCHAR *InConnectio
  */
 SQLRETURN WINAPI SQLBulkOperations(SQLHSTMT StatementHandle, SQLSMALLINT Operation)
 {
-    struct SQLBulkOperations_params params = { 0, Operation };
-    struct handle *handle = StatementHandle;
-    SQLRETURN ret;
-
-    TRACE("(StatementHandle %p, Operation %d)\n", StatementHandle, Operation);
+    SQLRETURN ret = SQL_ERROR;
 
-    if (!handle) return SQL_INVALID_HANDLE;
+    FIXME("(StatementHandle %p, Operation %d)\n", StatementHandle, Operation);
 
-    params.StatementHandle = handle->unix_handle;
-    if (SUCCESS(( ret = ODBC_CALL( SQLBulkOperations, &params )))) update_result_lengths( handle );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
 /*************************************************************************
  *				SQLColAttributes           [ODBC32.006]
  */
-SQLRETURN WINAPI SQLColAttributes(SQLHSTMT StatementHandle, SQLUSMALLINT ColumnNumber, SQLUSMALLINT FieldIdentifier,
-                                  SQLPOINTER CharacterAttributes, SQLSMALLINT BufferLength, SQLSMALLINT *StringLength,
-                                  SQLLEN *NumericAttributes)
+SQLRETURN WINAPI SQLColAttributes(SQLHSTMT hstmt, SQLUSMALLINT icol, SQLUSMALLINT fDescType,
+                                  SQLPOINTER rgbDesc, SQLSMALLINT cbDescMax, SQLSMALLINT *pcbDesc,
+                                  SQLLEN *pfDesc)
 {
-    struct SQLColAttributes_params params = { 0, ColumnNumber, FieldIdentifier, CharacterAttributes, BufferLength,
-                                              StringLength };
-    struct handle *handle = StatementHandle;
-    INT64 attrs;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p, ColumnNumber %d, FieldIdentifier %d, CharacterAttributes %p, BufferLength %d, "
-          "StringLength %p, NumericAttributes %p)\n", StatementHandle, ColumnNumber, FieldIdentifier,
-          CharacterAttributes, BufferLength, StringLength, NumericAttributes);
+    FIXME("(hstmt %p, icol %d, fDescType %d, rgbDesc %p, cbDescMax %d, pcbDesc %p, pfDesc %p)\n", hstmt, icol,
+          fDescType, rgbDesc, cbDescMax, pcbDesc, pfDesc);
 
-    if (!handle) return SQL_INVALID_HANDLE;
-
-    params.StatementHandle   = handle->unix_handle;
-    params.NumericAttributes = &attrs;
-    if (SUCCESS((ret = ODBC_CALL( SQLColAttributes, &params )))) *NumericAttributes = attrs;
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
 /*************************************************************************
  *				SQLColumnPrivileges           [ODBC32.056]
  */
-SQLRETURN WINAPI SQLColumnPrivileges(SQLHSTMT StatementHandle, SQLCHAR *CatalogName, SQLSMALLINT NameLength1,
-                                     SQLCHAR *SchemaName, SQLSMALLINT NameLength2, SQLCHAR *TableName,
-                                     SQLSMALLINT NameLength3, SQLCHAR *ColumnName, SQLSMALLINT NameLength4)
+SQLRETURN WINAPI SQLColumnPrivileges(SQLHSTMT hstmt, SQLCHAR *szCatalogName, SQLSMALLINT cbCatalogName,
+                                     SQLCHAR *szSchemaName, SQLSMALLINT cbSchemaName, SQLCHAR *szTableName,
+                                     SQLSMALLINT cbTableName, SQLCHAR *szColumnName, SQLSMALLINT cbColumnName)
 {
-    struct SQLColumnPrivileges_params params = { 0, CatalogName, NameLength1, SchemaName, NameLength2,
-                                                 TableName, NameLength3, ColumnName, NameLength4 };
-    struct handle *handle = StatementHandle;
-    SQLRETURN ret;
-
-    TRACE("(StatementHandle %p, CatalogName %s, NameLength1 %d, SchemaName %s, NameLength2 %d, TableName %s,"
-          " NameLength3 %d, ColumnName %s, NameLength4 %d)\n", StatementHandle,
-          debugstr_an((const char *)CatalogName, NameLength1), NameLength1,
-          debugstr_an((const char *)SchemaName, NameLength2), NameLength2,
-          debugstr_an((const char *)TableName, NameLength3), NameLength3,
-          debugstr_an((const char *)ColumnName, NameLength4), NameLength4);
+    SQLRETURN ret = SQL_ERROR;
 
-    if (!handle) return SQL_INVALID_HANDLE;
+    FIXME("(hstmt %p, szCatalogName %s, cbCatalogName %d, szSchemaName %s, cbSchemaName %d, szTableName %s,"
+          " cbTableName %d, szColumnName %s, cbColumnName %d)\n", hstmt,
+          debugstr_an((const char *)szCatalogName, cbCatalogName), cbCatalogName,
+          debugstr_an((const char *)szSchemaName, cbSchemaName), cbSchemaName,
+          debugstr_an((const char *)szTableName, cbTableName), cbTableName,
+          debugstr_an((const char *)szColumnName, cbColumnName), cbColumnName);
 
-    params.StatementHandle = handle->unix_handle;
-    ret = ODBC_CALL( SQLColumnPrivileges, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
 /*************************************************************************
  *				SQLDescribeParam          [ODBC32.058]
  */
-SQLRETURN WINAPI SQLDescribeParam(SQLHSTMT StatementHandle, SQLUSMALLINT ParameterNumber, SQLSMALLINT *DataType,
-                                  SQLULEN *ParameterSize, SQLSMALLINT *DecimalDigits, SQLSMALLINT *Nullable)
+SQLRETURN WINAPI SQLDescribeParam(SQLHSTMT hstmt, SQLUSMALLINT ipar, SQLSMALLINT *pfSqlType,
+                                  SQLULEN *pcbParamDef, SQLSMALLINT *pibScale, SQLSMALLINT *pfNullable)
 {
-    struct SQLDescribeParam_params params = { 0, ParameterNumber, DataType, NULL, DecimalDigits, Nullable };
-    struct handle *handle = StatementHandle;
-    UINT64 size;
-    SQLRETURN ret;
-
-    TRACE("(StatementHandle %p, ParameterNumber %d, DataType %p, ParameterSize %p, DecimalDigits %p, Nullable %p)\n",
-          StatementHandle, ParameterNumber, DataType, ParameterSize, DecimalDigits, Nullable);
+    SQLRETURN ret = SQL_ERROR;
 
-    if (!handle) return SQL_INVALID_HANDLE;
+    FIXME("(hstmt %p, ipar %d, pfSqlType %p, pcbParamDef %p, pibScale %p, pfNullable %p)\n", hstmt, ipar,
+          pfSqlType, pcbParamDef, pibScale, pfNullable);
 
-    params.StatementHandle = handle->unix_handle;
-    params.ParameterSize   = &size;
-    if (SUCCESS((ret = ODBC_CALL( SQLDescribeParam, &params )))) *ParameterSize = size;
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
 /*************************************************************************
  *				SQLExtendedFetch           [ODBC32.059]
  */
-SQLRETURN WINAPI SQLExtendedFetch(SQLHSTMT StatementHandle, SQLUSMALLINT FetchOrientation, SQLLEN FetchOffset,
-                                  SQLULEN *RowCount, SQLUSMALLINT *RowStatusArray)
+SQLRETURN WINAPI SQLExtendedFetch(SQLHSTMT hstmt, SQLUSMALLINT fFetchType, SQLLEN irow, SQLULEN *pcrow,
+                                  SQLUSMALLINT *rgfRowStatus)
 {
-    struct SQLExtendedFetch_params params = { 0, FetchOrientation, FetchOffset, NULL, RowStatusArray };
-    struct handle *handle = StatementHandle;
-    UINT64 count;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p, FetchOrientation %d, FetchOffset %s, RowCount %p, RowStatusArray %p)\n",
-          StatementHandle, FetchOrientation, debugstr_sqllen(FetchOffset), RowCount, RowStatusArray);
+    FIXME("(hstmt %p, fFetchType %d, irow %s, pcrow %p, rgfRowStatus %p)\n", hstmt, fFetchType, debugstr_sqllen(irow),
+          pcrow, rgfRowStatus);
 
-    if (!handle) return SQL_INVALID_HANDLE;
-
-    params.StatementHandle = handle->unix_handle;
-    params.RowCount        = &count;
-    if (SUCCESS((ret = ODBC_CALL( SQLExtendedFetch, &params )))) *RowCount = count;
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
 /*************************************************************************
  *				SQLForeignKeys           [ODBC32.060]
  */
-SQLRETURN WINAPI SQLForeignKeys(SQLHSTMT StatementHandle, SQLCHAR *PkCatalogName, SQLSMALLINT NameLength1,
-                                SQLCHAR *PkSchemaName, SQLSMALLINT NameLength2, SQLCHAR *PkTableName,
-                                SQLSMALLINT NameLength3, SQLCHAR *FkCatalogName, SQLSMALLINT NameLength4,
-                                SQLCHAR *FkSchemaName, SQLSMALLINT NameLength5, SQLCHAR *FkTableName,
-                                SQLSMALLINT NameLength6)
+SQLRETURN WINAPI SQLForeignKeys(SQLHSTMT hstmt, SQLCHAR *szPkCatalogName, SQLSMALLINT cbPkCatalogName,
+                                SQLCHAR *szPkSchemaName, SQLSMALLINT cbPkSchemaName, SQLCHAR *szPkTableName,
+                                SQLSMALLINT cbPkTableName, SQLCHAR *szFkCatalogName,
+                                SQLSMALLINT cbFkCatalogName, SQLCHAR *szFkSchemaName,
+                                SQLSMALLINT cbFkSchemaName, SQLCHAR *szFkTableName, SQLSMALLINT cbFkTableName)
 {
-    struct SQLForeignKeys_params params = { 0, PkCatalogName, NameLength1, PkSchemaName, NameLength2,
-                                            PkTableName, NameLength3, FkCatalogName, NameLength4,
-                                            FkSchemaName, NameLength5, FkTableName, NameLength6 };
-    struct handle *handle = StatementHandle;
-    SQLRETURN ret;
-
-    TRACE("(StatementHandle %p, PkCatalogName %s, NameLength1 %d, PkSchemaName %s, NameLength2 %d,"
-          " PkTableName %s, NameLength3 %d, FkCatalogName %s, NameLength4 %d, FkSchemaName %s,"
-          " NameLength5 %d, FkTableName %s, NameLength6 %d)\n", StatementHandle,
-          debugstr_an((const char *)PkCatalogName, NameLength1), NameLength1,
-          debugstr_an((const char *)PkSchemaName, NameLength2), NameLength2,
-          debugstr_an((const char *)PkTableName, NameLength3), NameLength3,
-          debugstr_an((const char *)FkCatalogName, NameLength4), NameLength4,
-          debugstr_an((const char *)FkSchemaName, NameLength5), NameLength5,
-          debugstr_an((const char *)FkTableName, NameLength6), NameLength6);
+    SQLRETURN ret = SQL_ERROR;
 
-    if (!handle) return SQL_INVALID_HANDLE;
+    FIXME("(hstmt %p, szPkCatalogName %s, cbPkCatalogName %d, szPkSchemaName %s, cbPkSchemaName %d,"
+          " szPkTableName %s, cbPkTableName %d, szFkCatalogName %s, cbFkCatalogName %d, szFkSchemaName %s,"
+          " cbFkSchemaName %d, szFkTableName %s, cbFkTableName %d)\n", hstmt,
+          debugstr_an((const char *)szPkCatalogName, cbPkCatalogName), cbPkCatalogName,
+          debugstr_an((const char *)szPkSchemaName, cbPkSchemaName), cbPkSchemaName,
+          debugstr_an((const char *)szPkTableName, cbPkTableName), cbPkTableName,
+          debugstr_an((const char *)szFkCatalogName, cbFkCatalogName), cbFkCatalogName,
+          debugstr_an((const char *)szFkSchemaName, cbFkSchemaName), cbFkSchemaName,
+          debugstr_an((const char *)szFkTableName, cbFkTableName), cbFkTableName);
 
-    params.StatementHandle = handle->unix_handle;
-    ret = ODBC_CALL( SQLForeignKeys, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -1625,381 +1004,213 @@ SQLRETURN WINAPI SQLForeignKeys(SQLHSTMT StatementHandle, SQLCHAR *PkCatalogName
  */
 SQLRETURN WINAPI SQLMoreResults(SQLHSTMT StatementHandle)
 {
-    struct SQLMoreResults_params params;
-    struct handle *handle = StatementHandle;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(%p)\n", StatementHandle);
+    FIXME("(%p)\n", StatementHandle);
 
-    if (!handle) return SQL_INVALID_HANDLE;
-
-    params.StatementHandle = handle->unix_handle;
-    ret = ODBC_CALL( SQLMoreResults, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
 /*************************************************************************
  *				SQLNativeSql           [ODBC32.062]
  */
-SQLRETURN WINAPI SQLNativeSql(SQLHDBC ConnectionHandle, SQLCHAR *InStatementText, SQLINTEGER TextLength1,
-                              SQLCHAR *OutStatementText, SQLINTEGER BufferLength, SQLINTEGER *TextLength2)
+SQLRETURN WINAPI SQLNativeSql(SQLHDBC hdbc, SQLCHAR *szSqlStrIn, SQLINTEGER cbSqlStrIn, SQLCHAR *szSqlStr,
+                              SQLINTEGER cbSqlStrMax, SQLINTEGER *pcbSqlStr)
 {
-    struct SQLNativeSql_params params = { 0, InStatementText, TextLength1, OutStatementText, BufferLength,
-                                          TextLength2 };
-    struct handle *handle = ConnectionHandle;
-    SQLRETURN ret;
-
-    TRACE("(ConnectionHandle %p, InStatementText %s, TextLength1 %d, OutStatementText %p, BufferLength, %d, "
-          "TextLength2 %p)\n", ConnectionHandle, debugstr_an((const char *)InStatementText, TextLength1),
-          TextLength1, OutStatementText, BufferLength, TextLength2);
+    SQLRETURN ret = SQL_ERROR;
 
-    if (!handle) return SQL_INVALID_HANDLE;
+    FIXME("(hdbc %p, szSqlStrIn %s, cbSqlStrIn %d, szSqlStr %p, cbSqlStrMax %d, pcbSqlStr %p)\n", hdbc,
+          debugstr_an((const char *)szSqlStrIn, cbSqlStrIn), cbSqlStrIn, szSqlStr, cbSqlStrMax, pcbSqlStr);
 
-    params.ConnectionHandle = handle->unix_handle;
-    ret = ODBC_CALL( SQLNativeSql, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
 /*************************************************************************
  *				SQLNumParams           [ODBC32.063]
  */
-SQLRETURN WINAPI SQLNumParams(SQLHSTMT StatementHandle, SQLSMALLINT *ParameterCount)
+SQLRETURN WINAPI SQLNumParams(SQLHSTMT hstmt, SQLSMALLINT *pcpar)
 {
-    struct SQLNumParams_params params = { 0, ParameterCount };
-    struct handle *handle = StatementHandle;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p, pcpar %p)\n", StatementHandle, ParameterCount);
+    FIXME("(hstmt %p, pcpar %p)\n", hstmt, pcpar);
 
-    if (!handle) return SQL_INVALID_HANDLE;
-
-    params.StatementHandle = handle->unix_handle;
-    ret = ODBC_CALL( SQLNumParams, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
 /*************************************************************************
  *				SQLParamOptions           [ODBC32.064]
  */
-SQLRETURN WINAPI SQLParamOptions(SQLHSTMT StatementHandle, SQLULEN RowCount, SQLULEN *RowNumber)
+SQLRETURN WINAPI SQLParamOptions(SQLHSTMT hstmt, SQLULEN crow, SQLULEN *pirow)
 {
-    struct SQLParamOptions_params params = { 0, RowCount };
-    struct handle *handle = StatementHandle;
-    UINT64 row;
-    SQLRETURN ret;
-
-    TRACE("(StatementHandle %p, RowCount %s, RowNumber %p)\n", StatementHandle, debugstr_sqlulen(RowCount),
-          RowNumber);
+    SQLRETURN ret = SQL_ERROR;
 
-    if (!handle) return SQL_INVALID_HANDLE;
+    FIXME("(hstmt %p, crow %s, pirow %p)\n", hstmt, debugstr_sqlulen(crow), pirow);
 
-    params.StatementHandle = handle->unix_handle;
-    params.RowNumber       = &row;
-    if (SUCCESS((ret = ODBC_CALL( SQLParamOptions, &params )))) *RowNumber = row;
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
 /*************************************************************************
  *				SQLPrimaryKeys           [ODBC32.065]
  */
-SQLRETURN WINAPI SQLPrimaryKeys(SQLHSTMT StatementHandle, SQLCHAR *CatalogName, SQLSMALLINT NameLength1,
-                                SQLCHAR *SchemaName, SQLSMALLINT NameLength2, SQLCHAR *TableName,
-                                SQLSMALLINT NameLength3)
+SQLRETURN WINAPI SQLPrimaryKeys(SQLHSTMT hstmt, SQLCHAR *szCatalogName, SQLSMALLINT cbCatalogName,
+                                SQLCHAR *szSchemaName, SQLSMALLINT cbSchemaName, SQLCHAR *szTableName,
+                                SQLSMALLINT cbTableName)
 {
-    struct SQLPrimaryKeys_params params = { 0, CatalogName, NameLength1, SchemaName, NameLength2, TableName,
-                                            NameLength3 };
-    struct handle *handle = StatementHandle;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p, CatalogName %s, NameLength1 %d, SchemaName %s, NameLength2 %d, TableName %s,"
-          " NameLength3 %d)\n", StatementHandle,
-          debugstr_an((const char *)CatalogName, NameLength1), NameLength1,
-          debugstr_an((const char *)SchemaName, NameLength2), NameLength2,
-          debugstr_an((const char *)TableName, NameLength3), NameLength3);
-
-    if (!handle) return SQL_INVALID_HANDLE;
+    FIXME("(hstmt %p, szCatalogName %s, cbCatalogName %d, szSchemaName %s, cbSchemaName %d, szTableName %s,"
+          " cbTableName %d)\n", hstmt,
+          debugstr_an((const char *)szCatalogName, cbCatalogName), cbCatalogName,
+          debugstr_an((const char *)szSchemaName, cbSchemaName), cbSchemaName,
+          debugstr_an((const char *)szTableName, cbTableName), cbTableName);
 
-    params.StatementHandle = handle->unix_handle;
-    ret = ODBC_CALL( SQLPrimaryKeys, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
 /*************************************************************************
  *				SQLProcedureColumns           [ODBC32.066]
  */
-SQLRETURN WINAPI SQLProcedureColumns(SQLHSTMT StatementHandle, SQLCHAR *CatalogName, SQLSMALLINT NameLength1,
-                                     SQLCHAR *SchemaName, SQLSMALLINT NameLength2, SQLCHAR *ProcName,
-                                     SQLSMALLINT NameLength3, SQLCHAR *ColumnName, SQLSMALLINT NameLength4)
+SQLRETURN WINAPI SQLProcedureColumns(SQLHSTMT hstmt, SQLCHAR *szCatalogName, SQLSMALLINT cbCatalogName,
+                                     SQLCHAR *szSchemaName, SQLSMALLINT cbSchemaName, SQLCHAR *szProcName,
+                                     SQLSMALLINT cbProcName, SQLCHAR *szColumnName, SQLSMALLINT cbColumnName)
 {
-    struct SQLProcedureColumns_params params = { 0, CatalogName, NameLength1, SchemaName, NameLength2,
-                                                 ProcName, NameLength3, ColumnName, NameLength4 };
-    struct handle *handle = StatementHandle;
-    SQLRETURN ret;
-
-    TRACE("(StatementHandle %p, CatalogName %s, NameLength1 %d, SchemaName %s, NameLength2 %d, ProcName %s,"
-          " NameLength3 %d, ColumnName %s, NameLength4 %d)\n", StatementHandle,
-          debugstr_an((const char *)CatalogName, NameLength1), NameLength1,
-          debugstr_an((const char *)SchemaName, NameLength2), NameLength2,
-          debugstr_an((const char *)ProcName, NameLength3), NameLength3,
-          debugstr_an((const char *)ColumnName, NameLength4), NameLength4);
+    SQLRETURN ret = SQL_ERROR;
 
-    if (!handle) return SQL_INVALID_HANDLE;
+    FIXME("(hstmt %p, szCatalogName %s, cbCatalogName %d, szSchemaName %s, cbSchemaName %d, szProcName %s,"
+          " cbProcName %d, szColumnName %s, cbColumnName %d)\n", hstmt,
+          debugstr_an((const char *)szCatalogName, cbCatalogName), cbCatalogName,
+          debugstr_an((const char *)szSchemaName, cbSchemaName), cbSchemaName,
+          debugstr_an((const char *)szProcName, cbProcName), cbProcName,
+          debugstr_an((const char *)szColumnName, cbColumnName), cbColumnName);
 
-    params.StatementHandle = handle->unix_handle;
-    ret = ODBC_CALL( SQLProcedureColumns, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
 /*************************************************************************
  *				SQLProcedures           [ODBC32.067]
  */
-SQLRETURN WINAPI SQLProcedures(SQLHSTMT StatementHandle, SQLCHAR *CatalogName, SQLSMALLINT NameLength1,
-                               SQLCHAR *SchemaName, SQLSMALLINT NameLength2, SQLCHAR *ProcName,
-                               SQLSMALLINT NameLength3)
+SQLRETURN WINAPI SQLProcedures(SQLHSTMT hstmt, SQLCHAR *szCatalogName, SQLSMALLINT cbCatalogName,
+                               SQLCHAR *szSchemaName, SQLSMALLINT cbSchemaName, SQLCHAR *szProcName,
+                               SQLSMALLINT cbProcName)
 {
-    struct SQLProcedures_params params = { 0, CatalogName, NameLength1, SchemaName, NameLength2, ProcName,
-                                           NameLength3 };
-    struct handle *handle = StatementHandle;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p, CatalogName %s, NameLength1 %d, SchemaName %s, NameLength2 %d, ProcName %s,"
-          " NameLength3 %d)\n", StatementHandle,
-          debugstr_an((const char *)CatalogName, NameLength1), NameLength1,
-          debugstr_an((const char *)SchemaName, NameLength2), NameLength2,
-          debugstr_an((const char *)ProcName, NameLength3), NameLength3);
+    FIXME("(hstmt %p, szCatalogName %s, cbCatalogName %d, szSchemaName %s, cbSchemaName %d, szProcName %s,"
+          " cbProcName %d)\n", hstmt,
+          debugstr_an((const char *)szCatalogName, cbCatalogName), cbCatalogName,
+          debugstr_an((const char *)szSchemaName, cbSchemaName), cbSchemaName,
+          debugstr_an((const char *)szProcName, cbProcName), cbProcName);
 
-    if (!handle) return SQL_INVALID_HANDLE;
-
-    params.StatementHandle = handle->unix_handle;
-    ret = ODBC_CALL( SQLProcedures, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
 /*************************************************************************
  *				SQLSetPos           [ODBC32.068]
  */
-SQLRETURN WINAPI SQLSetPos(SQLHSTMT StatementHandle, SQLSETPOSIROW RowNumber, SQLUSMALLINT Operation,
-                           SQLUSMALLINT LockType)
+SQLRETURN WINAPI SQLSetPos(SQLHSTMT hstmt, SQLSETPOSIROW irow, SQLUSMALLINT fOption, SQLUSMALLINT fLock)
 {
-    struct SQLSetPos_params params = { 0, RowNumber, Operation, LockType };
-    struct handle *handle = StatementHandle;
-    SQLRETURN ret;
-
-    TRACE("(StatementHandle %p, RowNumber %s, Operation %d, LockType %d)\n", StatementHandle,
-          debugstr_sqlulen(RowNumber), Operation, LockType);
+    SQLRETURN ret = SQL_ERROR;
 
-    if (!handle) return SQL_INVALID_HANDLE;
+    FIXME("(hstmt %p, irow %s, fOption %d, fLock %d)\n", hstmt, debugstr_sqlulen(irow), fOption, fLock);
 
-    params.StatementHandle = handle->unix_handle;
-    if (SUCCESS(( ret = ODBC_CALL( SQLSetPos, &params ))) && Operation == SQL_REFRESH)
-        update_result_lengths( handle );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
 /*************************************************************************
  *				SQLTablePrivileges           [ODBC32.070]
  */
-SQLRETURN WINAPI SQLTablePrivileges(SQLHSTMT StatementHandle, SQLCHAR *CatalogName, SQLSMALLINT NameLength1,
-                                    SQLCHAR *SchemaName, SQLSMALLINT NameLength2, SQLCHAR *TableName,
-                                    SQLSMALLINT NameLength3)
+SQLRETURN WINAPI SQLTablePrivileges(SQLHSTMT hstmt, SQLCHAR *szCatalogName, SQLSMALLINT cbCatalogName,
+                                    SQLCHAR *szSchemaName, SQLSMALLINT cbSchemaName, SQLCHAR *szTableName,
+                                    SQLSMALLINT cbTableName)
 {
-    struct SQLTablePrivileges_params params = { 0, CatalogName, NameLength1, SchemaName, NameLength2,
-                                                TableName, NameLength3 };
-    struct handle *handle = StatementHandle;
-    SQLRETURN ret;
-
-    TRACE("(StatementHandle %p, CatalogName %s, NameLength1 %d, SchemaName %s, NameLength2 %d, TableName %s,"
-          "NameLength3  %d)\n", StatementHandle,
-          debugstr_an((const char *)CatalogName, NameLength1), NameLength1,
-          debugstr_an((const char *)SchemaName, NameLength2), NameLength2,
-          debugstr_an((const char *)TableName, NameLength3), NameLength3);
+    SQLRETURN ret = SQL_ERROR;
 
-    if (!handle) return SQL_INVALID_HANDLE;
+    FIXME("(hstmt %p, szCatalogName %s, cbCatalogName %d, szSchemaName %s, cbSchemaName %d, szTableName %s,"
+          " cbTableName %d)\n", hstmt,
+          debugstr_an((const char *)szCatalogName, cbCatalogName), cbCatalogName,
+          debugstr_an((const char *)szSchemaName, cbSchemaName), cbSchemaName,
+          debugstr_an((const char *)szTableName, cbTableName), cbTableName);
 
-    params.StatementHandle = handle->unix_handle;
-    ret = ODBC_CALL( SQLTablePrivileges, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
 /*************************************************************************
  *				SQLDrivers           [ODBC32.071]
  */
-SQLRETURN WINAPI SQLDrivers(SQLHENV EnvironmentHandle, SQLUSMALLINT Direction, SQLCHAR *DriverDescription,
-                            SQLSMALLINT BufferLength1, SQLSMALLINT *DescriptionLength,
-                            SQLCHAR *DriverAttributes, SQLSMALLINT BufferLength2,
-                            SQLSMALLINT *AttributesLength)
+SQLRETURN WINAPI SQLDrivers(SQLHENV EnvironmentHandle, SQLUSMALLINT fDirection, SQLCHAR *szDriverDesc,
+                            SQLSMALLINT cbDriverDescMax, SQLSMALLINT *pcbDriverDesc,
+                            SQLCHAR *szDriverAttributes, SQLSMALLINT cbDriverAttrMax,
+                            SQLSMALLINT *pcbDriverAttr)
 {
-    struct SQLDrivers_params params = { 0, Direction, DriverDescription, BufferLength1, DescriptionLength,
-                                        DriverAttributes, BufferLength2, AttributesLength };
-    struct handle *handle = EnvironmentHandle;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_NO_DATA;
 
-    TRACE("(EnvironmentHandle %p, Direction %d, DriverDescription %p, BufferLength1 %d, DescriptionLength %p,"
-          " DriverAttributes %p, BufferLength2 %d, AttributesLength %p)\n", EnvironmentHandle, Direction,
-          DriverDescription, BufferLength1, DescriptionLength, DriverAttributes, BufferLength2, AttributesLength);
+    FIXME("(EnvironmentHandle %p, Direction %d, szDriverDesc %p, cbDriverDescMax %d, pcbDriverDesc %p,"
+          " DriverAttributes %p, cbDriverAttrMax %d, pcbDriverAttr %p)\n", EnvironmentHandle, fDirection,
+          szDriverDesc, cbDriverDescMax, pcbDriverDesc, szDriverAttributes, cbDriverAttrMax, pcbDriverAttr);
 
-    if (!handle) return SQL_INVALID_HANDLE;
-
-    params.EnvironmentHandle = handle->unix_handle;
-    ret = ODBC_CALL( SQLDrivers, &params );
-
-    if (ret == SQL_NO_DATA && Direction == SQL_FETCH_FIRST)
-        ERR_(winediag)("No ODBC drivers could be found. Check the settings for your libodbc provider.\n");
-
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
 /*************************************************************************
  *				SQLBindParameter           [ODBC32.072]
  */
-SQLRETURN WINAPI SQLBindParameter(SQLHSTMT StatementHandle, SQLUSMALLINT ParameterNumber, SQLSMALLINT InputOutputType,
-                                  SQLSMALLINT ValueType, SQLSMALLINT ParameterType, SQLULEN ColumnSize,
-                                  SQLSMALLINT DecimalDigits, SQLPOINTER ParameterValue, SQLLEN BufferLength,
-                                  SQLLEN *StrLen_or_Ind)
+SQLRETURN WINAPI SQLBindParameter(SQLHSTMT hstmt, SQLUSMALLINT ipar, SQLSMALLINT fParamType,
+                                  SQLSMALLINT fCType, SQLSMALLINT fSqlType, SQLULEN cbColDef,
+                                  SQLSMALLINT ibScale, SQLPOINTER rgbValue, SQLLEN cbValueMax,
+                                  SQLLEN *pcbValue)
 {
-    struct SQLBindParameter_params params = { 0, ParameterNumber, InputOutputType, ValueType, ParameterType,
-                                              ColumnSize, DecimalDigits, ParameterValue, BufferLength };
-    struct handle *handle = StatementHandle;
-    UINT i = ParameterNumber - 1;
-    SQLRETURN ret;
-
-    TRACE("(StatementHandle %p, ParameterNumber %d, InputOutputType %d, ValueType %d, ParameterType %d, "
-          "ColumnSize %s, DecimalDigits %d, ParameterValue, %p, BufferLength %s, StrLen_or_Ind %p)\n",
-          StatementHandle, ParameterNumber, InputOutputType, ValueType, ParameterType, debugstr_sqlulen(ColumnSize),
-          DecimalDigits, ParameterValue, debugstr_sqllen(BufferLength), StrLen_or_Ind);
+    SQLRETURN ret = SQL_ERROR;
 
-    if (!handle) return SQL_INVALID_HANDLE;
-    if (!ParameterNumber)
-    {
-        FIXME( "parameter 0 not handled\n" );
-        return SQL_ERROR;
-    }
-    if (!resize_binding( &handle->bind_parameter, ParameterNumber )) return SQL_ERROR;
+    FIXME("(hstmt %p, ipar %d, fParamType %d, fCType %d, fSqlType %d, cbColDef %s, ibScale %d, rgbValue %p,"
+          " cbValueMax %s, pcbValue %p)\n", hstmt, ipar, fParamType, fCType, fSqlType, debugstr_sqlulen(cbColDef),
+          ibScale, rgbValue, debugstr_sqllen(cbValueMax), pcbValue);
 
-    params.StatementHandle = handle->unix_handle;
-    params.StrLen_or_Ind   = &handle->bind_parameter.param[i].len;
-    if (SUCCESS((ret = ODBC_CALL( SQLBindParameter, &params )))) handle->bind_parameter.param[i].ptr = StrLen_or_Ind;
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
 /*************************************************************************
  *				SQLDriverConnect           [ODBC32.041]
  */
-SQLRETURN WINAPI SQLDriverConnect(SQLHDBC ConnectionHandle, SQLHWND WindowHandle, SQLCHAR *ConnectionString,
-                                  SQLSMALLINT Length, SQLCHAR *OutConnectionString, SQLSMALLINT BufferLength,
-                                  SQLSMALLINT *Length2, SQLUSMALLINT DriverCompletion)
+SQLRETURN WINAPI SQLDriverConnect(SQLHDBC hdbc, SQLHWND hwnd, SQLCHAR *ConnectionString, SQLSMALLINT Length,
+                                  SQLCHAR *conn_str_out, SQLSMALLINT conn_str_out_max,
+                                  SQLSMALLINT *ptr_conn_str_out, SQLUSMALLINT driver_completion)
 {
-    struct SQLDriverConnect_params params = { 0, WindowHandle, ConnectionString, Length, OutConnectionString,
-                                              BufferLength, Length2, DriverCompletion };
-    struct handle *handle = ConnectionHandle;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(ConnectionHandle %p, hwnd %p, ConnectionString %s, Length %d, conn_str_out %p, conn_str_out_max %d,"
-          " ptr_conn_str_out %p, driver_completion %d)\n", ConnectionHandle, WindowHandle,
-          debugstr_an((const char *)ConnectionString, Length), Length, OutConnectionString, BufferLength,
-          Length2, DriverCompletion);
+    FIXME("(hdbc %p, hwnd %p, ConnectionString %s, Length %d, conn_str_out %p, conn_str_out_max %d,"
+          " ptr_conn_str_out %p, driver_completion %d)\n", hdbc, hwnd,
+          debugstr_an((const char *)ConnectionString, Length), Length, conn_str_out, conn_str_out_max,
+          ptr_conn_str_out, driver_completion);
 
-    if (!handle) return SQL_INVALID_HANDLE;
-
-    params.ConnectionHandle = handle->unix_handle;
-    ret = ODBC_CALL( SQLDriverConnect, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
 /*************************************************************************
  *				SQLSetScrollOptions           [ODBC32.069]
  */
-SQLRETURN WINAPI SQLSetScrollOptions(SQLHSTMT StatementHandle, SQLUSMALLINT Concurrency, SQLLEN KeySetSize,
-                                     SQLUSMALLINT RowSetSize)
+SQLRETURN WINAPI SQLSetScrollOptions(SQLHSTMT statement_handle, SQLUSMALLINT f_concurrency, SQLLEN crow_keyset,
+                                     SQLUSMALLINT crow_rowset)
 {
-    struct SQLSetScrollOptions_params params = { 0, Concurrency, KeySetSize, RowSetSize };
-    struct handle *handle = StatementHandle;
-    SQLRETURN ret;
-
-    TRACE("(StatementHandle %p, Concurrency %d, KeySetSize %s, RowSetSize %d)\n", StatementHandle,
-          Concurrency, debugstr_sqllen(KeySetSize), RowSetSize);
+    SQLRETURN ret = SQL_ERROR;
 
-    if (!handle) return SQL_INVALID_HANDLE;
+    FIXME("(statement_handle %p, f_concurrency %d, crow_keyset %s, crow_rowset %d)\n", statement_handle,
+          f_concurrency, debugstr_sqllen(crow_keyset), crow_rowset);
 
-    params.StatementHandle = handle->unix_handle;
-    ret = ODBC_CALL( SQLSetScrollOptions, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
-static BOOL SQLColAttributes_KnownStringAttribute(SQLUSMALLINT fDescType)
-{
-    static const SQLUSMALLINT attrList[] =
-    {
-        SQL_COLUMN_OWNER_NAME,
-        SQL_COLUMN_QUALIFIER_NAME,
-        SQL_COLUMN_LABEL,
-        SQL_COLUMN_NAME,
-        SQL_COLUMN_TABLE_NAME,
-        SQL_COLUMN_TYPE_NAME,
-        SQL_DESC_BASE_COLUMN_NAME,
-        SQL_DESC_BASE_TABLE_NAME,
-        SQL_DESC_CATALOG_NAME,
-        SQL_DESC_LABEL,
-        SQL_DESC_LITERAL_PREFIX,
-        SQL_DESC_LITERAL_SUFFIX,
-        SQL_DESC_LOCAL_TYPE_NAME,
-        SQL_DESC_NAME,
-        SQL_DESC_SCHEMA_NAME,
-        SQL_DESC_TABLE_NAME,
-        SQL_DESC_TYPE_NAME,
-    };
-    unsigned int i;
-
-    for (i = 0; i < ARRAY_SIZE(attrList); i++) {
-        if (attrList[i] == fDescType) return TRUE;
-    }
-    return FALSE;
-}
-
 /*************************************************************************
  *				SQLColAttributesW          [ODBC32.106]
  */
-SQLRETURN WINAPI SQLColAttributesW(SQLHSTMT StatementHandle, SQLUSMALLINT ColumnNumber, SQLUSMALLINT FieldIdentifier,
-                                   SQLPOINTER CharacterAttributes, SQLSMALLINT BufferLength, SQLSMALLINT *StringLength,
-                                   SQLLEN *NumericAttributes)
+SQLRETURN WINAPI SQLColAttributesW(SQLHSTMT hstmt, SQLUSMALLINT icol, SQLUSMALLINT fDescType,
+                                   SQLPOINTER rgbDesc, SQLSMALLINT cbDescMax, SQLSMALLINT *pcbDesc,
+                                   SQLLEN *pfDesc)
 {
-    struct SQLColAttributesW_params params = { 0, ColumnNumber, FieldIdentifier, CharacterAttributes, BufferLength,
-                                               StringLength };
-    struct handle *handle = StatementHandle;
-    INT64 attrs;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p, ColumnNumber %d, FieldIdentifier %d, CharacterAttributes %p, BufferLength %d, "
-          "StringLength %p, NumericAttributes %p)\n", StatementHandle, ColumnNumber, FieldIdentifier,
-          CharacterAttributes, BufferLength, StringLength, NumericAttributes);
+    FIXME("(hstmt %p, icol %d, fDescType %d, rgbDesc %p, cbDescMax %d, pcbDesc %p, pfDesc %p)\n", hstmt, icol,
+          fDescType, rgbDesc, cbDescMax, pcbDesc, pfDesc);
 
-    if (!handle) return SQL_INVALID_HANDLE;
-
-    params.StatementHandle   = handle->unix_handle;
-    params.NumericAttributes = &attrs;
-    if (SUCCESS((ret = ODBC_CALL( SQLColAttributesW, &params )))) *NumericAttributes = attrs;
-
-    if (ret == SQL_SUCCESS && SQLColAttributes_KnownStringAttribute(FieldIdentifier) && CharacterAttributes &&
-        StringLength && *StringLength != wcslen(CharacterAttributes) * 2)
-    {
-        TRACE("CHEAT: resetting name length for ADO\n");
-        *StringLength = wcslen(CharacterAttributes) * 2;
-    }
-
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -2010,20 +1221,12 @@ SQLRETURN WINAPI SQLConnectW(SQLHDBC ConnectionHandle, WCHAR *ServerName, SQLSMA
                              WCHAR *UserName, SQLSMALLINT NameLength2, WCHAR *Authentication,
                              SQLSMALLINT NameLength3)
 {
-    struct SQLConnectW_params params = { 0, ServerName, NameLength1, UserName, NameLength2, Authentication,
-                                         NameLength3 };
-    struct handle *handle = ConnectionHandle;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(ConnectionHandle %p, ServerName %s, NameLength1 %d, UserName %s, NameLength2 %d, Authentication %s,"
+    FIXME("(ConnectionHandle %p, ServerName %s, NameLength1 %d, UserName %s, NameLength2 %d, Authentication %s,"
           " NameLength3 %d)\n", ConnectionHandle, debugstr_wn(ServerName, NameLength1), NameLength1,
           debugstr_wn(UserName, NameLength2), NameLength2, debugstr_wn(Authentication, NameLength3), NameLength3);
 
-    if (!handle) return SQL_INVALID_HANDLE;
-
-    params.ConnectionHandle = handle->unix_handle;
-    ret = ODBC_CALL( SQLConnectW, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -2034,36 +1237,15 @@ SQLRETURN WINAPI SQLDescribeColW(SQLHSTMT StatementHandle, SQLUSMALLINT ColumnNu
                                  SQLSMALLINT BufferLength, SQLSMALLINT *NameLength, SQLSMALLINT *DataType,
                                  SQLULEN *ColumnSize, SQLSMALLINT *DecimalDigits, SQLSMALLINT *Nullable)
 {
-    struct SQLDescribeColW_params params = { 0, ColumnNumber, ColumnName, BufferLength, NameLength, DataType,
-                                             NULL, DecimalDigits, Nullable };
-    struct handle *handle = StatementHandle;
     SQLSMALLINT dummy;
-    UINT64 size;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p, ColumnNumber %d, ColumnName %p, BufferLength %d, NameLength %p, DataType %p,"
+    FIXME("(StatementHandle %p, ColumnNumber %d, ColumnName %p, BufferLength %d, NameLength %p, DataType %p,"
           " ColumnSize %p, DecimalDigits %p, Nullable %p)\n", StatementHandle, ColumnNumber, ColumnName,
           BufferLength, NameLength, DataType, ColumnSize, DecimalDigits, Nullable);
 
-    if (!handle) return SQL_INVALID_HANDLE;
-
-    params.StatementHandle = handle->unix_handle;
-    if (!NameLength) params.NameLength = &dummy; /* workaround for drivers that don't accept NULL NameLength */
-    params.ColumnSize      = &size;
-    if (SUCCESS((ret = ODBC_CALL( SQLDescribeColW, &params ))))
-    {
-        if (ColumnName && NameLength) TRACE("ColumnName %s\n", debugstr_wn(ColumnName, *NameLength));
-        if (DataType) TRACE("DataType %d\n", *DataType);
-        if (ColumnSize)
-        {
-            *ColumnSize = size;
-            TRACE("ColumnSize %s\n", debugstr_sqlulen(*ColumnSize));
-        }
-        if (DecimalDigits) TRACE("DecimalDigits %d\n", *DecimalDigits);
-        if (Nullable) TRACE("Nullable %d\n", *Nullable);
-    }
+    if (!NameLength) NameLength = &dummy; /* workaround for drivers that don't accept NULL NameLength */
 
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -2071,28 +1253,15 @@ SQLRETURN WINAPI SQLDescribeColW(SQLHSTMT StatementHandle, SQLUSMALLINT ColumnNu
  *				SQLErrorW          [ODBC32.110]
  */
 SQLRETURN WINAPI SQLErrorW(SQLHENV EnvironmentHandle, SQLHDBC ConnectionHandle, SQLHSTMT StatementHandle,
-                           WCHAR *SqlState, SQLINTEGER *NativeError, WCHAR *MessageText,
+                           WCHAR *Sqlstate, SQLINTEGER *NativeError, WCHAR *MessageText,
                            SQLSMALLINT BufferLength, SQLSMALLINT *TextLength)
 {
-    struct SQLErrorW_params params = { 0, 0, 0, SqlState, NativeError, MessageText, BufferLength, TextLength };
-    struct handle *env = EnvironmentHandle, *con = ConnectionHandle, *stmt = StatementHandle;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(EnvironmentHandle %p, ConnectionHandle %p, StatementHandle %p, SqlState %p, NativeError %p,"
+    FIXME("(EnvironmentHandle %p, ConnectionHandle %p, StatementHandle %p, Sqlstate %p, NativeError %p,"
           " MessageText %p, BufferLength %d, TextLength %p)\n", EnvironmentHandle, ConnectionHandle,
-          StatementHandle, SqlState, NativeError, MessageText, BufferLength, TextLength);
+          StatementHandle, Sqlstate, NativeError, MessageText, BufferLength, TextLength);
 
-    if (env) params.EnvironmentHandle = env->unix_handle;
-    if (con) params.ConnectionHandle = con->unix_handle;
-    if (stmt) params.StatementHandle = stmt->unix_handle;
-    if (SUCCESS((ret = ODBC_CALL( SQLErrorW, &params ))))
-    {
-        TRACE(" SqlState %s\n", debugstr_wn(SqlState, 5));
-        TRACE(" Error %d\n", *NativeError);
-        TRACE(" MessageText %s\n", debugstr_wn(MessageText, *TextLength));
-    }
-
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -2101,18 +1270,11 @@ SQLRETURN WINAPI SQLErrorW(SQLHENV EnvironmentHandle, SQLHDBC ConnectionHandle,
  */
 SQLRETURN WINAPI SQLExecDirectW(SQLHSTMT StatementHandle, WCHAR *StatementText, SQLINTEGER TextLength)
 {
-    struct SQLExecDirectW_params params = { 0, StatementText, TextLength };
-    struct handle *handle = StatementHandle;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p, StatementText %s, TextLength %d)\n", StatementHandle,
+    FIXME("(StatementHandle %p, StatementText %s, TextLength %d)\n", StatementHandle,
           debugstr_wn(StatementText, TextLength), TextLength);
 
-    if (!handle) return SQL_INVALID_HANDLE;
-
-    params.StatementHandle = handle->unix_handle;
-    ret = ODBC_CALL( SQLExecDirectW, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -2122,18 +1284,11 @@ SQLRETURN WINAPI SQLExecDirectW(SQLHSTMT StatementHandle, WCHAR *StatementText,
 SQLRETURN WINAPI SQLGetCursorNameW(SQLHSTMT StatementHandle, WCHAR *CursorName, SQLSMALLINT BufferLength,
                                    SQLSMALLINT *NameLength)
 {
-    struct SQLGetCursorNameW_params params = { 0, CursorName, BufferLength, NameLength };
-    struct handle *handle = StatementHandle;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p, CursorName %p, BufferLength %d, NameLength %p)\n", StatementHandle, CursorName,
+    FIXME("(StatementHandle %p, CursorName %p, BufferLength %d, NameLength %p)\n", StatementHandle, CursorName,
           BufferLength, NameLength);
 
-    if (!handle) return SQL_INVALID_HANDLE;
-
-    params.StatementHandle = handle->unix_handle;
-    ret = ODBC_CALL( SQLGetCursorNameW, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -2142,18 +1297,11 @@ SQLRETURN WINAPI SQLGetCursorNameW(SQLHSTMT StatementHandle, WCHAR *CursorName,
  */
 SQLRETURN WINAPI SQLPrepareW(SQLHSTMT StatementHandle, WCHAR *StatementText, SQLINTEGER TextLength)
 {
-    struct SQLPrepareW_params params = { 0, StatementText, TextLength };
-    struct handle *handle = StatementHandle;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p, StatementText %s, TextLength %d)\n", StatementHandle,
+    FIXME("(StatementHandle %p, StatementText %s, TextLength %d)\n", StatementHandle,
           debugstr_wn(StatementText, TextLength), TextLength);
 
-    if (!handle) return SQL_INVALID_HANDLE;
-
-    params.StatementHandle = handle->unix_handle;
-    ret = ODBC_CALL( SQLPrepareW, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -2162,18 +1310,11 @@ SQLRETURN WINAPI SQLPrepareW(SQLHSTMT StatementHandle, WCHAR *StatementText, SQL
  */
 SQLRETURN WINAPI SQLSetCursorNameW(SQLHSTMT StatementHandle, WCHAR *CursorName, SQLSMALLINT NameLength)
 {
-    struct SQLSetCursorNameW_params params = { 0, CursorName, NameLength };
-    struct handle *handle = StatementHandle;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p, CursorName %s, NameLength %d)\n", StatementHandle,
+    FIXME("(StatementHandle %p, CursorName %s, NameLength %d)\n", StatementHandle,
           debugstr_wn(CursorName, NameLength), NameLength);
 
-    if (!handle) return SQL_INVALID_HANDLE;
-
-    params.StatementHandle = handle->unix_handle;
-    ret = ODBC_CALL( SQLSetCursorNameW, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -2185,30 +1326,12 @@ SQLRETURN WINAPI SQLColAttributeW(SQLHSTMT StatementHandle, SQLUSMALLINT ColumnN
                                   SQLSMALLINT BufferLength, SQLSMALLINT *StringLength,
                                   SQLLEN *NumericAttribute)
 {
-    struct SQLColAttributeW_params params = { 0, ColumnNumber, FieldIdentifier, CharacterAttribute, BufferLength,
-                                              StringLength };
-    struct handle *handle = StatementHandle;
-    INT64 attr;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("StatementHandle %p ColumnNumber %d FieldIdentifier %d CharacterAttribute %p BufferLength %d"
+    FIXME("StatementHandle %p ColumnNumber %d FieldIdentifier %d CharacterAttribute %p BufferLength %d"
           " StringLength %p NumericAttribute %p\n", StatementHandle, ColumnNumber, FieldIdentifier,
           CharacterAttribute, BufferLength, StringLength, NumericAttribute);
 
-    if (!handle) return SQL_INVALID_HANDLE;
-
-    params.StatementHandle  = handle->unix_handle;
-    params.NumericAttribute = &attr;
-    if (SUCCESS((ret = ODBC_CALL( SQLColAttributeW, &params )))) *NumericAttribute = attr;
-
-    if (ret == SQL_SUCCESS && CharacterAttribute != NULL && SQLColAttributes_KnownStringAttribute(FieldIdentifier) &&
-        StringLength && *StringLength != wcslen(CharacterAttribute) * 2)
-    {
-        TRACE("CHEAT: resetting name length for ADO\n");
-        *StringLength = wcslen(CharacterAttribute) * 2;
-    }
-
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -2218,18 +1341,11 @@ SQLRETURN WINAPI SQLColAttributeW(SQLHSTMT StatementHandle, SQLUSMALLINT ColumnN
 SQLRETURN WINAPI SQLGetConnectAttrW(SQLHDBC ConnectionHandle, SQLINTEGER Attribute, SQLPOINTER Value,
                                     SQLINTEGER BufferLength, SQLINTEGER *StringLength)
 {
-    struct SQLGetConnectAttrW_params params = { 0, Attribute, Value, BufferLength, StringLength };
-    struct handle *handle = ConnectionHandle;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(ConnectionHandle %p, Attribute %d, Value %p, BufferLength %d, StringLength %p)\n", ConnectionHandle,
+    FIXME("(ConnectionHandle %p, Attribute %d, Value %p, BufferLength %d, StringLength %p)\n", ConnectionHandle,
           Attribute, Value, BufferLength, StringLength);
 
-    if (!handle) return SQL_INVALID_HANDLE;
-
-    params.ConnectionHandle = handle->unix_handle;
-    ret = ODBC_CALL( SQLGetConnectAttrW, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -2239,18 +1355,11 @@ SQLRETURN WINAPI SQLGetConnectAttrW(SQLHDBC ConnectionHandle, SQLINTEGER Attribu
 SQLRETURN WINAPI SQLGetDescFieldW(SQLHDESC DescriptorHandle, SQLSMALLINT RecNumber, SQLSMALLINT FieldIdentifier,
                                   SQLPOINTER Value, SQLINTEGER BufferLength, SQLINTEGER *StringLength)
 {
-    struct SQLGetDescFieldW_params params = { 0, RecNumber, FieldIdentifier, Value, BufferLength, StringLength };
-    struct handle *handle = DescriptorHandle;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(DescriptorHandle %p, RecNumber %d, FieldIdentifier %d, Value %p, BufferLength %d, StringLength %p)\n",
+    FIXME("(DescriptorHandle %p, RecNumber %d, FieldIdentifier %d, Value %p, BufferLength %d, StringLength %p)\n",
           DescriptorHandle, RecNumber, FieldIdentifier, Value, BufferLength, StringLength);
 
-    if (!handle) return SQL_INVALID_HANDLE;
-
-    params.DescriptorHandle = handle->unix_handle;
-    ret = ODBC_CALL( SQLGetDescFieldW, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -2262,22 +1371,12 @@ SQLRETURN WINAPI SQLGetDescRecW(SQLHDESC DescriptorHandle, SQLSMALLINT RecNumber
                                 SQLSMALLINT *SubType, SQLLEN *Length, SQLSMALLINT *Precision,
                                 SQLSMALLINT *Scale, SQLSMALLINT *Nullable)
 {
-    struct SQLGetDescRecW_params params = { 0, RecNumber, Name, BufferLength, StringLength, Type, SubType,
-                                            NULL, Precision, Scale, Nullable };
-    struct handle *handle = DescriptorHandle;
-    INT64 len;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(DescriptorHandle %p, RecNumber %d, Name %p, BufferLength %d, StringLength %p, Type %p, SubType %p,"
+    FIXME("(DescriptorHandle %p, RecNumber %d, Name %p, BufferLength %d, StringLength %p, Type %p, SubType %p,"
           " Length %p, Precision %p, Scale %p, Nullable %p)\n", DescriptorHandle, RecNumber, Name, BufferLength,
           StringLength, Type, SubType, Length, Precision, Scale, Nullable);
 
-    if (!handle) return SQL_INVALID_HANDLE;
-
-    params.DescriptorHandle = handle->unix_handle;
-    params.Length           = &len;
-    if (SUCCESS((ret = ODBC_CALL( SQLGetDescRecW, &params )))) *Length = len;
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -2288,43 +1387,27 @@ SQLRETURN WINAPI SQLGetDiagFieldW(SQLSMALLINT HandleType, SQLHANDLE Handle, SQLS
                                   SQLSMALLINT DiagIdentifier, SQLPOINTER DiagInfo, SQLSMALLINT BufferLength,
                                   SQLSMALLINT *StringLength)
 {
-    struct SQLGetDiagFieldW_params params = { HandleType, 0, RecNumber, DiagIdentifier, DiagInfo, BufferLength,
-                                              StringLength };
-    struct handle *handle = Handle;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(HandleType %d, Handle %p, RecNumber %d, DiagIdentifier %d, DiagInfo %p, BufferLength %d,"
+    FIXME("(HandleType %d, Handle %p, RecNumber %d, DiagIdentifier %d, DiagInfo %p, BufferLength %d,"
           " StringLength %p)\n", HandleType, Handle, RecNumber, DiagIdentifier, DiagInfo, BufferLength, StringLength);
 
-    if (!handle) return SQL_INVALID_HANDLE;
-
-    params.Handle = handle->unix_handle;
-    ret = ODBC_CALL( SQLGetDiagFieldW, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
 /*************************************************************************
  *				SQLGetDiagRecW           [ODBC32.136]
  */
-SQLRETURN WINAPI SQLGetDiagRecW(SQLSMALLINT HandleType, SQLHANDLE Handle, SQLSMALLINT RecNumber, WCHAR *SqlState,
-                                SQLINTEGER *NativeError, WCHAR *MessageText, SQLSMALLINT BufferLength,
-                                SQLSMALLINT *TextLength)
+SQLRETURN WINAPI SQLGetDiagRecW(SQLSMALLINT HandleType, SQLHANDLE Handle, SQLSMALLINT RecNumber,
+                                WCHAR *Sqlstate, SQLINTEGER *NativeError, WCHAR *MessageText,
+                                SQLSMALLINT BufferLength, SQLSMALLINT *TextLength)
 {
-    struct SQLGetDiagRecW_params params = { HandleType, 0, RecNumber, SqlState, NativeError, MessageText,
-                                            BufferLength, TextLength };
-    struct handle *handle = Handle;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(HandleType %d, Handle %p, RecNumber %d, SqlState %p, NativeError %p, MessageText %p, BufferLength %d,"
-          " TextLength %p)\n", HandleType, Handle, RecNumber, SqlState, NativeError, MessageText, BufferLength,
+    FIXME("(HandleType %d, Handle %p, RecNumber %d, Sqlstate %p, NativeError %p, MessageText %p, BufferLength %d,"
+          " TextLength %p)\n", HandleType, Handle, RecNumber, Sqlstate, NativeError, MessageText, BufferLength,
           TextLength);
 
-    if (!handle) return SQL_INVALID_HANDLE;
-
-    params.Handle = handle->unix_handle;
-    ret = ODBC_CALL( SQLGetDiagRecW, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -2334,11 +1417,9 @@ SQLRETURN WINAPI SQLGetDiagRecW(SQLSMALLINT HandleType, SQLHANDLE Handle, SQLSMA
 SQLRETURN WINAPI SQLGetStmtAttrW(SQLHSTMT StatementHandle, SQLINTEGER Attribute, SQLPOINTER Value,
                                  SQLINTEGER BufferLength, SQLINTEGER *StringLength)
 {
-    struct SQLGetStmtAttrW_params params = { 0, Attribute, Value, BufferLength, StringLength };
-    struct handle *handle = StatementHandle;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p, Attribute %d, Value %p, BufferLength %d, StringLength %p)\n", StatementHandle,
+    FIXME("(StatementHandle %p, Attribute %d, Value %p, BufferLength %d, StringLength %p)\n", StatementHandle,
           Attribute, Value, BufferLength, StringLength);
 
     if (!Value)
@@ -2347,11 +1428,6 @@ SQLRETURN WINAPI SQLGetStmtAttrW(SQLHSTMT StatementHandle, SQLINTEGER Attribute,
         return SQL_ERROR;
     }
 
-    if (!handle) return SQL_INVALID_HANDLE;
-
-    params.StatementHandle = handle->unix_handle;
-    ret = ODBC_CALL( SQLGetStmtAttrW, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -2361,18 +1437,11 @@ SQLRETURN WINAPI SQLGetStmtAttrW(SQLHSTMT StatementHandle, SQLINTEGER Attribute,
 SQLRETURN WINAPI SQLSetConnectAttrW(SQLHDBC ConnectionHandle, SQLINTEGER Attribute, SQLPOINTER Value,
                                     SQLINTEGER StringLength)
 {
-    struct SQLSetConnectAttrW_params params = { 0, Attribute, Value, StringLength };
-    struct handle *handle = ConnectionHandle;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(ConnectionHandle %p, Attribute %d, Value %p, StringLength %d)\n", ConnectionHandle, Attribute,
-          Value, StringLength);
-
-    if (!handle) return SQL_INVALID_HANDLE;
+    FIXME("(ConnectionHandle %p, Attribute %d, Value %p, StringLength %d)\n", ConnectionHandle, Attribute, Value,
+          StringLength);
 
-    params.ConnectionHandle = handle->unix_handle;
-    ret = ODBC_CALL( SQLSetConnectAttrW, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -2383,21 +1452,14 @@ SQLRETURN WINAPI SQLColumnsW(SQLHSTMT StatementHandle, WCHAR *CatalogName, SQLSM
                              WCHAR *SchemaName, SQLSMALLINT NameLength2, WCHAR *TableName,
                              SQLSMALLINT NameLength3, WCHAR *ColumnName, SQLSMALLINT NameLength4)
 {
-    struct SQLColumnsW_params params = { 0, CatalogName, NameLength1, SchemaName, NameLength2, TableName,
-                                         NameLength3, ColumnName, NameLength4 };
-    struct handle *handle = StatementHandle;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p, CatalogName %s, NameLength1 %d, SchemaName %s, NameLength2 %d, TableName %s,"
+    FIXME("(StatementHandle %p, CatalogName %s, NameLength1 %d, SchemaName %s, NameLength2 %d, TableName %s,"
           " NameLength3 %d, ColumnName %s, NameLength4 %d)\n", StatementHandle,
           debugstr_wn(CatalogName, NameLength1), NameLength1, debugstr_wn(SchemaName, NameLength2), NameLength2,
           debugstr_wn(TableName, NameLength3), NameLength3, debugstr_wn(ColumnName, NameLength4), NameLength4);
 
-    if (!handle) return SQL_INVALID_HANDLE;
-
-    params.StatementHandle = handle->unix_handle;
-    ret = ODBC_CALL( SQLColumnsW, &params );
-    TRACE("Returning %d\n", ret);
+    FIXME("Returning %d\n", ret);
     return ret;
 }
 
@@ -2408,21 +1470,13 @@ SQLRETURN WINAPI SQLDriverConnectW(SQLHDBC ConnectionHandle, SQLHWND WindowHandl
                                    SQLSMALLINT Length, WCHAR *OutConnectionString, SQLSMALLINT BufferLength,
                                    SQLSMALLINT *Length2, SQLUSMALLINT DriverCompletion)
 {
-    struct SQLDriverConnectW_params params = { 0, WindowHandle, InConnectionString, Length, OutConnectionString,
-                                               BufferLength, Length2, DriverCompletion };
-    struct handle *handle = ConnectionHandle;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(ConnectionHandle %p, WindowHandle %p, InConnectionString %s, Length %d, OutConnectionString %p,"
+    FIXME("(ConnectionHandle %p, WindowHandle %p, InConnectionString %s, Length %d, OutConnectionString %p,"
           " BufferLength %d, Length2 %p, DriverCompletion %d)\n", ConnectionHandle, WindowHandle,
           debugstr_wn(InConnectionString, Length), Length, OutConnectionString, BufferLength, Length2,
           DriverCompletion);
 
-    if (!handle) return SQL_INVALID_HANDLE;
-
-    params.ConnectionHandle = handle->unix_handle;
-    ret = ODBC_CALL( SQLDriverConnectW, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -2431,17 +1485,10 @@ SQLRETURN WINAPI SQLDriverConnectW(SQLHDBC ConnectionHandle, SQLHWND WindowHandl
  */
 SQLRETURN WINAPI SQLGetConnectOptionW(SQLHDBC ConnectionHandle, SQLUSMALLINT Option, SQLPOINTER Value)
 {
-    struct SQLGetConnectOptionW_params params = { 0, Option, Value };
-    struct handle *handle = ConnectionHandle;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(ConnectionHandle %p, Option %d, Value %p)\n", ConnectionHandle, Option, Value);
+    FIXME("(ConnectionHandle %p, Option %d, Value %p)\n", ConnectionHandle, Option, Value);
 
-    if (!handle) return SQL_INVALID_HANDLE;
-
-    params.ConnectionHandle = handle->unix_handle;
-    ret = ODBC_CALL( SQLGetConnectOptionW, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -2451,18 +1498,11 @@ SQLRETURN WINAPI SQLGetConnectOptionW(SQLHDBC ConnectionHandle, SQLUSMALLINT Opt
 SQLRETURN WINAPI SQLGetInfoW(SQLHDBC ConnectionHandle, SQLUSMALLINT InfoType, SQLPOINTER InfoValue,
                              SQLSMALLINT BufferLength, SQLSMALLINT *StringLength)
 {
-    struct SQLGetInfoW_params params = { 0, InfoType, InfoValue, BufferLength, StringLength };
-    struct handle *handle = ConnectionHandle;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(ConnectionHandle, %p, InfoType %d, InfoValue %p, BufferLength %d, StringLength %p)\n", ConnectionHandle,
+    FIXME("(ConnectionHandle, %p, InfoType %d, InfoValue %p, BufferLength %d, StringLength %p)\n", ConnectionHandle,
           InfoType, InfoValue, BufferLength, StringLength);
 
-    if (!handle) return SQL_INVALID_HANDLE;
-
-    params.ConnectionHandle = handle->unix_handle;
-    ret = ODBC_CALL( SQLGetInfoW, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -2471,17 +1511,10 @@ SQLRETURN WINAPI SQLGetInfoW(SQLHDBC ConnectionHandle, SQLUSMALLINT InfoType, SQ
  */
 SQLRETURN WINAPI SQLGetTypeInfoW(SQLHSTMT StatementHandle, SQLSMALLINT DataType)
 {
-    struct SQLGetTypeInfoW_params params = { 0, DataType };
-    struct handle *handle = StatementHandle;
-    SQLRETURN ret;
-
-    TRACE("(StatementHandle %p, DataType %d)\n", StatementHandle, DataType);
+    SQLRETURN ret = SQL_ERROR;
 
-    if (!handle) return SQL_INVALID_HANDLE;
+    FIXME("(StatementHandle %p, DataType %d)\n", StatementHandle, DataType);
 
-    params.StatementHandle = handle->unix_handle;
-    ret = ODBC_CALL( SQLGetTypeInfoW, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -2490,17 +1523,10 @@ SQLRETURN WINAPI SQLGetTypeInfoW(SQLHSTMT StatementHandle, SQLSMALLINT DataType)
  */
 SQLRETURN WINAPI SQLSetConnectOptionW(SQLHDBC ConnectionHandle, SQLUSMALLINT Option, SQLULEN Value)
 {
-    struct SQLSetConnectOptionW_params params = { 0, Option, Value };
-    struct handle *handle = ConnectionHandle;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(ConnectionHandle %p, Option %d, Value %s)\n", ConnectionHandle, Option, debugstr_sqllen(Value));
+    FIXME("(ConnectionHandle %p, Option %d, Value %s)\n", ConnectionHandle, Option, debugstr_sqllen(Value));
 
-    if (!handle) return SQL_INVALID_HANDLE;
-
-    params.ConnectionHandle = handle->unix_handle;
-    ret = ODBC_CALL( SQLSetConnectOptionW, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -2512,21 +1538,13 @@ SQLRETURN WINAPI SQLSpecialColumnsW(SQLHSTMT StatementHandle, SQLUSMALLINT Ident
                                     SQLSMALLINT NameLength2, SQLWCHAR *TableName, SQLSMALLINT NameLength3,
                                     SQLUSMALLINT Scope, SQLUSMALLINT Nullable)
 {
-    struct SQLSpecialColumnsW_params params = { 0, IdentifierType, CatalogName, NameLength1, SchemaName, NameLength2,
-                                                TableName, NameLength3, Scope, Nullable };
-    struct handle *handle = StatementHandle;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p, IdentifierType %d, CatalogName %s, NameLength1 %d, SchemaName %s, NameLength2 %d,"
+    FIXME("(StatementHandle %p, IdentifierType %d, CatalogName %s, NameLength1 %d, SchemaName %s, NameLength2 %d,"
           " TableName %s, NameLength3 %d, Scope %d, Nullable %d)\n", StatementHandle, IdentifierType,
           debugstr_wn(CatalogName, NameLength1), NameLength1, debugstr_wn(SchemaName, NameLength2), NameLength2,
           debugstr_wn(TableName, NameLength3), NameLength3, Scope, Nullable);
 
-    if (!handle) return SQL_INVALID_HANDLE;
-
-    params.StatementHandle = handle->unix_handle;
-    ret = ODBC_CALL( SQLSpecialColumnsW, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -2537,21 +1555,13 @@ SQLRETURN WINAPI SQLStatisticsW(SQLHSTMT StatementHandle, SQLWCHAR *CatalogName,
                                 SQLWCHAR *SchemaName, SQLSMALLINT NameLength2, SQLWCHAR *TableName,
                                 SQLSMALLINT NameLength3, SQLUSMALLINT Unique, SQLUSMALLINT Reserved)
 {
-    struct SQLStatisticsW_params params = { 0, CatalogName, NameLength1, SchemaName, NameLength2, TableName,
-                                            NameLength3, Unique, Reserved };
-    struct handle *handle = StatementHandle;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p, CatalogName %s, NameLength1 %d SchemaName %s, NameLength2 %d, TableName %s"
+    FIXME("(StatementHandle %p, CatalogName %s, NameLength1 %d SchemaName %s, NameLength2 %d, TableName %s"
           " NameLength3 %d, Unique %d, Reserved %d)\n", StatementHandle,
           debugstr_wn(CatalogName, NameLength1), NameLength1, debugstr_wn(SchemaName, NameLength2), NameLength2,
           debugstr_wn(TableName, NameLength3), NameLength3, Unique, Reserved);
 
-    if (!handle) return SQL_INVALID_HANDLE;
-
-    params.StatementHandle = handle->unix_handle;
-    ret = ODBC_CALL( SQLStatisticsW, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -2562,71 +1572,47 @@ SQLRETURN WINAPI SQLTablesW(SQLHSTMT StatementHandle, SQLWCHAR *CatalogName, SQL
                             SQLWCHAR *SchemaName, SQLSMALLINT NameLength2, SQLWCHAR *TableName,
                             SQLSMALLINT NameLength3, SQLWCHAR *TableType, SQLSMALLINT NameLength4)
 {
-    struct SQLTablesW_params params = { 0, CatalogName, NameLength1, SchemaName, NameLength2, TableName,
-                                        NameLength3, TableType, NameLength4 };
-    struct handle *handle = StatementHandle;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p, CatalogName %s, NameLength1 %d, SchemaName %s, NameLength2 %d, TableName %s,"
+    FIXME("(StatementHandle %p, CatalogName %s, NameLength1 %d, SchemaName %s, NameLength2 %d, TableName %s,"
           " NameLength3 %d, TableType %s, NameLength4 %d)\n", StatementHandle,
           debugstr_wn(CatalogName, NameLength1), NameLength1, debugstr_wn(SchemaName, NameLength2), NameLength2,
           debugstr_wn(TableName, NameLength3), NameLength3, debugstr_wn(TableType, NameLength4), NameLength4);
 
-    if (!handle) return SQL_INVALID_HANDLE;
-
-    params.StatementHandle = handle->unix_handle;
-    ret = ODBC_CALL( SQLTablesW, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
 /*************************************************************************
  *				SQLBrowseConnectW          [ODBC32.155]
  */
-SQLRETURN WINAPI SQLBrowseConnectW(SQLHDBC ConnectionHandle, SQLWCHAR *InConnectionString, SQLSMALLINT StringLength1,
-                                   SQLWCHAR *OutConnectionString, SQLSMALLINT BufferLength, SQLSMALLINT *StringLength2)
+SQLRETURN WINAPI SQLBrowseConnectW(SQLHDBC hdbc, SQLWCHAR *szConnStrIn, SQLSMALLINT cbConnStrIn,
+                                   SQLWCHAR *szConnStrOut, SQLSMALLINT cbConnStrOutMax,
+                                   SQLSMALLINT *pcbConnStrOut)
 {
-    struct SQLBrowseConnectW_params params = { 0, InConnectionString, StringLength1, OutConnectionString,
-                                               BufferLength, StringLength2 };
-    struct handle *handle = ConnectionHandle;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(ConnectionHandle %p, InConnectionString %s, StringLength1 %d, OutConnectionString %p, BufferLength %d, "
-          "StringLength2 %p)\n", ConnectionHandle, debugstr_wn(InConnectionString, StringLength1), StringLength1,
-          OutConnectionString, BufferLength, StringLength2);
+    FIXME("(hdbc %p, szConnStrIn %s, cbConnStrIn %d, szConnStrOut %p, cbConnStrOutMax %d, pcbConnStrOut %p)\n",
+          hdbc, debugstr_wn(szConnStrIn, cbConnStrIn), cbConnStrIn, szConnStrOut, cbConnStrOutMax, pcbConnStrOut);
 
-    if (!handle) return SQL_INVALID_HANDLE;
-
-    params.ConnectionHandle = handle->unix_handle;
-    ret = ODBC_CALL( SQLBrowseConnectW, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
 /*************************************************************************
  *				SQLColumnPrivilegesW          [ODBC32.156]
  */
-SQLRETURN WINAPI SQLColumnPrivilegesW(SQLHSTMT StatementHandle, SQLWCHAR *CatalogName, SQLSMALLINT NameLength1,
-                                      SQLWCHAR *SchemaName, SQLSMALLINT NameLength2, SQLWCHAR *TableName,
-                                      SQLSMALLINT NameLength3, SQLWCHAR *ColumnName, SQLSMALLINT NameLength4)
+SQLRETURN WINAPI SQLColumnPrivilegesW(SQLHSTMT hstmt, SQLWCHAR *szCatalogName, SQLSMALLINT cbCatalogName,
+                                      SQLWCHAR *szSchemaName, SQLSMALLINT cbSchemaName, SQLWCHAR *szTableName,
+                                      SQLSMALLINT cbTableName, SQLWCHAR *szColumnName, SQLSMALLINT cbColumnName)
 {
-    struct SQLColumnPrivilegesW_params params = { 0, CatalogName, NameLength1, SchemaName, NameLength2,
-                                                  TableName, NameLength3, ColumnName, NameLength4 };
-    struct handle *handle = StatementHandle;
-    SQLRETURN ret;
-
-    TRACE("(StatementHandle %p, CatalogName %s, NameLength1 %d, SchemaName %s, NameLength2 %d, TableName %s,"
-          " NameLength3 %d, ColumnName %s, NameLength3 %d)\n", StatementHandle,
-          debugstr_wn(CatalogName, NameLength1), NameLength1,
-          debugstr_wn(SchemaName, NameLength2), NameLength2,
-          debugstr_wn(TableName, NameLength3), NameLength3,
-          debugstr_wn(ColumnName, NameLength4), NameLength4);
+    SQLRETURN ret = SQL_ERROR;
 
-    if (!handle) return SQL_INVALID_HANDLE;
+    FIXME("(hstmt %p, szCatalogName %s, cbCatalogName %d, szSchemaName %s, cbSchemaName %d, szTableName %s,"
+          " cbTableName %d, szColumnName %s, cbColumnName %d)\n", hstmt,
+          debugstr_wn(szCatalogName, cbCatalogName), cbCatalogName,
+          debugstr_wn(szSchemaName, cbSchemaName), cbSchemaName,
+          debugstr_wn(szTableName, cbTableName), cbTableName,
+          debugstr_wn(szColumnName, cbColumnName), cbColumnName);
 
-    params.StatementHandle = handle->unix_handle;
-    ret = ODBC_CALL( SQLColumnPrivilegesW, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -2637,215 +1623,136 @@ SQLRETURN WINAPI SQLDataSourcesW(SQLHENV EnvironmentHandle, SQLUSMALLINT Directi
                                  SQLSMALLINT BufferLength1, SQLSMALLINT *NameLength1, WCHAR *Description,
                                  SQLSMALLINT BufferLength2, SQLSMALLINT *NameLength2)
 {
-    struct SQLDataSourcesW_params params = { 0, Direction, ServerName, BufferLength1, NameLength1, Description,
-                                             BufferLength2, NameLength2 };
-    struct handle *handle = EnvironmentHandle;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_NO_DATA;
 
-    TRACE("(EnvironmentHandle %p, Direction %d, ServerName %p, BufferLength1 %d, NameLength1 %p, Description %p,"
+    FIXME("(EnvironmentHandle %p, Direction %d, ServerName %p, BufferLength1 %d, NameLength1 %p, Description %p,"
           " BufferLength2 %d, NameLength2 %p)\n", EnvironmentHandle, Direction, ServerName, BufferLength1,
           NameLength1, Description, BufferLength2, NameLength2);
 
-    if (!handle) return SQL_INVALID_HANDLE;
-
-    params.EnvironmentHandle = handle->unix_handle;
-    ret = ODBC_CALL( SQLDataSourcesW, &params );
-
-    if (ret >= 0 && TRACE_ON(odbc))
-    {
-        if (ServerName && NameLength1 && *NameLength1 > 0)
-            TRACE(" DataSource %s", debugstr_wn(ServerName, *NameLength1));
-        if (Description && NameLength2 && *NameLength2 > 0)
-            TRACE(" Description %s", debugstr_wn(Description, *NameLength2));
-        TRACE("\n");
-    }
-
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
 /*************************************************************************
  *				SQLForeignKeysW          [ODBC32.160]
  */
-SQLRETURN WINAPI SQLForeignKeysW(SQLHSTMT StatementHandle, SQLWCHAR *PkCatalogName, SQLSMALLINT NameLength1,
-                                 SQLWCHAR *PkSchemaName, SQLSMALLINT NameLength2, SQLWCHAR *PkTableName,
-                                 SQLSMALLINT NameLength3, SQLWCHAR *FkCatalogName, SQLSMALLINT NameLength4,
-                                 SQLWCHAR *FkSchemaName, SQLSMALLINT NameLength5, SQLWCHAR *FkTableName,
-                                 SQLSMALLINT NameLength6)
+SQLRETURN WINAPI SQLForeignKeysW(SQLHSTMT hstmt, SQLWCHAR *szPkCatalogName, SQLSMALLINT cbPkCatalogName,
+                                 SQLWCHAR *szPkSchemaName, SQLSMALLINT cbPkSchemaName, SQLWCHAR *szPkTableName,
+                                 SQLSMALLINT cbPkTableName, SQLWCHAR *szFkCatalogName,
+                                 SQLSMALLINT cbFkCatalogName, SQLWCHAR *szFkSchemaName,
+                                 SQLSMALLINT cbFkSchemaName, SQLWCHAR *szFkTableName, SQLSMALLINT cbFkTableName)
 {
-    struct SQLForeignKeysW_params params = { 0, PkCatalogName, NameLength1, PkSchemaName, NameLength2,
-                                             PkTableName, NameLength2, FkCatalogName, NameLength3,
-                                             FkSchemaName, NameLength5, FkTableName, NameLength6 };
-    struct handle *handle = StatementHandle;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p, PkCatalogName %s, NameLength1 %d, PkSchemaName %s, NameLength2 %d,"
-          " PkTableName %s, NameLength3 %d, FkCatalogName %s, NameLength4 %d, FkSchemaName %s,"
-          " NameLength5 %d, FkTableName %s, NameLength6 %d)\n", StatementHandle,
-          debugstr_wn(PkCatalogName, NameLength1), NameLength1,
-          debugstr_wn(PkSchemaName, NameLength2), NameLength2,
-          debugstr_wn(PkTableName, NameLength3), NameLength3,
-          debugstr_wn(FkCatalogName, NameLength4), NameLength4,
-          debugstr_wn(FkSchemaName, NameLength5), NameLength5,
-          debugstr_wn(FkTableName, NameLength6), NameLength6);
+    FIXME("(hstmt %p, szPkCatalogName %s, cbPkCatalogName %d, szPkSchemaName %s, cbPkSchemaName %d,"
+          " szPkTableName %s, cbPkTableName %d, szFkCatalogName %s, cbFkCatalogName %d, szFkSchemaName %s,"
+          " cbFkSchemaName %d, szFkTableName %s, cbFkTableName %d)\n", hstmt,
+          debugstr_wn(szPkCatalogName, cbPkCatalogName), cbPkCatalogName,
+          debugstr_wn(szPkSchemaName, cbPkSchemaName), cbPkSchemaName,
+          debugstr_wn(szPkTableName, cbPkTableName), cbPkTableName,
+          debugstr_wn(szFkCatalogName, cbFkCatalogName), cbFkCatalogName,
+          debugstr_wn(szFkSchemaName, cbFkSchemaName), cbFkSchemaName,
+          debugstr_wn(szFkTableName, cbFkTableName), cbFkTableName);
 
-    if (!handle) return SQL_INVALID_HANDLE;
-
-    params.StatementHandle = handle->unix_handle;
-    ret = ODBC_CALL( SQLForeignKeysW, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
 /*************************************************************************
  *				SQLNativeSqlW          [ODBC32.162]
  */
-SQLRETURN WINAPI SQLNativeSqlW(SQLHDBC ConnectionHandle, SQLWCHAR *InStatementText, SQLINTEGER TextLength1,
-                               SQLWCHAR *OutStatementText, SQLINTEGER BufferLength, SQLINTEGER *TextLength2)
+SQLRETURN WINAPI SQLNativeSqlW(SQLHDBC hdbc, SQLWCHAR *szSqlStrIn, SQLINTEGER cbSqlStrIn, SQLWCHAR *szSqlStr,
+                               SQLINTEGER cbSqlStrMax, SQLINTEGER *pcbSqlStr)
 {
-    struct SQLNativeSqlW_params params = { 0, InStatementText, TextLength1, OutStatementText, BufferLength,
-                                           TextLength2 };
-    struct handle *handle = ConnectionHandle;
-    SQLRETURN ret;
-
-    TRACE("(ConnectionHandle %p, InStatementText %s, TextLength1 %d, OutStatementText %p, BufferLength %d, "
-          "TextLength2 %p)\n", ConnectionHandle, debugstr_wn(InStatementText, TextLength1), TextLength1,
-          OutStatementText, BufferLength, TextLength2);
+    SQLRETURN ret = SQL_ERROR;
 
-    if (!handle) return SQL_INVALID_HANDLE;
+    FIXME("(hdbc %p, szSqlStrIn %s, cbSqlStrIn %d, szSqlStr %p, cbSqlStrMax %d, pcbSqlStr %p)\n", hdbc,
+          debugstr_wn(szSqlStrIn, cbSqlStrIn), cbSqlStrIn, szSqlStr, cbSqlStrMax, pcbSqlStr);
 
-    params.ConnectionHandle = handle->unix_handle;
-    ret = ODBC_CALL( SQLNativeSqlW, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
 /*************************************************************************
  *				SQLPrimaryKeysW          [ODBC32.165]
  */
-SQLRETURN WINAPI SQLPrimaryKeysW(SQLHSTMT StatementHandle, SQLWCHAR *CatalogName, SQLSMALLINT NameLength1,
-                                 SQLWCHAR *SchemaName, SQLSMALLINT NameLength2, SQLWCHAR *TableName,
-                                 SQLSMALLINT NameLength3)
+SQLRETURN WINAPI SQLPrimaryKeysW(SQLHSTMT hstmt, SQLWCHAR *szCatalogName, SQLSMALLINT cbCatalogName,
+                                 SQLWCHAR *szSchemaName, SQLSMALLINT cbSchemaName, SQLWCHAR *szTableName,
+                                 SQLSMALLINT cbTableName)
 {
-    struct SQLPrimaryKeysW_params params = { 0, CatalogName, NameLength1, SchemaName, NameLength2, TableName,
-                                             NameLength2 };
-    struct handle *handle = StatementHandle;
-    SQLRETURN ret;
-
-    TRACE("(StatementHandle %p, CatalogName %s, NameLength1 %d, SchemaName %s, NameLength2 %d, TableName %s,"
-          " NameLength3 %d)\n", StatementHandle,
-          debugstr_wn(CatalogName, NameLength1), NameLength1,
-          debugstr_wn(SchemaName, NameLength2), NameLength2,
-          debugstr_wn(TableName, NameLength3), NameLength3);
+    SQLRETURN ret = SQL_ERROR;
 
-    if (!handle) return SQL_INVALID_HANDLE;
+    FIXME("(hstmt %p, szCatalogName %s, cbCatalogName %d, szSchemaName %s, cbSchemaName %d, szTableName %s,"
+          " cbTableName %d)\n", hstmt,
+          debugstr_wn(szCatalogName, cbCatalogName), cbCatalogName,
+          debugstr_wn(szSchemaName, cbSchemaName), cbSchemaName,
+          debugstr_wn(szTableName, cbTableName), cbTableName);
 
-    params.StatementHandle = handle->unix_handle;
-    ret = ODBC_CALL( SQLPrimaryKeysW, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
 /*************************************************************************
  *				SQLProcedureColumnsW          [ODBC32.166]
  */
-SQLRETURN WINAPI SQLProcedureColumnsW(SQLHSTMT StatementHandle, SQLWCHAR *CatalogName, SQLSMALLINT NameLength1,
-                                      SQLWCHAR *SchemaName, SQLSMALLINT NameLength2, SQLWCHAR *ProcName,
-                                      SQLSMALLINT NameLength3, SQLWCHAR *ColumnName, SQLSMALLINT NameLength4 )
+SQLRETURN WINAPI SQLProcedureColumnsW(SQLHSTMT hstmt, SQLWCHAR *szCatalogName, SQLSMALLINT cbCatalogName,
+                                      SQLWCHAR *szSchemaName, SQLSMALLINT cbSchemaName, SQLWCHAR *szProcName,
+                                      SQLSMALLINT cbProcName, SQLWCHAR *szColumnName, SQLSMALLINT cbColumnName)
 {
-    struct SQLProcedureColumnsW_params params = { 0, CatalogName, NameLength1, SchemaName, NameLength2,
-                                                  ProcName, NameLength3, ColumnName, NameLength4 };
-    struct handle *handle = StatementHandle;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p, CatalogName %s, NameLength1 %d, SchemaName %s, NameLength2 %d, ProcName %s,"
-          " NameLength3 %d, ColumnName %s, NameLength4 %d)\n", StatementHandle,
-          debugstr_wn(CatalogName, NameLength1), NameLength1,
-          debugstr_wn(SchemaName, NameLength2), NameLength2,
-          debugstr_wn(ProcName, NameLength3), NameLength3,
-          debugstr_wn(ColumnName, NameLength4), NameLength4);
-
-    if (!handle) return SQL_INVALID_HANDLE;
+    FIXME("(hstmt %p, szCatalogName %s, cbCatalogName %d, szSchemaName %s, cbSchemaName %d, szProcName %s,"
+          " cbProcName %d, szColumnName %s, cbColumnName %d)\n", hstmt,
+          debugstr_wn(szCatalogName, cbCatalogName), cbCatalogName,
+          debugstr_wn(szSchemaName, cbSchemaName), cbSchemaName,
+          debugstr_wn(szProcName, cbProcName), cbProcName,
+          debugstr_wn(szColumnName, cbColumnName), cbColumnName);
 
-    params.StatementHandle = handle->unix_handle;
-    ret = ODBC_CALL( SQLProcedureColumnsW, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
 /*************************************************************************
  *				SQLProceduresW          [ODBC32.167]
  */
-SQLRETURN WINAPI SQLProceduresW(SQLHSTMT StatementHandle, SQLWCHAR *CatalogName, SQLSMALLINT NameLength1,
-                                SQLWCHAR *SchemaName, SQLSMALLINT NameLength2, SQLWCHAR *ProcName,
-                                SQLSMALLINT NameLength3)
+SQLRETURN WINAPI SQLProceduresW(SQLHSTMT hstmt, SQLWCHAR *szCatalogName, SQLSMALLINT cbCatalogName,
+                                SQLWCHAR *szSchemaName, SQLSMALLINT cbSchemaName, SQLWCHAR *szProcName,
+                                SQLSMALLINT cbProcName)
 {
-    struct SQLProceduresW_params params = { 0, CatalogName, NameLength1, SchemaName, NameLength2, ProcName,
-                                            NameLength3 };
-    struct handle *handle = StatementHandle;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p, CatalogName %s, NameLength1 %d, SchemaName %s, NameLength2 %d, ProcName %s,"
-          " NameLength3 %d)\n", StatementHandle, debugstr_wn(CatalogName, NameLength1), NameLength1,
-          debugstr_wn(SchemaName, NameLength2), NameLength2, debugstr_wn(ProcName, NameLength3), NameLength3);
+    FIXME("(hstmt %p, szCatalogName %s, cbCatalogName %d, szSchemaName %s, cbSchemaName %d, szProcName %s,"
+          " cbProcName %d)\n", hstmt, debugstr_wn(szCatalogName, cbCatalogName), cbCatalogName,
+          debugstr_wn(szSchemaName, cbSchemaName), cbSchemaName, debugstr_wn(szProcName, cbProcName), cbProcName);
 
-    if (!handle) return SQL_INVALID_HANDLE;
-
-    params.StatementHandle = handle->unix_handle;
-    ret = ODBC_CALL( SQLProceduresW, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
 /*************************************************************************
  *				SQLTablePrivilegesW          [ODBC32.170]
  */
-SQLRETURN WINAPI SQLTablePrivilegesW(SQLHSTMT StatementHandle, SQLWCHAR *CatalogName, SQLSMALLINT NameLength1,
-                                     SQLWCHAR *SchemaName, SQLSMALLINT NameLength2, SQLWCHAR *TableName,
-                                     SQLSMALLINT NameLength3)
+SQLRETURN WINAPI SQLTablePrivilegesW(SQLHSTMT hstmt, SQLWCHAR *szCatalogName, SQLSMALLINT cbCatalogName,
+                                     SQLWCHAR *szSchemaName, SQLSMALLINT cbSchemaName, SQLWCHAR *szTableName,
+                                     SQLSMALLINT cbTableName)
 {
-    struct SQLTablePrivilegesW_params params = { 0, CatalogName, NameLength1, SchemaName, NameLength2, TableName,
-                                                 NameLength3 };
-    struct handle *handle = StatementHandle;
-    SQLRETURN ret;
-
-    TRACE("(StatementHandle %p, CatalogName %s, NameLength1 %d, SchemaName %s, NameLength2 %d, TableName %s,"
-          " NameLength3 %d)\n", StatementHandle, debugstr_wn(CatalogName, NameLength1), NameLength1,
-          debugstr_wn(SchemaName, NameLength2), NameLength2, debugstr_wn(TableName, NameLength3), NameLength3);
+    SQLRETURN ret = SQL_ERROR;
 
-    if (!handle) return SQL_INVALID_HANDLE;
+    FIXME("(hstmt %p, szCatalogName %s, cbCatalogName %d, szSchemaName %s, cbSchemaName %d, szTableName %s,"
+          " cbTableName %d)\n", hstmt, debugstr_wn(szCatalogName, cbCatalogName), cbCatalogName,
+          debugstr_wn(szSchemaName, cbSchemaName), cbSchemaName, debugstr_wn(szTableName, cbTableName), cbTableName);
 
-    params.StatementHandle = handle->unix_handle;
-    ret = ODBC_CALL( SQLTablePrivilegesW, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
 /*************************************************************************
  *				SQLDriversW          [ODBC32.171]
  */
-SQLRETURN WINAPI SQLDriversW(SQLHENV EnvironmentHandle, SQLUSMALLINT Direction, SQLWCHAR *DriverDescription,
-                             SQLSMALLINT BufferLength1, SQLSMALLINT *DescriptionLength, SQLWCHAR *DriverAttributes,
-                             SQLSMALLINT BufferLength2, SQLSMALLINT *AttributesLength)
+SQLRETURN WINAPI SQLDriversW(SQLHENV EnvironmentHandle, SQLUSMALLINT fDirection, SQLWCHAR *szDriverDesc,
+                             SQLSMALLINT cbDriverDescMax, SQLSMALLINT *pcbDriverDesc,
+                             SQLWCHAR *szDriverAttributes, SQLSMALLINT cbDriverAttrMax,
+                             SQLSMALLINT *pcbDriverAttr)
 {
-    struct SQLDriversW_params params = { 0, Direction, DriverDescription, BufferLength1, DescriptionLength,
-                                         DriverAttributes, BufferLength2, AttributesLength };
-    struct handle *handle = EnvironmentHandle;
-    SQLRETURN ret;
-
-    TRACE("(EnvironmentHandle %p, Direction %d, DriverDescription %p, BufferLength1 %d, DescriptionLength %p,"
-          " DriverAttributes %p, BufferLength2 %d, AttributesLength %p)\n", EnvironmentHandle, Direction,
-          DriverDescription, BufferLength1, DescriptionLength, DriverAttributes, BufferLength2, AttributesLength);
-
-    if (!handle) return SQL_INVALID_HANDLE;
-
-    params.EnvironmentHandle = handle->unix_handle;
-    ret = ODBC_CALL( SQLDriversW, &params );
+    SQLRETURN ret = SQL_NO_DATA;
 
-    if (ret == SQL_NO_DATA && Direction == SQL_FETCH_FIRST)
-        ERR_(winediag)("No ODBC drivers could be found. Check the settings for your libodbc provider.\n");
+    FIXME("(EnvironmentHandle %p, Direction %d, szDriverDesc %p, cbDriverDescMax %d, pcbDriverDesc %p,"
+          " DriverAttributes %p, cbDriverAttrMax %d, pcbDriverAttr %p)\n", EnvironmentHandle, fDirection,
+          szDriverDesc, cbDriverDescMax, pcbDriverDesc, szDriverAttributes, cbDriverAttrMax, pcbDriverAttr);
 
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -2855,18 +1762,11 @@ SQLRETURN WINAPI SQLDriversW(SQLHENV EnvironmentHandle, SQLUSMALLINT Direction,
 SQLRETURN WINAPI SQLSetDescFieldW(SQLHDESC DescriptorHandle, SQLSMALLINT RecNumber, SQLSMALLINT FieldIdentifier,
                                   SQLPOINTER Value, SQLINTEGER BufferLength)
 {
-    struct SQLSetDescFieldW_params params = { 0, RecNumber, FieldIdentifier, Value, BufferLength };
-    struct handle *handle = DescriptorHandle;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(DescriptorHandle %p, RecNumber %d, FieldIdentifier %d, Value %p, BufferLength %d)\n", DescriptorHandle,
+    FIXME("(DescriptorHandle %p, RecNumber %d, FieldIdentifier %d, Value %p, BufferLength %d)\n", DescriptorHandle,
           RecNumber, FieldIdentifier, Value, BufferLength);
 
-    if (!handle) return SQL_INVALID_HANDLE;
-
-    params.DescriptorHandle = handle->unix_handle;
-    ret = ODBC_CALL( SQLSetDescFieldW, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -2876,24 +1776,11 @@ SQLRETURN WINAPI SQLSetDescFieldW(SQLHDESC DescriptorHandle, SQLSMALLINT RecNumb
 SQLRETURN WINAPI SQLSetStmtAttrW(SQLHSTMT StatementHandle, SQLINTEGER Attribute, SQLPOINTER Value,
                                  SQLINTEGER StringLength)
 {
-    struct SQLSetStmtAttrW_params params = { 0, Attribute, Value, StringLength };
-    struct handle *handle = StatementHandle;
-    SQLRETURN ret;
-
-    TRACE("(StatementHandle %p, Attribute %d, Value %p, StringLength %d)\n", StatementHandle, Attribute,
-          Value, StringLength);
+    SQLRETURN ret = SQL_ERROR;
 
-    if (!handle) return SQL_INVALID_HANDLE;
-
-    params.StatementHandle = handle->unix_handle;
-    ret = ODBC_CALL( SQLSetStmtAttrW, &params );
-    if (ret == SQL_ERROR && (Attribute == SQL_ROWSET_SIZE || Attribute == SQL_ATTR_ROW_ARRAY_SIZE))
-    {
-        TRACE("CHEAT: returning SQL_SUCCESS to ADO\n");
-        return SQL_SUCCESS;
-    }
+    FIXME("(StatementHandle %p, Attribute %d, Value %p, StringLength %d)\n", StatementHandle, Attribute, Value,
+          StringLength);
 
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -2901,33 +1788,14 @@ SQLRETURN WINAPI SQLSetStmtAttrW(SQLHSTMT StatementHandle, SQLINTEGER Attribute,
  *				SQLGetDiagRecA           [ODBC32.236]
  */
 SQLRETURN WINAPI SQLGetDiagRecA(SQLSMALLINT HandleType, SQLHANDLE Handle, SQLSMALLINT RecNumber,
-                                SQLCHAR *SqlState, SQLINTEGER *NativeError, SQLCHAR *MessageText,
+                                SQLCHAR *Sqlstate, SQLINTEGER *NativeError, SQLCHAR *MessageText,
                                 SQLSMALLINT BufferLength, SQLSMALLINT *TextLength)
 {
-    return SQLGetDiagRec( HandleType, Handle, RecNumber, SqlState, NativeError, MessageText, BufferLength,
-                          TextLength );
-}
-
-/***********************************************************************
- * DllMain [Internal] Initializes the internal 'ODBC32.DLL'.
- */
-BOOL WINAPI DllMain(HINSTANCE hinstDLL, DWORD reason, LPVOID reserved)
-{
-    TRACE("proxy ODBC: %p,%lx,%p\n", hinstDLL, reason, reserved);
+    SQLRETURN ret = SQL_ERROR;
 
-    switch (reason)
-    {
-    case DLL_PROCESS_ATTACH:
-        DisableThreadLibraryCalls(hinstDLL);
-        if (!__wine_init_unix_call())
-        {
-            if (WINE_UNIX_CALL( process_attach, NULL )) __wine_unixlib_handle = 0;
-        }
-        break;
-
-    case DLL_PROCESS_DETACH:
-        if (reserved) break;
-    }
+    FIXME("(HandleType %d, Handle %p, RecNumber %d, Sqlstate %p, NativeError %p, MessageText %p, BufferLength %d,"
+          " TextLength %p)\n", HandleType, Handle, RecNumber, Sqlstate, NativeError, MessageText, BufferLength,
+          TextLength);
 
-    return TRUE;
+    return ret;
 }
diff --git a/dlls/odbc32/unixlib.c b/dlls/odbc32/unixlib.c
deleted file mode 100644
index dbc0da8d274..00000000000
--- a/dlls/odbc32/unixlib.c
+++ /dev/null
@@ -1,3673 +0,0 @@
-/*
- * Win32 ODBC functions
- *
- * Copyright 1999 Xiang Li, Corel Corporation
- *
- * This library is free software; you can redistribute it and/or
- * modify it under the terms of the GNU Lesser General Public
- * License as published by the Free Software Foundation; either
- * version 2.1 of the License, or (at your option) any later version.
- *
- * This library is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- * Lesser General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General Public
- * License along with this library; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
- */
-
-#if 0
-#pragma makedep unix
-#endif
-
-#include "config.h"
-
-#include <stdarg.h>
-#include <stdlib.h>
-#include <sys/types.h>
-#include <dlfcn.h>
-
-#include "ntstatus.h"
-#define WIN32_NO_STATUS
-#include "windef.h"
-#include "winbase.h"
-#include "winternl.h"
-#include "sql.h"
-#include "sqlucode.h"
-#include "sqlext.h"
-
-#include "wine/debug.h"
-#include "unixlib.h"
-
-WINE_DEFAULT_DEBUG_CHANNEL(odbc);
-
-static inline void init_unicode_string( UNICODE_STRING *str, const WCHAR *data, ULONG data_size )
-{
-    str->Length = str->MaximumLength = data_size;
-    str->Buffer = (WCHAR *)data;
-}
-
-static inline void ascii_to_unicode( WCHAR *dst, const char *src, size_t len )
-{
-    while (len--) *dst++ = (unsigned char)*src++;
-}
-
-static HANDLE create_hkcu_key( const WCHAR *path, ULONG path_size )
-{
-    NTSTATUS status;
-    char buffer[512 + ARRAY_SIZE("\\Registry\\User\\")];
-    WCHAR bufferW[512 + ARRAY_SIZE("\\Registry\\User\\")];
-    DWORD_PTR sid_data[(sizeof(TOKEN_USER) + SECURITY_MAX_SID_SIZE) / sizeof(DWORD_PTR)];
-    DWORD i, len = sizeof(sid_data);
-    SID *sid;
-    UNICODE_STRING str;
-    OBJECT_ATTRIBUTES attr;
-    HANDLE ret;
-
-    status = NtQueryInformationToken( GetCurrentThreadEffectiveToken(), TokenUser, sid_data, len, &len );
-    if (status) return NULL;
-
-    sid = ((TOKEN_USER *)sid_data)->User.Sid;
-    len = snprintf( buffer, sizeof(buffer), "\\Registry\\User\\S-%u-%u", sid->Revision,
-                   (int)MAKELONG( MAKEWORD( sid->IdentifierAuthority.Value[5], sid->IdentifierAuthority.Value[4] ),
-                                  MAKEWORD( sid->IdentifierAuthority.Value[3], sid->IdentifierAuthority.Value[2] )));
-    for (i = 0; i < sid->SubAuthorityCount; i++)
-        len += snprintf( buffer + len, sizeof(buffer) - len, "-%u", (int)sid->SubAuthority[i] );
-    buffer[len++] = '\\';
-
-    ascii_to_unicode( bufferW, buffer, len );
-    memcpy( bufferW + len, path, path_size );
-    init_unicode_string( &str, bufferW, len * sizeof(WCHAR) + path_size );
-    InitializeObjectAttributes( &attr, &str, OBJ_CASE_INSENSITIVE, 0, NULL );
-    if (!NtCreateKey( &ret, KEY_ALL_ACCESS, &attr, 0, NULL, 0, NULL )) return ret;
-    return NULL;
-}
-
-static HANDLE create_hklm_key( const WCHAR *path, ULONG path_size )
-{
-    static const WCHAR machineW[] = {'\\','R','e','g','i','s','t','r','y','\\','M','a','c','h','i','n','e','\\'};
-    OBJECT_ATTRIBUTES attr;
-    UNICODE_STRING str;
-    WCHAR bufferW[256 + ARRAY_SIZE(machineW)];
-    HANDLE ret;
-
-    memcpy( bufferW, machineW, sizeof(machineW) );
-    memcpy( bufferW + ARRAY_SIZE(machineW), path, path_size );
-    init_unicode_string( &str, bufferW, sizeof(machineW) + path_size );
-    InitializeObjectAttributes( &attr, &str, OBJ_CASE_INSENSITIVE, 0, NULL );
-    if (!NtCreateKey( &ret, KEY_ALL_ACCESS, &attr, 0, NULL, 0, NULL )) return ret;
-    return NULL;
-}
-
-static HANDLE create_key( HANDLE root, const WCHAR *path, ULONG path_size, ULONG options, ULONG *disposition )
-{
-    UNICODE_STRING name = { path_size, path_size, (WCHAR *)path };
-    OBJECT_ATTRIBUTES attr;
-    HANDLE ret;
-
-    attr.Length = sizeof(attr);
-    attr.RootDirectory = root;
-    attr.ObjectName = &name;
-    attr.Attributes = 0;
-    attr.SecurityDescriptor = NULL;
-    attr.SecurityQualityOfService = NULL;
-    if (NtCreateKey( &ret, MAXIMUM_ALLOWED, &attr, 0, NULL, options, disposition )) return NULL;
-    return ret;
-}
-
-static ULONG query_value( HANDLE key, const WCHAR *name, ULONG name_size, KEY_VALUE_PARTIAL_INFORMATION *info,
-                          ULONG size )
-{
-    UNICODE_STRING str = { name_size, name_size, (WCHAR *)name };
-    if (NtQueryValueKey( key, &str, KeyValuePartialInformation, info, size, &size )) return 0;
-    return size - FIELD_OFFSET(KEY_VALUE_PARTIAL_INFORMATION, Data);
-}
-
-static BOOL set_value( HANDLE key, const WCHAR *name, ULONG name_size, ULONG type, const void *value, ULONG count )
-{
-    UNICODE_STRING str = { name_size, name_size, (WCHAR *)name };
-    return !NtSetValueKey( key, &str, 0, type, value, count );
-}
-
-/***********************************************************************
- * odbc_replicate_odbcinst_to_registry
- *
- * Utility to odbc_replicate_odbcinst_to_registry() to replicate the drivers of the
- * ODBCINST.INI settings
- *
- * The driver settings are not replicated to the registry.  If we were to
- * replicate them we would need to decide whether to replicate all settings
- * or to do some translation; whether to remove any entries present only in
- * the windows registry, etc.
- */
-static void replicate_odbcinst_to_registry( SQLHENV env )
-{
-    static const WCHAR odbcW[] = {'S','o','f','t','w','a','r','e','\\','O','D','B','C'};
-    static const WCHAR odbcinstW[] = {'O','D','B','C','I','N','S','T','.','I','N','I'};
-    static const WCHAR driversW[] = {'O','D','B','C',' ','D','r','i','v','e','r','s'};
-    HANDLE key_odbc, key_odbcinst, key_drivers;
-    BOOL success = FALSE;
-
-    if (!(key_odbc = create_hklm_key( odbcW, sizeof(odbcW) ))) return;
-
-    if ((key_odbcinst = create_key( key_odbc, odbcinstW, sizeof(odbcinstW), 0, NULL )))
-    {
-        if ((key_drivers = create_key( key_odbcinst, driversW, sizeof(driversW), 0, NULL )))
-        {
-            SQLRETURN ret;
-            SQLUSMALLINT dir = SQL_FETCH_FIRST;
-            WCHAR desc [256];
-            SQLSMALLINT len;
-
-            success = TRUE;
-            while (SUCCESS((ret = SQLDriversW( env, dir, (SQLWCHAR *)desc, sizeof(desc), &len, NULL, 0, NULL ))))
-            {
-                dir = SQL_FETCH_NEXT;
-                if (len == lstrlenW( desc ))
-                {
-                    static const WCHAR installedW[] = {'I','n','s','t','a','l','l','e','d',0};
-                    HANDLE key_driver;
-                    WCHAR buffer[256];
-                    KEY_VALUE_PARTIAL_INFORMATION *info = (void *)buffer;
-
-                    if (!query_value( key_drivers, desc, len * sizeof(WCHAR), info, sizeof(buffer) ))
-                    {
-                        if (!set_value( key_drivers, desc, len * sizeof(WCHAR), REG_SZ, (const BYTE *)installedW,
-                                        sizeof(installedW) ))
-                        {
-                            TRACE( "error replicating driver %s\n", debugstr_w(desc) );
-                            success = FALSE;
-                        }
-                    }
-                    if ((key_driver = create_key( key_odbcinst, desc, lstrlenW( desc ) * sizeof(WCHAR), 0, NULL )))
-                        NtClose( key_driver );
-                    else
-                    {
-                        TRACE( "error ensuring driver key %s\n", debugstr_w(desc) );
-                        success = FALSE;
-                    }
-                }
-                else
-                {
-                    WARN( "unusually long driver name %s not replicated\n", debugstr_w(desc) );
-                    success = FALSE;
-                }
-            }
-            NtClose( key_drivers );
-        }
-        else TRACE( "error opening Drivers key\n" );
-
-        NtClose( key_odbcinst );
-    }
-    else TRACE( "error creating/opening ODBCINST.INI key\n" );
-
-    if (!success) WARN( "may not have replicated all ODBC drivers to the registry\n" );
-    NtClose( key_odbc );
-}
-
-/***********************************************************************
- * replicate_odbc_to_registry
- *
- * Utility to replicate_to_registry() to replicate either the USER or
- * SYSTEM data sources.
- *
- * For now simply place the "Driver description" (as returned by SQLDataSources)
- * into the registry as the driver.  This is enough to satisfy Crystal's
- * requirement that there be a driver entry.  (It doesn't seem to care what
- * the setting is).
- * A slightly more accurate setting would be to access the registry to find
- * the actual driver library for the given description (which appears to map
- * to one of the HKLM/Software/ODBC/ODBCINST.INI keys).  (If you do this note
- * that this will add a requirement that this function be called after
- * replicate_odbcinst_to_registry())
- */
-static void replicate_odbc_to_registry( BOOL is_user, SQLHENV env )
-{
-    static const WCHAR odbcW[] = {'S','o','f','t','w','a','r','e','\\','O','D','B','C'};
-    static const WCHAR odbciniW[] = {'O','D','B','C','.','I','N','I'};
-    HANDLE key_odbc, key_odbcini, key_source;
-    SQLRETURN ret;
-    SQLUSMALLINT dir;
-    WCHAR dsn[SQL_MAX_DSN_LENGTH + 1], desc[256];
-    SQLSMALLINT len_dsn, len_desc;
-    BOOL success = FALSE;
-    const char *which;
-
-    if (is_user)
-    {
-        key_odbc = create_hkcu_key( odbcW, sizeof(odbcW) );
-        which = "user";
-    }
-    else
-    {
-        key_odbc = create_hklm_key( odbcW, sizeof(odbcW) );
-        which = "system";
-    }
-    if (!key_odbc) return;
-
-    if ((key_odbcini = create_key( key_odbc, odbciniW, sizeof(odbciniW), 0, NULL )))
-    {
-        success = TRUE;
-        dir = is_user ? SQL_FETCH_FIRST_USER : SQL_FETCH_FIRST_SYSTEM;
-        while (SUCCESS((ret = SQLDataSourcesW( env, dir, (SQLWCHAR *)dsn, sizeof(dsn), &len_dsn, (SQLWCHAR *)desc,
-                                               sizeof(desc), &len_desc ))))
-        {
-            dir = SQL_FETCH_NEXT;
-            if (len_dsn == lstrlenW( dsn ) && len_desc == lstrlenW( desc ))
-            {
-                if ((key_source = create_key( key_odbcini, dsn, len_dsn * sizeof(WCHAR), 0, NULL )))
-                {
-                    static const WCHAR driverW[] = {'D','r','i','v','e','r'};
-                    WCHAR buffer[256];
-                    KEY_VALUE_PARTIAL_INFORMATION *info = (void *)buffer;
-                    ULONG size;
-
-                    if (!(size = query_value( key_source, driverW, sizeof(driverW), info, sizeof(buffer) )))
-                    {
-                        if (!set_value( key_source, driverW, sizeof(driverW), REG_SZ, (const BYTE *)desc,
-                                        len_desc * sizeof(WCHAR) ))
-                        {
-                            TRACE( "error replicating description of %s (%s)\n", debugstr_w(dsn), debugstr_w(desc) );
-                            success = FALSE;
-                        }
-                    }
-                    NtClose( key_source );
-                }
-                else
-                {
-                    TRACE( "error opening %s DSN key %s\n", which, debugstr_w(dsn) );
-                    success = FALSE;
-                }
-            }
-            else
-            {
-                WARN( "unusually long %s data source name %s (%s) not replicated\n", which, debugstr_w(dsn), debugstr_w(desc) );
-                success = FALSE;
-            }
-        }
-        NtClose( key_odbcini );
-    }
-    else TRACE( "error creating/opening %s ODBC.INI registry key\n", which );
-
-    if (!success) WARN( "may not have replicated all %s ODBC DSNs to the registry\n", which );
-    NtClose( key_odbc );
-}
-
-/***********************************************************************
- * replicate_to_registry
- *
- * Unfortunately some of the functions that Windows documents as being part
- * of the ODBC API it implements directly during compilation or something
- * in terms of registry access functions.
- * e.g. SQLGetInstalledDrivers queries the list at
- * HKEY_LOCAL_MACHINE\Software\ODBC\ODBCINST.INI\ODBC Drivers
- *
- * This function is called when the driver manager is loaded and is used
- * to replicate the appropriate details into the Wine registry
- */
-static void replicate_to_registry(void)
-{
-    SQLHENV env;
-    SQLRETURN ret;
-
-    if (!(ret = SQLAllocEnv( &env )))
-    {
-        replicate_odbcinst_to_registry( env );
-        replicate_odbc_to_registry( FALSE /* system dsn */, env );
-        replicate_odbc_to_registry( TRUE /* user dsn */, env );
-        SQLFreeEnv( env );
-    }
-    else
-    {
-        TRACE( "error %d opening an SQL environment\n", (int)ret );
-        WARN( "external ODBC settings have not been replicated to the Wine registry\n" );
-    }
-}
-
-static NTSTATUS odbc_process_attach( void *args )
-{
-    replicate_to_registry();
-    return STATUS_SUCCESS;
-}
-
-static NTSTATUS wrap_SQLAllocConnect( void *args )
-{
-    struct SQLAllocConnect_params *params = args;
-    return SQLAllocConnect( (SQLHENV)(ULONG_PTR)params->EnvironmentHandle, (SQLHDBC *)&params->ConnectionHandle );
-}
-
-static NTSTATUS wrap_SQLAllocEnv( void *args )
-{
-    struct SQLAllocEnv_params *params = args;
-    return SQLAllocEnv( (SQLHENV *)&params->EnvironmentHandle );
-}
-
-static NTSTATUS wrap_SQLAllocHandle( void *args )
-{
-    struct SQLAllocHandle_params *params = args;
-    return SQLAllocHandle( params->HandleType, (SQLHANDLE)(ULONG_PTR)params->InputHandle,
-                           (SQLHANDLE *)&params->OutputHandle );
-}
-
-static NTSTATUS wrap_SQLAllocHandleStd( void *args )
-{
-    struct SQLAllocHandleStd_params *params = args;
-    return SQLAllocHandleStd( params->HandleType, (SQLHANDLE)(ULONG_PTR)params->InputHandle,
-                              (SQLHANDLE *)&params->OutputHandle );
-}
-
-static NTSTATUS wrap_SQLAllocStmt( void *args )
-{
-    struct SQLAllocStmt_params *params = args;
-    return SQLAllocStmt( (SQLHDBC)(ULONG_PTR)params->ConnectionHandle, (SQLHSTMT *)&params->StatementHandle );
-}
-
-static NTSTATUS wrap_SQLBindCol( void *args )
-{
-    struct SQLBindCol_params *params = args;
-    return SQLBindCol( (SQLHSTMT)(ULONG_PTR)params->StatementHandle, params->ColumnNumber, params->TargetType,
-                       params->TargetValue, params->BufferLength, (SQLLEN *)(ULONG_PTR)params->StrLen_or_Ind );
-}
-
-static NTSTATUS wrap_SQLBindParam( void *args )
-{
-    struct SQLBindParam_params *params = args;
-    return SQLBindParam( (SQLHSTMT)(ULONG_PTR)params->StatementHandle, params->ParameterNumber, params->ValueType,
-                         params->ParameterType, params->LengthPrecision, params->ParameterScale,
-                         params->ParameterValue, (SQLLEN *)(ULONG_PTR)params->StrLen_or_Ind );
-}
-
-static NTSTATUS wrap_SQLBindParameter( void *args )
-{
-    struct SQLBindParameter_params *params = args;
-    return SQLBindParameter( (SQLHSTMT)(ULONG_PTR)params->StatementHandle, params->ParameterNumber,
-                             params->InputOutputType, params->ValueType, params->ParameterType, params->ColumnSize,
-                             params->DecimalDigits, params->ParameterValue, params->BufferLength,
-                             (SQLLEN *)(ULONG_PTR)params->StrLen_or_Ind );
-}
-
-static NTSTATUS wrap_SQLBrowseConnect( void *args )
-{
-    struct SQLBrowseConnect_params *params = args;
-    return SQLBrowseConnect( (SQLHDBC)(ULONG_PTR)params->ConnectionHandle, params->InConnectionString,
-                             params->StringLength1, params->OutConnectionString, params->BufferLength,
-                             params->StringLength2 );
-}
-
-static NTSTATUS wrap_SQLBrowseConnectW( void *args )
-{
-    struct SQLBrowseConnectW_params *params = args;
-    return SQLBrowseConnectW( (SQLHDBC)(ULONG_PTR)params->ConnectionHandle, params->InConnectionString,
-                              params->StringLength1, params->OutConnectionString, params->BufferLength,
-                              params->StringLength2 );
-}
-
-static NTSTATUS wrap_SQLBulkOperations( void *args )
-{
-    struct SQLBulkOperations_params *params = args;
-    return SQLBulkOperations( (SQLHSTMT)(ULONG_PTR)params->StatementHandle, params->Operation );
-}
-
-static NTSTATUS wrap_SQLCancel( void *args )
-{
-    struct SQLCancel_params *params = args;
-    return SQLCancel( (SQLHSTMT)(ULONG_PTR)params->StatementHandle );
-}
-
-static NTSTATUS wrap_SQLCloseCursor( void *args )
-{
-    struct SQLCloseCursor_params *params = args;
-    return SQLCloseCursor( (SQLHSTMT)(ULONG_PTR)params->StatementHandle );
-}
-
-static NTSTATUS wrap_SQLColAttribute( void *args )
-{
-    struct SQLColAttribute_params *params = args;
-    return SQLColAttribute( (SQLHSTMT)(ULONG_PTR)params->StatementHandle, params->ColumnNumber,
-                            params->FieldIdentifier, params->CharacterAttribute, params->BufferLength,
-                            params->StringLength, (SQLLEN *)(ULONG_PTR)params->NumericAttribute );
-}
-
-static NTSTATUS wrap_SQLColAttributeW( void *args )
-{
-    struct SQLColAttributeW_params *params = args;
-    return SQLColAttributeW( (SQLHSTMT)(ULONG_PTR)params->StatementHandle, params->ColumnNumber,
-                             params->FieldIdentifier, params->CharacterAttribute,
-                             params->BufferLength, params->StringLength,
-                             (SQLLEN *)(ULONG_PTR)params->NumericAttribute );
-}
-
-static NTSTATUS wrap_SQLColAttributes( void *args )
-{
-    struct SQLColAttributes_params *params = args;
-    return SQLColAttributes( (SQLHSTMT)(ULONG_PTR)params->StatementHandle, params->ColumnNumber,
-                             params->FieldIdentifier, params->CharacterAttributes, params->BufferLength,
-                             params->StringLength, (SQLLEN *)(ULONG_PTR)params->NumericAttributes );
-}
-
-static NTSTATUS wrap_SQLColAttributesW( void *args )
-{
-    struct SQLColAttributesW_params *params = args;
-    return SQLColAttributesW( (SQLHSTMT)(ULONG_PTR)params->StatementHandle, params->ColumnNumber,
-                              params->FieldIdentifier, params->CharacterAttributes, params->BufferLength,
-                              params->StringLength, (SQLLEN *)(ULONG_PTR)params->NumericAttributes );
-}
-
-static NTSTATUS wrap_SQLColumnPrivileges( void *args )
-{
-    struct SQLColumnPrivileges_params *params = args;
-    return SQLColumnPrivileges( (SQLHSTMT)(ULONG_PTR)params->StatementHandle, params->CatalogName,
-                                params->NameLength1, params->SchemaName, params->NameLength2,
-                                params->TableName, params->NameLength3, params->ColumnName, params->NameLength4 );
-}
-
-static NTSTATUS wrap_SQLColumnPrivilegesW( void *args )
-{
-    struct SQLColumnPrivilegesW_params *params = args;
-    return SQLColumnPrivilegesW( (SQLHSTMT)(ULONG_PTR)params->StatementHandle, params->CatalogName,
-                                 params->NameLength1, params->SchemaName, params->NameLength2,
-                                 params->TableName, params->NameLength3, params->ColumnName, params->NameLength4 );
-}
-
-static NTSTATUS wrap_SQLColumns( void *args )
-{
-    struct SQLColumns_params *params = args;
-    return SQLColumns( (SQLHSTMT)(ULONG_PTR)params->StatementHandle, params->CatalogName, params->NameLength1,
-                       params->SchemaName, params->NameLength2, params->TableName, params->NameLength3,
-                       params->ColumnName, params->NameLength4 );
-}
-
-static NTSTATUS wrap_SQLColumnsW( void *args )
-{
-    struct SQLColumnsW_params *params = args;
-    return SQLColumnsW( (SQLHSTMT)(ULONG_PTR)params->StatementHandle, params->CatalogName, params->NameLength1,
-                        params->SchemaName, params->NameLength2, params->TableName, params->NameLength3,
-                        params->ColumnName, params->NameLength4 );
-}
-
-static NTSTATUS wrap_SQLConnect( void *args )
-{
-    struct SQLConnect_params *params = args;
-    return SQLConnect( (SQLHDBC)(ULONG_PTR)params->ConnectionHandle, params->ServerName, params->NameLength1,
-                       params->UserName, params->NameLength2, params->Authentication, params->NameLength3 );
-}
-
-static NTSTATUS wrap_SQLConnectW( void *args )
-{
-    struct SQLConnectW_params *params = args;
-    return SQLConnectW( (SQLHDBC)(ULONG_PTR)params->ConnectionHandle, params->ServerName, params->NameLength1,
-                        params->UserName, params->NameLength2, params->Authentication, params->NameLength3 );
-}
-
-static NTSTATUS wrap_SQLCopyDesc( void *args )
-{
-    struct SQLCopyDesc_params *params = args;
-    return SQLCopyDesc( (SQLHDESC)(ULONG_PTR)params->SourceDescHandle, (SQLHDESC)(ULONG_PTR)params->TargetDescHandle );
-}
-
-static NTSTATUS wrap_SQLDataSources( void *args )
-{
-    struct SQLDataSources_params *params = args;
-    return SQLDataSources( (SQLHENV)(ULONG_PTR)params->EnvironmentHandle, params->Direction, params->ServerName,
-                           params->BufferLength1, params->NameLength1, params->Description,
-                           params->BufferLength2, params->NameLength2 );
-}
-
-static NTSTATUS wrap_SQLDataSourcesW( void *args )
-{
-    struct SQLDataSourcesW_params *params = args;
-    return SQLDataSourcesW( (SQLHENV)(ULONG_PTR)params->EnvironmentHandle, params->Direction, params->ServerName,
-                            params->BufferLength1, params->NameLength1, params->Description,
-                            params->BufferLength2, params->NameLength2 );
-}
-
-static NTSTATUS wrap_SQLDescribeCol( void *args )
-{
-    struct SQLDescribeCol_params *params = args;
-    return SQLDescribeCol( (SQLHSTMT)(ULONG_PTR)params->StatementHandle, params->ColumnNumber, params->ColumnName,
-                           params->BufferLength, params->NameLength, params->DataType,
-                           (SQLULEN *)(ULONG_PTR)params->ColumnSize, params->DecimalDigits, params->Nullable );
-}
-
-static NTSTATUS wrap_SQLDescribeColW( void *args )
-{
-    struct SQLDescribeColW_params *params = args;
-    return SQLDescribeColW( (SQLHSTMT)(ULONG_PTR)params->StatementHandle, params->ColumnNumber, params->ColumnName,
-                            params->BufferLength, params->NameLength, params->DataType,
-                            (SQLULEN *)(ULONG_PTR)params->ColumnSize, params->DecimalDigits, params->Nullable );
-}
-
-static NTSTATUS wrap_SQLDescribeParam( void *args )
-{
-    struct SQLDescribeParam_params *params = args;
-    return SQLDescribeParam( (SQLHSTMT)(ULONG_PTR)params->StatementHandle, params->ParameterNumber, params->DataType,
-                             (SQLULEN *)(ULONG_PTR)params->ParameterSize, params->DecimalDigits, params->Nullable );
-}
-
-static NTSTATUS wrap_SQLDisconnect( void *args )
-{
-    struct SQLDisconnect_params *params = args;
-    return SQLDisconnect( (SQLHDBC)(ULONG_PTR)params->ConnectionHandle );
-}
-
-static NTSTATUS wrap_SQLDriverConnect( void *args )
-{
-    struct SQLDriverConnect_params *params = args;
-    return SQLDriverConnect( (SQLHDBC)(ULONG_PTR)params->ConnectionHandle, (SQLHWND)(ULONG_PTR)params->WindowHandle,
-                             params->ConnectionString, params->Length, params->OutConnectionString,
-                             params->BufferLength, params->Length2, params->DriverCompletion );
-}
-
-static NTSTATUS wrap_SQLDriverConnectW( void *args )
-{
-    struct SQLDriverConnectW_params *params = args;
-    return SQLDriverConnectW( (SQLHDBC)(ULONG_PTR)params->ConnectionHandle, (SQLHWND)(ULONG_PTR)params->WindowHandle,
-                              params->InConnectionString, params->Length, params->OutConnectionString,
-                              params->BufferLength, params->Length2, params->DriverCompletion );
-}
-
-static NTSTATUS wrap_SQLDrivers( void *args )
-{
-    struct SQLDrivers_params *params = args;
-    return SQLDrivers( (SQLHENV)(ULONG_PTR)params->EnvironmentHandle, params->Direction, params->DriverDescription,
-                       params->BufferLength1, params->DescriptionLength, params->DriverAttributes,
-                       params->BufferLength2, params->AttributesLength );
-}
-
-static NTSTATUS wrap_SQLDriversW( void *args )
-{
-    struct SQLDriversW_params *params = args;
-    return SQLDriversW( (SQLHENV)(ULONG_PTR)params->EnvironmentHandle, params->Direction, params->DriverDescription,
-                        params->BufferLength1, params->DescriptionLength, params->DriverAttributes,
-                        params->BufferLength2, params->AttributesLength );
-}
-
-static NTSTATUS wrap_SQLEndTran( void *args )
-{
-    struct SQLEndTran_params *params = args;
-    return SQLEndTran( params->HandleType, (SQLHANDLE)(ULONG_PTR)params->Handle, params->CompletionType );
-}
-
-static NTSTATUS wrap_SQLError( void *args )
-{
-    struct SQLError_params *params = args;
-    return SQLError( (SQLHENV)(ULONG_PTR)params->EnvironmentHandle, (SQLHDBC)(ULONG_PTR)params->ConnectionHandle,
-                     (SQLHSTMT)(ULONG_PTR)params->StatementHandle, params->SqlState, params->NativeError,
-                     params->MessageText, params->BufferLength, params->TextLength );
-}
-
-static NTSTATUS wrap_SQLErrorW( void *args )
-{
-    struct SQLErrorW_params *params = args;
-    return SQLErrorW( (SQLHENV)(ULONG_PTR)params->EnvironmentHandle, (SQLHDBC)(ULONG_PTR)params->ConnectionHandle,
-                      (SQLHSTMT)(ULONG_PTR)params->StatementHandle, params->SqlState, params->NativeError,
-                      params->MessageText, params->BufferLength, params->TextLength );
-}
-
-static NTSTATUS wrap_SQLExecDirect( void *args )
-{
-    struct SQLExecDirect_params *params = args;
-    return SQLExecDirect( (SQLHSTMT)(ULONG_PTR)params->StatementHandle, params->StatementText, params->TextLength );
-}
-
-static NTSTATUS wrap_SQLExecDirectW( void *args )
-{
-    struct SQLExecDirectW_params *params = args;
-    return SQLExecDirectW( (SQLHSTMT)(ULONG_PTR)params->StatementHandle, params->StatementText, params->TextLength );
-}
-
-static NTSTATUS wrap_SQLExecute( void *args )
-{
-    struct SQLExecute_params *params = args;
-    return SQLExecute( (SQLHSTMT)(ULONG_PTR)params->StatementHandle );
-}
-
-static NTSTATUS wrap_SQLExtendedFetch( void *args )
-{
-    struct SQLExtendedFetch_params *params = args;
-    return SQLExtendedFetch( (SQLHSTMT)(ULONG_PTR)params->StatementHandle, params->FetchOrientation,
-                             params->FetchOffset, (SQLULEN *)(ULONG_PTR)params->RowCount, params->RowStatusArray );
-}
-
-static NTSTATUS wrap_SQLFetch( void *args )
-{
-    struct SQLFetch_params *params = args;
-    return SQLFetch( (SQLHSTMT)(ULONG_PTR)params->StatementHandle );
-}
-
-static NTSTATUS wrap_SQLFetchScroll( void *args )
-{
-    struct SQLFetchScroll_params *params = args;
-    return SQLFetchScroll( (SQLHSTMT)(ULONG_PTR)params->StatementHandle, params->FetchOrientation,
-                           params->FetchOffset );
-}
-
-static NTSTATUS wrap_SQLForeignKeys( void *args )
-{
-    struct SQLForeignKeys_params *params = args;
-    return SQLForeignKeys( (SQLHSTMT)(ULONG_PTR)params->StatementHandle, params->PkCatalogName,
-                           params->NameLength1, params->PkSchemaName, params->NameLength2,
-                           params->PkTableName, params->NameLength3, params->FkCatalogName,
-                           params->NameLength4, params->FkSchemaName, params->NameLength5,
-                           params->FkTableName, params->NameLength6 );
-}
-
-static NTSTATUS wrap_SQLForeignKeysW( void *args )
-{
-    struct SQLForeignKeysW_params *params = args;
-    return SQLForeignKeysW( (SQLHSTMT)(ULONG_PTR)params->StatementHandle, params->PkCatalogName,
-                            params->NameLength1, params->PkSchemaName, params->NameLength2,
-                            params->PkTableName, params->NameLength3, params->FkCatalogName,
-                            params->NameLength4, params->FkSchemaName, params->NameLength5,
-                            params->FkTableName, params->NameLength6 );
-}
-
-static NTSTATUS wrap_SQLFreeConnect( void *args )
-{
-    struct SQLFreeConnect_params *params = args;
-    return SQLFreeConnect( (SQLHDBC)(ULONG_PTR)params->ConnectionHandle );
-}
-
-static NTSTATUS wrap_SQLFreeEnv( void *args )
-{
-    struct SQLFreeEnv_params *params = args;
-    return SQLFreeEnv( (SQLHENV)(ULONG_PTR)params->EnvironmentHandle );
-}
-
-static NTSTATUS wrap_SQLFreeHandle( void *args )
-{
-    struct SQLFreeHandle_params *params = args;
-    return SQLFreeHandle( params->HandleType, (SQLHANDLE)(ULONG_PTR)params->Handle );
-}
-
-static NTSTATUS wrap_SQLFreeStmt( void *args )
-{
-    struct SQLFreeStmt_params *params = args;
-    return SQLFreeStmt( (SQLHSTMT)(ULONG_PTR)params->StatementHandle, params->Option );
-}
-
-static NTSTATUS wrap_SQLGetConnectAttr( void *args )
-{
-    struct SQLGetConnectAttr_params *params = args;
-    return SQLGetConnectAttr( (SQLHDBC)(ULONG_PTR)params->ConnectionHandle, params->Attribute, params->Value,
-                              params->BufferLength, params->StringLength );
-}
-
-static NTSTATUS wrap_SQLGetConnectAttrW( void *args )
-{
-    struct SQLGetConnectAttrW_params *params = args;
-    return SQLGetConnectAttrW( (SQLHDBC)(ULONG_PTR)params->ConnectionHandle, params->Attribute, params->Value,
-                               params->BufferLength, params->StringLength );
-}
-
-static NTSTATUS wrap_SQLGetConnectOption( void *args )
-{
-    struct SQLGetConnectOption_params *params = args;
-    return SQLGetConnectOption( (SQLHDBC)(ULONG_PTR)params->ConnectionHandle, params->Option, params->Value );
-}
-
-static NTSTATUS wrap_SQLGetConnectOptionW( void *args )
-{
-    struct SQLGetConnectOptionW_params *params = args;
-    return SQLGetConnectOptionW( (SQLHDBC)(ULONG_PTR)params->ConnectionHandle, params->Option, params->Value );
-}
-
-static NTSTATUS wrap_SQLGetCursorName( void *args )
-{
-    struct SQLGetCursorName_params *params = args;
-    return SQLGetCursorName( (SQLHSTMT)(ULONG_PTR)params->StatementHandle, params->CursorName, params->BufferLength,
-                             params->NameLength );
-}
-
-static NTSTATUS wrap_SQLGetCursorNameW( void *args )
-{
-    struct SQLGetCursorNameW_params *params = args;
-    return SQLGetCursorNameW( (SQLHSTMT)(ULONG_PTR)params->StatementHandle, params->CursorName, params->BufferLength,
-                              params->NameLength );
-}
-
-static NTSTATUS wrap_SQLGetData( void *args )
-{
-    struct SQLGetData_params *params = args;
-    return SQLGetData( (SQLHSTMT)(ULONG_PTR)params->StatementHandle, params->ColumnNumber, params->TargetType,
-                       params->TargetValue, params->BufferLength, (SQLLEN *)(ULONG_PTR)params->StrLen_or_Ind );
-}
-
-static NTSTATUS wrap_SQLGetDescField( void *args )
-{
-    struct SQLGetDescField_params *params = args;
-    return SQLGetDescField( (SQLHDESC)(ULONG_PTR)params->DescriptorHandle, params->RecNumber, params->FieldIdentifier,
-                            params->Value, params->BufferLength, params->StringLength );
-}
-
-static NTSTATUS wrap_SQLGetDescFieldW( void *args )
-{
-    struct SQLGetDescFieldW_params *params = args;
-    return SQLGetDescFieldW( (SQLHDESC)(ULONG_PTR)params->DescriptorHandle, params->RecNumber, params->FieldIdentifier,
-                             params->Value, params->BufferLength, params->StringLength );
-}
-
-static NTSTATUS wrap_SQLGetDescRec( void *args )
-{
-    struct SQLGetDescRec_params *params = args;
-    return SQLGetDescRec( (SQLHDESC)(ULONG_PTR)params->DescriptorHandle, params->RecNumber, params->Name,
-                          params->BufferLength, params->StringLength, params->Type, params->SubType,
-                          (SQLLEN *)(ULONG_PTR)params->Length, params->Precision, params->Scale, params->Nullable );
-}
-
-static NTSTATUS wrap_SQLGetDescRecW( void *args )
-{
-    struct SQLGetDescRecW_params *params = args;
-    return SQLGetDescRecW( (SQLHDESC)(ULONG_PTR)params->DescriptorHandle, params->RecNumber, params->Name,
-                           params->BufferLength, params->StringLength, params->Type, params->SubType,
-                           (SQLLEN *)(ULONG_PTR)params->Length, params->Precision, params->Scale, params->Nullable );
-}
-
-static NTSTATUS wrap_SQLGetDiagField( void *args )
-{
-    struct SQLGetDiagField_params *params = args;
-    return SQLGetDiagField( params->HandleType, (SQLHANDLE)(ULONG_PTR)params->Handle, params->RecNumber,
-                            params->DiagIdentifier, params->DiagInfo, params->BufferLength, params->StringLength );
-}
-
-static NTSTATUS wrap_SQLGetDiagFieldW( void *args )
-{
-    struct SQLGetDiagFieldW_params *params = args;
-    return SQLGetDiagFieldW( params->HandleType, (SQLHANDLE)(ULONG_PTR)params->Handle, params->RecNumber,
-                             params->DiagIdentifier, params->DiagInfo, params->BufferLength, params->StringLength );
-}
-
-static NTSTATUS wrap_SQLGetDiagRec( void *args )
-{
-    struct SQLGetDiagRec_params *params = args;
-    return SQLGetDiagRec( params->HandleType, (SQLHANDLE)(ULONG_PTR)params->Handle, params->RecNumber, params->SqlState,
-                          params->NativeError, params->MessageText, params->BufferLength, params->TextLength );
-}
-
-static NTSTATUS wrap_SQLGetDiagRecW( void *args )
-{
-    struct SQLGetDiagRecW_params *params = args;
-    return SQLGetDiagRecW( params->HandleType, (SQLHANDLE)(ULONG_PTR)params->Handle, params->RecNumber, params->SqlState,
-                           params->NativeError, params->MessageText, params->BufferLength, params->TextLength );
-}
-
-static NTSTATUS wrap_SQLGetEnvAttr( void *args )
-{
-    struct SQLGetEnvAttr_params *params = args;
-    return SQLGetEnvAttr( (SQLHENV)(ULONG_PTR)params->EnvironmentHandle, params->Attribute,
-                          params->Value, params->BufferLength, params->StringLength );
-}
-
-static NTSTATUS wrap_SQLGetFunctions( void *args )
-{
-    struct SQLGetFunctions_params *params = args;
-    return SQLGetFunctions( (SQLHDBC)(ULONG_PTR)params->ConnectionHandle, params->FunctionId, params->Supported );
-}
-
-static NTSTATUS wrap_SQLGetInfo( void *args )
-{
-    struct SQLGetInfo_params *params = args;
-    return SQLGetInfo( (SQLHDBC)(ULONG_PTR)params->ConnectionHandle, params->InfoType, params->InfoValue,
-                       params->BufferLength, params->StringLength );
-}
-
-static NTSTATUS wrap_SQLGetInfoW( void *args )
-{
-    struct SQLGetInfoW_params *params = args;
-    return SQLGetInfoW( (SQLHDBC)(ULONG_PTR)params->ConnectionHandle, params->InfoType, params->InfoValue,
-                        params->BufferLength, params->StringLength );
-}
-
-static NTSTATUS wrap_SQLGetStmtAttr( void *args )
-{
-    struct SQLGetStmtAttr_params *params = args;
-    return SQLGetStmtAttr( (SQLHSTMT)(ULONG_PTR)params->StatementHandle, params->Attribute, params->Value,
-                           params->BufferLength, params->StringLength );
-}
-
-static NTSTATUS wrap_SQLGetStmtAttrW( void *args )
-{
-    struct SQLGetStmtAttrW_params *params = args;
-    return SQLGetStmtAttrW( (SQLHSTMT)(ULONG_PTR)params->StatementHandle, params->Attribute, params->Value,
-                            params->BufferLength, params->StringLength );
-}
-
-static NTSTATUS wrap_SQLGetStmtOption( void *args )
-{
-    struct SQLGetStmtOption_params *params = args;
-    return SQLGetStmtOption( (SQLHSTMT)(ULONG_PTR)params->StatementHandle, params->Option, params->Value );
-}
-
-static NTSTATUS wrap_SQLGetTypeInfo( void *args )
-{
-    struct SQLGetTypeInfo_params *params = args;
-    return SQLGetTypeInfo( (SQLHSTMT)(ULONG_PTR)params->StatementHandle, params->DataType );
-}
-
-static NTSTATUS wrap_SQLGetTypeInfoW( void *args )
-{
-    struct SQLGetTypeInfoW_params *params = args;
-    return SQLGetTypeInfoW( (SQLHSTMT)(ULONG_PTR)params->StatementHandle, params->DataType );
-}
-
-static NTSTATUS wrap_SQLMoreResults( void *args )
-{
-    struct SQLMoreResults_params *params = args;
-    return SQLMoreResults( (SQLHSTMT)(ULONG_PTR)params->StatementHandle );
-}
-
-static NTSTATUS wrap_SQLNativeSql( void *args )
-{
-    struct SQLNativeSql_params *params = args;
-    return SQLNativeSql( (SQLHDBC)(ULONG_PTR)params->ConnectionHandle, params->InStatementText, params->TextLength1,
-                         params->OutStatementText, params->BufferLength, params->TextLength2 );
-}
-
-static NTSTATUS wrap_SQLNativeSqlW( void *args )
-{
-    struct SQLNativeSqlW_params *params = args;
-    return SQLNativeSqlW( (SQLHDBC)(ULONG_PTR)params->ConnectionHandle, params->InStatementText, params->TextLength1,
-                          params->OutStatementText, params->BufferLength, params->TextLength2 );
-}
-
-static NTSTATUS wrap_SQLNumParams( void *args )
-{
-    struct SQLNumParams_params *params = args;
-    return SQLNumParams( (SQLHSTMT)(ULONG_PTR)params->StatementHandle, params->ParameterCount );
-}
-
-static NTSTATUS wrap_SQLNumResultCols( void *args )
-{
-    struct SQLNumResultCols_params *params = args;
-    return SQLNumResultCols( (SQLHSTMT)(ULONG_PTR)params->StatementHandle, params->ColumnCount );
-}
-
-static NTSTATUS wrap_SQLParamData( void *args )
-{
-    struct SQLParamData_params *params = args;
-    return SQLParamData( (SQLHSTMT)(ULONG_PTR)params->StatementHandle, params->Value );
-}
-
-static NTSTATUS wrap_SQLParamOptions( void *args )
-{
-    struct SQLParamOptions_params *params = args;
-    return SQLParamOptions( (SQLHSTMT)(ULONG_PTR)params->StatementHandle, params->RowCount,
-                            (SQLULEN *)(ULONG_PTR)params->RowNumber );
-}
-
-static NTSTATUS wrap_SQLPrepare( void *args )
-{
-    struct SQLPrepare_params *params = args;
-    return SQLPrepare( (SQLHSTMT)(ULONG_PTR)params->StatementHandle, params->StatementText, params->TextLength );
-}
-
-static NTSTATUS wrap_SQLPrepareW( void *args )
-{
-    struct SQLPrepareW_params *params = args;
-    return SQLPrepareW( (SQLHSTMT)(ULONG_PTR)params->StatementHandle, params->StatementText, params->TextLength );
-}
-
-static NTSTATUS wrap_SQLPrimaryKeys( void *args )
-{
-    struct SQLPrimaryKeys_params *params = args;
-    return SQLPrimaryKeys( (SQLHSTMT)(ULONG_PTR)params->StatementHandle, params->CatalogName, params->NameLength1,
-                           params->SchemaName, params->NameLength2, params->TableName, params->NameLength3 );
-}
-
-static NTSTATUS wrap_SQLPrimaryKeysW( void *args )
-{
-    struct SQLPrimaryKeysW_params *params = args;
-    return SQLPrimaryKeysW( (SQLHSTMT)(ULONG_PTR)params->StatementHandle, params->CatalogName, params->NameLength1,
-                            params->SchemaName, params->NameLength2, params->TableName, params->NameLength3 );
-}
-
-static NTSTATUS wrap_SQLProcedureColumns( void *args )
-{
-    struct SQLProcedureColumns_params *params = args;
-    return SQLProcedureColumns( (SQLHSTMT)(ULONG_PTR)params->StatementHandle, params->CatalogName,
-                                params->NameLength1, params->SchemaName, params->NameLength2, params->ProcName,
-                                params->NameLength3, params->ColumnName, params->NameLength4 );
-}
-
-static NTSTATUS wrap_SQLProcedureColumnsW( void *args )
-{
-    struct SQLProcedureColumnsW_params *params = args;
-    return SQLProcedureColumnsW( (SQLHSTMT)(ULONG_PTR)params->StatementHandle, params->CatalogName,
-                                 params->NameLength1, params->SchemaName, params->NameLength2, params->ProcName,
-                                 params->NameLength3, params->ColumnName, params->NameLength4 );
-}
-
-static NTSTATUS wrap_SQLProcedures( void *args )
-{
-    struct SQLProcedures_params *params = args;
-    return SQLProcedures( (SQLHSTMT)(ULONG_PTR)params->StatementHandle, params->CatalogName, params->NameLength1,
-                          params->SchemaName, params->NameLength2, params->ProcName, params->NameLength3 );
-}
-
-static NTSTATUS wrap_SQLProceduresW( void *args )
-{
-    struct SQLProceduresW_params *params = args;
-    return SQLProceduresW( (SQLHSTMT)(ULONG_PTR)params->StatementHandle, params->CatalogName, params->NameLength1,
-                           params->SchemaName, params->NameLength2, params->ProcName, params->NameLength3 );
-}
-
-static NTSTATUS wrap_SQLPutData( void *args )
-{
-    struct SQLPutData_params *params = args;
-    return SQLPutData( (SQLHSTMT)(ULONG_PTR)params->StatementHandle, params->Data, params->StrLen_or_Ind );
-}
-
-static NTSTATUS wrap_SQLRowCount( void *args )
-{
-    struct SQLRowCount_params *params = args;
-    return SQLRowCount( (SQLHSTMT)(ULONG_PTR)params->StatementHandle, (SQLLEN *)(ULONG_PTR)params->RowCount );
-}
-
-static NTSTATUS wrap_SQLSetConnectAttr( void *args )
-{
-    struct SQLSetConnectAttr_params *params = args;
-    return SQLSetConnectAttr( (SQLHDBC)(ULONG_PTR)params->ConnectionHandle, params->Attribute, params->Value,
-                              params->StringLength );
-}
-
-static NTSTATUS wrap_SQLSetConnectAttrW( void *args )
-{
-    struct SQLSetConnectAttrW_params *params = args;
-    return SQLSetConnectAttrW( (SQLHDBC)(ULONG_PTR)params->ConnectionHandle, params->Attribute, params->Value,
-                               params->StringLength );
-}
-
-static NTSTATUS wrap_SQLSetConnectOption( void *args )
-{
-    struct SQLSetConnectOption_params *params = args;
-    return SQLSetConnectOption( (SQLHDBC)(ULONG_PTR)params->ConnectionHandle, params->Option, params->Value );
-}
-
-static NTSTATUS wrap_SQLSetConnectOptionW( void *args )
-{
-    struct SQLSetConnectOptionW_params *params = args;
-    return SQLSetConnectOptionW( (SQLHDBC)(ULONG_PTR)params->ConnectionHandle, params->Option, params->Value );
-}
-
-static NTSTATUS wrap_SQLSetCursorName( void *args )
-{
-    struct SQLSetCursorName_params *params = args;
-    return SQLSetCursorName( (SQLHSTMT)(ULONG_PTR)params->StatementHandle, params->CursorName, params->NameLength );
-}
-
-static NTSTATUS wrap_SQLSetCursorNameW( void *args )
-{
-    struct SQLSetCursorNameW_params *params = args;
-    return SQLSetCursorNameW( (SQLHSTMT)(ULONG_PTR)params->StatementHandle, params->CursorName, params->NameLength );
-}
-
-static NTSTATUS wrap_SQLSetDescField( void *args )
-{
-    struct SQLSetDescField_params *params = args;
-    return SQLSetDescField( (SQLHDESC)(ULONG_PTR)params->DescriptorHandle, params->RecNumber, params->FieldIdentifier,
-                            params->Value, params->BufferLength );
-}
-
-static NTSTATUS wrap_SQLSetDescFieldW( void *args )
-{
-    struct SQLSetDescFieldW_params *params = args;
-    return SQLSetDescFieldW( (SQLHDESC)(ULONG_PTR)params->DescriptorHandle, params->RecNumber, params->FieldIdentifier,
-                             params->Value, params->BufferLength );
-}
-
-static NTSTATUS wrap_SQLSetDescRec( void *args )
-{
-    struct SQLSetDescRec_params *params = args;
-    return SQLSetDescRec( (SQLHDESC)(ULONG_PTR)params->DescriptorHandle, params->RecNumber, params->Type,
-                          params->SubType, params->Length, params->Precision, params->Scale,
-                          params->Data, (SQLLEN *)(ULONG_PTR)params->StringLength,
-                          (SQLLEN *)(ULONG_PTR)params->Indicator );
-}
-
-static NTSTATUS wrap_SQLSetEnvAttr( void *args )
-{
-    struct SQLSetEnvAttr_params *params = args;
-    return SQLSetEnvAttr( (SQLHENV)(ULONG_PTR)params->EnvironmentHandle, params->Attribute, params->Value,
-                          params->StringLength );
-}
-
-static NTSTATUS wrap_SQLSetParam( void *args )
-{
-    struct SQLSetParam_params *params = args;
-    return SQLSetParam( (SQLHSTMT)(ULONG_PTR)params->StatementHandle, params->ParameterNumber, params->ValueType,
-                        params->ParameterType, params->LengthPrecision, params->ParameterScale,
-                        params->ParameterValue, (SQLLEN *)(ULONG_PTR)params->StrLen_or_Ind );
-}
-
-static NTSTATUS wrap_SQLSetPos( void *args )
-{
-    struct SQLSetPos_params *params = args;
-    return SQLSetPos( (SQLHSTMT)(ULONG_PTR)params->StatementHandle, params->RowNumber, params->Operation,
-                      params->LockType );
-}
-
-static NTSTATUS wrap_SQLSetScrollOptions( void *args )
-{
-    struct SQLSetScrollOptions_params *params = args;
-    return SQLSetScrollOptions( (SQLHSTMT)(ULONG_PTR)params->StatementHandle, params->Concurrency,
-                                params->KeySetSize, params->RowSetSize );
-}
-
-static NTSTATUS wrap_SQLSetStmtAttr( void *args )
-{
-    struct SQLSetStmtAttr_params *params = args;
-    return SQLSetStmtAttr( (SQLHSTMT)(ULONG_PTR)params->StatementHandle, params->Attribute, params->Value,
-                           params->StringLength );
-}
-
-static NTSTATUS wrap_SQLSetStmtAttrW( void *args )
-{
-    struct SQLSetStmtAttrW_params *params = args;
-    return SQLSetStmtAttrW( (SQLHSTMT)(ULONG_PTR)params->StatementHandle, params->Attribute, params->Value,
-                            params->StringLength );
-}
-
-static NTSTATUS wrap_SQLSetStmtOption( void *args )
-{
-    struct SQLSetStmtOption_params *params = args;
-    return SQLSetStmtOption( (SQLHSTMT)(ULONG_PTR)params->StatementHandle, params->Option, params->Value );
-}
-
-static NTSTATUS wrap_SQLSpecialColumns( void *args )
-{
-    struct SQLSpecialColumns_params *params = args;
-    return SQLSpecialColumns( (SQLHSTMT)(ULONG_PTR)params->StatementHandle, params->IdentifierType,
-                              params->CatalogName, params->NameLength1, params->SchemaName, params->NameLength2,
-                              params->TableName, params->NameLength3, params->Scope, params->Nullable );
-}
-
-static NTSTATUS wrap_SQLSpecialColumnsW( void *args )
-{
-    struct SQLSpecialColumnsW_params *params = args;
-    return SQLSpecialColumnsW( (SQLHSTMT)(ULONG_PTR)params->StatementHandle, params->IdentifierType,
-                               params->CatalogName, params->NameLength1, params->SchemaName, params->NameLength2,
-                               params->TableName, params->NameLength3, params->Scope, params->Nullable );
-}
-
-static NTSTATUS wrap_SQLStatistics( void *args )
-{
-    struct SQLStatistics_params *params = args;
-    return SQLStatistics( (SQLHSTMT)(ULONG_PTR)params->StatementHandle, params->CatalogName, params->NameLength1,
-                          params->SchemaName, params->NameLength2, params->TableName,
-                          params->NameLength3, params->Unique, params->Reserved );
-}
-
-static NTSTATUS wrap_SQLStatisticsW( void *args )
-{
-    struct SQLStatisticsW_params *params = args;
-    return SQLStatisticsW( (SQLHSTMT)(ULONG_PTR)params->StatementHandle, params->CatalogName, params->NameLength1,
-                           params->SchemaName, params->NameLength2, params->TableName,
-                           params->NameLength3, params->Unique, params->Reserved );
-}
-
-static NTSTATUS wrap_SQLTablePrivileges( void *args )
-{
-    struct SQLTablePrivileges_params *params = args;
-    return SQLTablePrivileges( (SQLHSTMT)(ULONG_PTR)params->StatementHandle, params->CatalogName,
-                               params->NameLength1, params->SchemaName, params->NameLength2, params->TableName,
-                               params->NameLength3 );
-}
-
-static NTSTATUS wrap_SQLTablePrivilegesW( void *args )
-{
-    struct SQLTablePrivilegesW_params *params = args;
-    return SQLTablePrivilegesW( (SQLHSTMT)(ULONG_PTR)params->StatementHandle, params->CatalogName,
-                                params->NameLength1, params->SchemaName, params->NameLength2, params->TableName,
-                                params->NameLength3 );
-}
-
-static NTSTATUS wrap_SQLTables( void *args )
-{
-    struct SQLTables_params *params = args;
-    return SQLTables( (SQLHSTMT)(ULONG_PTR)params->StatementHandle, params->CatalogName, params->NameLength1,
-                      params->SchemaName, params->NameLength2, params->TableName,
-                      params->NameLength3, params->TableType, params->NameLength4 );
-}
-
-static NTSTATUS wrap_SQLTablesW( void *args )
-{
-    struct SQLTablesW_params *params = args;
-    return SQLTablesW( (SQLHSTMT)(ULONG_PTR)params->StatementHandle, params->CatalogName, params->NameLength1,
-                       params->SchemaName, params->NameLength2, params->TableName,
-                       params->NameLength3, params->TableType, params->NameLength4 );
-}
-
-static NTSTATUS wrap_SQLTransact( void *args )
-{
-    struct SQLTransact_params *params = args;
-    return SQLTransact( (SQLHENV)(ULONG_PTR)params->EnvironmentHandle, (SQLHDBC)(ULONG_PTR)params->ConnectionHandle,
-                        params->CompletionType );
-}
-
-const unixlib_entry_t __wine_unix_call_funcs[] =
-{
-    odbc_process_attach,
-    wrap_SQLAllocConnect,
-    wrap_SQLAllocEnv,
-    wrap_SQLAllocHandle,
-    wrap_SQLAllocHandleStd,
-    wrap_SQLAllocStmt,
-    wrap_SQLBindCol,
-    wrap_SQLBindParam,
-    wrap_SQLBindParameter,
-    wrap_SQLBrowseConnect,
-    wrap_SQLBrowseConnectW,
-    wrap_SQLBulkOperations,
-    wrap_SQLCancel,
-    wrap_SQLCloseCursor,
-    wrap_SQLColAttribute,
-    wrap_SQLColAttributeW,
-    wrap_SQLColAttributes,
-    wrap_SQLColAttributesW,
-    wrap_SQLColumnPrivileges,
-    wrap_SQLColumnPrivilegesW,
-    wrap_SQLColumns,
-    wrap_SQLColumnsW,
-    wrap_SQLConnect,
-    wrap_SQLConnectW,
-    wrap_SQLCopyDesc,
-    wrap_SQLDataSources,
-    wrap_SQLDataSourcesW,
-    wrap_SQLDescribeCol,
-    wrap_SQLDescribeColW,
-    wrap_SQLDescribeParam,
-    wrap_SQLDisconnect,
-    wrap_SQLDriverConnect,
-    wrap_SQLDriverConnectW,
-    wrap_SQLDrivers,
-    wrap_SQLDriversW,
-    wrap_SQLEndTran,
-    wrap_SQLError,
-    wrap_SQLErrorW,
-    wrap_SQLExecDirect,
-    wrap_SQLExecDirectW,
-    wrap_SQLExecute,
-    wrap_SQLExtendedFetch,
-    wrap_SQLFetch,
-    wrap_SQLFetchScroll,
-    wrap_SQLForeignKeys,
-    wrap_SQLForeignKeysW,
-    wrap_SQLFreeConnect,
-    wrap_SQLFreeEnv,
-    wrap_SQLFreeHandle,
-    wrap_SQLFreeStmt,
-    wrap_SQLGetConnectAttr,
-    wrap_SQLGetConnectAttrW,
-    wrap_SQLGetConnectOption,
-    wrap_SQLGetConnectOptionW,
-    wrap_SQLGetCursorName,
-    wrap_SQLGetCursorNameW,
-    wrap_SQLGetData,
-    wrap_SQLGetDescField,
-    wrap_SQLGetDescFieldW,
-    wrap_SQLGetDescRec,
-    wrap_SQLGetDescRecW,
-    wrap_SQLGetDiagField,
-    wrap_SQLGetDiagFieldW,
-    wrap_SQLGetDiagRec,
-    wrap_SQLGetDiagRecW,
-    wrap_SQLGetEnvAttr,
-    wrap_SQLGetFunctions,
-    wrap_SQLGetInfo,
-    wrap_SQLGetInfoW,
-    wrap_SQLGetStmtAttr,
-    wrap_SQLGetStmtAttrW,
-    wrap_SQLGetStmtOption,
-    wrap_SQLGetTypeInfo,
-    wrap_SQLGetTypeInfoW,
-    wrap_SQLMoreResults,
-    wrap_SQLNativeSql,
-    wrap_SQLNativeSqlW,
-    wrap_SQLNumParams,
-    wrap_SQLNumResultCols,
-    wrap_SQLParamData,
-    wrap_SQLParamOptions,
-    wrap_SQLPrepare,
-    wrap_SQLPrepareW,
-    wrap_SQLPrimaryKeys,
-    wrap_SQLPrimaryKeysW,
-    wrap_SQLProcedureColumns,
-    wrap_SQLProcedureColumnsW,
-    wrap_SQLProcedures,
-    wrap_SQLProceduresW,
-    wrap_SQLPutData,
-    wrap_SQLRowCount,
-    wrap_SQLSetConnectAttr,
-    wrap_SQLSetConnectAttrW,
-    wrap_SQLSetConnectOption,
-    wrap_SQLSetConnectOptionW,
-    wrap_SQLSetCursorName,
-    wrap_SQLSetCursorNameW,
-    wrap_SQLSetDescField,
-    wrap_SQLSetDescFieldW,
-    wrap_SQLSetDescRec,
-    wrap_SQLSetEnvAttr,
-    wrap_SQLSetParam,
-    wrap_SQLSetPos,
-    wrap_SQLSetScrollOptions,
-    wrap_SQLSetStmtAttr,
-    wrap_SQLSetStmtAttrW,
-    wrap_SQLSetStmtOption,
-    wrap_SQLSpecialColumns,
-    wrap_SQLSpecialColumnsW,
-    wrap_SQLStatistics,
-    wrap_SQLStatisticsW,
-    wrap_SQLTablePrivileges,
-    wrap_SQLTablePrivilegesW,
-    wrap_SQLTables,
-    wrap_SQLTablesW,
-    wrap_SQLTransact,
-};
-
-C_ASSERT( ARRAYSIZE( __wine_unix_call_funcs) == unix_funcs_count );
-
-#ifdef _WIN64
-
-typedef ULONG PTR32;
-
-static NTSTATUS wow64_SQLBindCol( void *args )
-{
-    struct
-    {
-        UINT64 StatementHandle;
-        INT16  ColumnNumber;
-        INT16  TargetType;
-        PTR32  TargetValue;
-        INT64  BufferLength;
-        PTR32  StrLen_or_Ind;
-    } const *params32 = args;
-
-    struct SQLBindCol_params params =
-    {
-        params32->StatementHandle,
-        params32->ColumnNumber,
-        params32->TargetType,
-        ULongToPtr(params32->TargetValue),
-        params32->BufferLength,
-        ULongToPtr(params32->StrLen_or_Ind)
-    };
-
-    return wrap_SQLBindCol( &params );
-}
-
-static NTSTATUS wow64_SQLBindParam( void *args )
-{
-    struct
-    {
-        UINT64 StatementHandle;
-        UINT16 ParameterNumber;
-        INT16  ValueType;
-        INT16  ParameterType;
-        UINT64 LengthPrecision;
-        INT16  ParameterScale;
-        PTR32  ParameterValue;
-        PTR32  StrLen_or_Ind;
-    } const *params32 = args;
-
-    struct SQLBindParam_params params =
-    {
-        params32->StatementHandle,
-        params32->ParameterNumber,
-        params32->ValueType,
-        params32->ParameterType,
-        params32->LengthPrecision,
-        params32->ParameterScale,
-        ULongToPtr(params32->ParameterValue),
-        ULongToPtr(params32->StrLen_or_Ind)
-    };
-
-    return wrap_SQLBindParam( &params );
-}
-
-static NTSTATUS wow64_SQLBindParameter( void *args )
-{
-    struct
-    {
-        UINT64 StatementHandle;
-        UINT16 ParameterNumber;
-        INT16  InputOutputType;
-        INT16  ValueType;
-        INT16  ParameterType;
-        UINT64 ColumnSize;
-        INT16  DecimalDigits;
-        PTR32  ParameterValue;
-        INT64  BufferLength;
-        PTR32  StrLen_or_Ind;
-    } const *params32 = args;
-
-    struct SQLBindParameter_params params =
-    {
-        params32->StatementHandle,
-        params32->ParameterNumber,
-        params32->InputOutputType,
-        params32->ValueType,
-        params32->ParameterType,
-        params32->ColumnSize,
-        params32->DecimalDigits,
-        ULongToPtr(params32->ParameterValue),
-        params32->BufferLength,
-        ULongToPtr(params32->StrLen_or_Ind)
-    };
-
-    return wrap_SQLBindParameter( &params );
-}
-
-static NTSTATUS wow64_SQLBrowseConnect( void *args )
-{
-    struct
-    {
-        UINT64 ConnectionHandle;
-        PTR32  InConnectionString;
-        INT16  StringLength1;
-        PTR32  OutConnectionString;
-        INT16  BufferLength;
-        PTR32  StringLength2;
-    } const *params32 = args;
-
-    struct SQLBrowseConnect_params params =
-    {
-        params32->ConnectionHandle,
-        ULongToPtr(params32->InConnectionString),
-        params32->StringLength1,
-        ULongToPtr(params32->OutConnectionString),
-        params32->BufferLength,
-        ULongToPtr(params32->StringLength2)
-    };
-
-    return wrap_SQLBrowseConnect( &params );
-}
-
-static NTSTATUS wow64_SQLBrowseConnectW( void *args )
-{
-    struct
-    {
-        UINT64 ConnectionHandle;
-        PTR32  InConnectionString;
-        INT16  StringLength1;
-        PTR32  OutConnectionString;
-        INT16  BufferLength;
-        PTR32  StringLength2;
-    } const *params32 = args;
-
-    struct SQLBrowseConnectW_params params =
-    {
-        params32->ConnectionHandle,
-        ULongToPtr(params32->InConnectionString),
-        params32->StringLength1,
-        ULongToPtr(params32->OutConnectionString),
-        params32->BufferLength,
-        ULongToPtr(params32->StringLength2)
-    };
-
-    return wrap_SQLBrowseConnectW( &params );
-}
-
-static NTSTATUS wow64_SQLColAttribute( void *args )
-{
-    struct
-    {
-        UINT64 StatementHandle;
-        UINT16 ColumnNumber;
-        UINT16 FieldIdentifier;
-        PTR32  CharacterAttribute;
-        INT16  BufferLength;
-        PTR32  StringLength;
-        PTR32  NumericAttribute;
-    } const *params32 = args;
-
-    struct SQLColAttribute_params params =
-    {
-        params32->StatementHandle,
-        params32->ColumnNumber,
-        params32->FieldIdentifier,
-        ULongToPtr(params32->CharacterAttribute),
-        params32->BufferLength,
-        ULongToPtr(params32->StringLength),
-        ULongToPtr(params32->NumericAttribute)
-    };
-
-    return wrap_SQLColAttribute( &params );
-}
-
-static NTSTATUS wow64_SQLColAttributeW( void *args )
-{
-    struct
-    {
-        UINT64 StatementHandle;
-        UINT16 ColumnNumber;
-        UINT16 FieldIdentifier;
-        PTR32  CharacterAttribute;
-        INT16  BufferLength;
-        PTR32  StringLength;
-        PTR32  NumericAttribute;
-    } const *params32 = args;
-
-    struct SQLColAttributeW_params params =
-    {
-        params32->StatementHandle,
-        params32->ColumnNumber,
-        params32->FieldIdentifier,
-        ULongToPtr(params32->CharacterAttribute),
-        params32->BufferLength,
-        ULongToPtr(params32->StringLength),
-        ULongToPtr(params32->NumericAttribute)
-    };
-
-    return wrap_SQLColAttributeW( &params );
-}
-
-static NTSTATUS wow64_SQLColAttributes( void *args )
-{
-    struct
-    {
-        UINT64 StatementHandle;
-        UINT16 ColumnNumber;
-        UINT16 FieldIdentifier;
-        PTR32  CharacterAttributes;
-        INT16  BufferLength;
-        PTR32  StringLength;
-        PTR32  NumericAttributes;
-    } const *params32 = args;
-
-    struct SQLColAttributes_params params =
-    {
-        params32->StatementHandle,
-        params32->ColumnNumber,
-        params32->FieldIdentifier,
-        ULongToPtr(params32->CharacterAttributes),
-        params32->BufferLength,
-        ULongToPtr(params32->StringLength),
-        ULongToPtr(params32->NumericAttributes)
-    };
-
-    return wrap_SQLColAttributes( &params );
-}
-
-static NTSTATUS wow64_SQLColAttributesW( void *args )
-{
-    struct
-    {
-        UINT64 StatementHandle;
-        UINT16 ColumnNumber;
-        UINT16 FieldIdentifier;
-        PTR32  CharacterAttributes;
-        INT16  BufferLength;
-        PTR32  StringLength;
-        PTR32  NumericAttributes;
-    } const *params32 = args;
-
-    struct SQLColAttributesW_params params =
-    {
-        params32->StatementHandle,
-        params32->ColumnNumber,
-        params32->FieldIdentifier,
-        ULongToPtr(params32->CharacterAttributes),
-        params32->BufferLength,
-        ULongToPtr(params32->StringLength),
-        ULongToPtr(params32->NumericAttributes)
-    };
-
-    return wrap_SQLColAttributesW( &params );
-}
-
-static NTSTATUS wow64_SQLColumnPrivileges( void *args )
-{
-    struct
-    {
-        UINT64 StatementHandle;
-        PTR32  CatalogName;
-        INT16  NameLength1;
-        PTR32  SchemaName;
-        INT16  NameLength2;
-        PTR32  TableName;
-        INT16  NameLength3;
-        PTR32  ColumnName;
-        INT16  NameLength4;
-    } const *params32 = args;
-
-    struct SQLColumnPrivileges_params params =
-    {
-        params32->StatementHandle,
-        ULongToPtr(params32->CatalogName),
-        params32->NameLength1,
-        ULongToPtr(params32->SchemaName),
-        params32->NameLength2,
-        ULongToPtr(params32->TableName),
-        params32->NameLength3,
-        ULongToPtr(params32->ColumnName),
-        params32->NameLength4
-    };
-
-    return wrap_SQLColumnPrivileges( &params );
-}
-
-static NTSTATUS wow64_SQLColumnPrivilegesW( void *args )
-{
-    struct
-    {
-        UINT64 StatementHandle;
-        PTR32  CatalogName;
-        INT16  NameLength1;
-        PTR32  SchemaName;
-        INT16  NameLength2;
-        PTR32  TableName;
-        INT16  NameLength3;
-        PTR32  ColumnName;
-        INT16  NameLength4;
-    } const *params32 = args;
-
-    struct SQLColumnPrivilegesW_params params =
-    {
-        params32->StatementHandle,
-        ULongToPtr(params32->CatalogName),
-        params32->NameLength1,
-        ULongToPtr(params32->SchemaName),
-        params32->NameLength2,
-        ULongToPtr(params32->TableName),
-        params32->NameLength3,
-        ULongToPtr(params32->ColumnName),
-        params32->NameLength4
-    };
-
-    return wrap_SQLColumnPrivilegesW( &params );
-}
-
-static NTSTATUS wow64_SQLColumns( void *args )
-{
-    struct
-    {
-        UINT64 StatementHandle;
-        PTR32  CatalogName;
-        INT16  NameLength1;
-        PTR32  SchemaName;
-        INT16  NameLength2;
-        PTR32  TableName;
-        INT16  NameLength3;
-        PTR32  ColumnName;
-        INT16  NameLength4;
-    } const *params32 = args;
-
-    struct SQLColumns_params params =
-    {
-        params32->StatementHandle,
-        ULongToPtr(params32->CatalogName),
-        params32->NameLength1,
-        ULongToPtr(params32->SchemaName),
-        params32->NameLength2,
-        ULongToPtr(params32->TableName),
-        params32->NameLength3,
-        ULongToPtr(params32->ColumnName),
-        params32->NameLength4
-    };
-
-    return wrap_SQLColumns( &params );
-}
-
-static NTSTATUS wow64_SQLColumnsW( void *args )
-{
-    struct
-    {
-        UINT64 StatementHandle;
-        PTR32  CatalogName;
-        INT16  NameLength1;
-        PTR32  SchemaName;
-        INT16  NameLength2;
-        PTR32  TableName;
-        INT16  NameLength3;
-        PTR32  ColumnName;
-        INT16  NameLength4;
-    } const *params32 = args;
-
-    struct SQLColumnsW_params params =
-    {
-        params32->StatementHandle,
-        ULongToPtr(params32->CatalogName),
-        params32->NameLength1,
-        ULongToPtr(params32->SchemaName),
-        params32->NameLength2,
-        ULongToPtr(params32->TableName),
-        params32->NameLength3,
-        ULongToPtr(params32->ColumnName),
-        params32->NameLength4
-    };
-
-    return wrap_SQLColumnsW( &params );
-}
-
-static NTSTATUS wow64_SQLConnect( void *args )
-{
-    struct
-    {
-        UINT64 ConnectionHandle;
-        PTR32  ServerName;
-        INT16  NameLength1;
-        PTR32  UserName;
-        INT16  NameLength2;
-        PTR32  Authentication;
-        INT16  NameLength3;
-    } const *params32 = args;
-
-    struct SQLConnect_params params =
-    {
-        params32->ConnectionHandle,
-        ULongToPtr(params32->ServerName),
-        params32->NameLength1,
-        ULongToPtr(params32->UserName),
-        params32->NameLength2,
-        ULongToPtr(params32->Authentication),
-        params32->NameLength3
-    };
-
-    return wrap_SQLConnect( &params );
-}
-
-static NTSTATUS wow64_SQLConnectW( void *args )
-{
-    struct
-    {
-        UINT64 ConnectionHandle;
-        PTR32  ServerName;
-        INT16  NameLength1;
-        PTR32  UserName;
-        INT16  NameLength2;
-        PTR32  Authentication;
-        INT16  NameLength3;
-    } const *params32 = args;
-
-    struct SQLConnectW_params params =
-    {
-        params32->ConnectionHandle,
-        ULongToPtr(params32->ServerName),
-        params32->NameLength1,
-        ULongToPtr(params32->UserName),
-        params32->NameLength2,
-        ULongToPtr(params32->Authentication),
-        params32->NameLength3
-    };
-
-    return wrap_SQLConnectW( &params );
-}
-
-static NTSTATUS wow64_SQLDataSources( void *args )
-{
-    struct
-    {
-        UINT64 EnvironmentHandle;
-        UINT16 Direction;
-        PTR32  ServerName;
-        INT16  BufferLength1;
-        PTR32  NameLength1;
-        PTR32  Description;
-        INT16  BufferLength2;
-        PTR32  NameLength2;
-    } const *params32 = args;
-
-    struct SQLDataSources_params params =
-    {
-        params32->EnvironmentHandle,
-        params32->Direction,
-        ULongToPtr(params32->ServerName),
-        params32->BufferLength1,
-        ULongToPtr(params32->NameLength1),
-        ULongToPtr(params32->Description),
-        params32->BufferLength2,
-        ULongToPtr(params32->NameLength2)
-    };
-
-    return wrap_SQLDataSources( &params );
-}
-
-static NTSTATUS wow64_SQLDataSourcesW( void *args )
-{
-    struct
-    {
-        UINT64 EnvironmentHandle;
-        UINT16 Direction;
-        PTR32  ServerName;
-        INT16  BufferLength1;
-        PTR32  NameLength1;
-        PTR32  Description;
-        INT16  BufferLength2;
-        PTR32  NameLength2;
-    } const *params32 = args;
-
-    struct SQLDataSourcesW_params params =
-    {
-        params32->EnvironmentHandle,
-        params32->Direction,
-        ULongToPtr(params32->ServerName),
-        params32->BufferLength1,
-        ULongToPtr(params32->NameLength1),
-        ULongToPtr(params32->Description),
-        params32->BufferLength2,
-        ULongToPtr(params32->NameLength2)
-    };
-
-    return wrap_SQLDataSourcesW( &params );
-}
-
-static NTSTATUS wow64_SQLDescribeCol( void *args )
-{
-    struct
-    {
-        UINT64 StatementHandle;
-        INT16  ColumnNumber;
-        PTR32  ColumnName;
-        INT16  BufferLength;
-        PTR32  NameLength;
-        PTR32  DataType;
-        PTR32  ColumnSize;
-        PTR32  DecimalDigits;
-        PTR32  Nullable;
-    } const *params32 = args;
-
-    struct SQLDescribeCol_params params =
-    {
-        params32->StatementHandle,
-        params32->ColumnNumber,
-        ULongToPtr(params32->ColumnName),
-        params32->BufferLength,
-        ULongToPtr(params32->NameLength),
-        ULongToPtr(params32->DataType),
-        ULongToPtr(params32->ColumnSize),
-        ULongToPtr(params32->DecimalDigits),
-        ULongToPtr(params32->Nullable)
-    };
-
-    return wrap_SQLDescribeCol( &params );
-}
-
-static NTSTATUS wow64_SQLDescribeColW( void *args )
-{
-    struct
-    {
-        UINT64 StatementHandle;
-        INT16  ColumnNumber;
-        PTR32  ColumnName;
-        INT16  BufferLength;
-        PTR32  NameLength;
-        PTR32  DataType;
-        PTR32  ColumnSize;
-        PTR32  DecimalDigits;
-        PTR32  Nullable;
-    } const *params32 = args;
-
-    struct SQLDescribeColW_params params =
-    {
-        params32->StatementHandle,
-        params32->ColumnNumber,
-        ULongToPtr(params32->ColumnName),
-        params32->BufferLength,
-        ULongToPtr(params32->NameLength),
-        ULongToPtr(params32->DataType),
-        ULongToPtr(params32->ColumnSize),
-        ULongToPtr(params32->DecimalDigits),
-        ULongToPtr(params32->Nullable)
-    };
-
-    return wrap_SQLDescribeColW( &params );
-}
-
-static NTSTATUS wow64_SQLDescribeParam( void *args )
-{
-    struct
-    {
-        UINT64 StatementHandle;
-        INT16  ParameterNumber;
-        PTR32  DataType;
-        PTR32  ParameterSize;
-        PTR32  DecimalDigits;
-        PTR32  Nullable;
-    } const *params32 = args;
-
-    struct SQLDescribeParam_params params =
-    {
-        params32->StatementHandle,
-        params32->ParameterNumber,
-        ULongToPtr(params32->DataType),
-        ULongToPtr(params32->ParameterSize),
-        ULongToPtr(params32->DecimalDigits),
-        ULongToPtr(params32->Nullable)
-    };
-
-    return wrap_SQLDescribeParam( &params );
-}
-
-static NTSTATUS wow64_SQLDrivers( void *args )
-{
-    struct
-    {
-        UINT64 EnvironmentHandle;
-        UINT16 Direction;
-        PTR32  DriverDescription;
-        INT16  BufferLength1;
-        PTR32  DescriptionLength;
-        PTR32  DriverAttributes;
-        INT16  BufferLength2;
-        PTR32  AttributesLength;
-    } const *params32 = args;
-
-    struct SQLDrivers_params params =
-    {
-        params32->EnvironmentHandle,
-        params32->Direction,
-        ULongToPtr(params32->DriverDescription),
-        params32->BufferLength1,
-        ULongToPtr(params32->DescriptionLength),
-        ULongToPtr(params32->DriverAttributes),
-        params32->BufferLength2,
-        ULongToPtr(params32->AttributesLength)
-    };
-
-    return wrap_SQLDrivers( &params );
-}
-
-static NTSTATUS wow64_SQLDriversW( void *args )
-{
-    struct
-    {
-        UINT64 EnvironmentHandle;
-        UINT16 Direction;
-        PTR32  DriverDescription;
-        INT16  BufferLength1;
-        PTR32  DescriptionLength;
-        PTR32  DriverAttributes;
-        INT16  BufferLength2;
-        PTR32  AttributesLength;
-    } const *params32 = args;
-
-    struct SQLDriversW_params params =
-    {
-        params32->EnvironmentHandle,
-        params32->Direction,
-        ULongToPtr(params32->DriverDescription),
-        params32->BufferLength1,
-        ULongToPtr(params32->DescriptionLength),
-        ULongToPtr(params32->DriverAttributes),
-        params32->BufferLength2,
-        ULongToPtr(params32->AttributesLength)
-    };
-
-    return wrap_SQLDriversW( &params );
-}
-
-static NTSTATUS wow64_SQLDriverConnect( void *args )
-{
-    struct
-    {
-        UINT64 ConnectionHandle;
-        PTR32  WindowHandle;
-        PTR32  InConnectionString;
-        INT16  Length;
-        PTR32  OutConnectionString;
-        INT16  BufferLength;
-        PTR32  Length2;
-        UINT16 DriverCompletion;
-    } const *params32 = args;
-
-    struct SQLDriverConnect_params params =
-    {
-        params32->ConnectionHandle,
-        ULongToPtr(params32->WindowHandle),
-        ULongToPtr(params32->InConnectionString),
-        params32->Length,
-        ULongToPtr(params32->OutConnectionString),
-        params32->BufferLength,
-        ULongToPtr(params32->Length2),
-        params32->DriverCompletion,
-    };
-
-    return wrap_SQLDriverConnect( &params );
-}
-
-static NTSTATUS wow64_SQLDriverConnectW( void *args )
-{
-    struct
-    {
-        UINT64 ConnectionHandle;
-        PTR32  WindowHandle;
-        PTR32  InConnectionString;
-        INT16  Length;
-        PTR32  OutConnectionString;
-        INT16  BufferLength;
-        PTR32  Length2;
-        UINT16 DriverCompletion;
-    } const *params32 = args;
-
-    struct SQLDriverConnectW_params params =
-    {
-        params32->ConnectionHandle,
-        ULongToPtr(params32->WindowHandle),
-        ULongToPtr(params32->InConnectionString),
-        params32->Length,
-        ULongToPtr(params32->OutConnectionString),
-        params32->BufferLength,
-        ULongToPtr(params32->Length2),
-        params32->DriverCompletion,
-    };
-
-    return wrap_SQLDriverConnectW( &params );
-}
-
-static NTSTATUS wow64_SQLError( void *args )
-{
-    struct
-    {
-        UINT64 EnvironmentHandle;
-        UINT64 ConnectionHandle;
-        UINT64 StatementHandle;
-        PTR32  SqlState;
-        PTR32  NativeError;
-        PTR32  MessageText;
-        INT16  BufferLength;
-        PTR32  TextLength;
-    } const *params32 = args;
-
-    struct SQLError_params params =
-    {
-        params32->EnvironmentHandle,
-        params32->ConnectionHandle,
-        params32->StatementHandle,
-        ULongToPtr(params32->SqlState),
-        ULongToPtr(params32->NativeError),
-        ULongToPtr(params32->MessageText),
-        params32->BufferLength,
-        ULongToPtr(params32->TextLength)
-    };
-
-    return wrap_SQLError( &params );
-}
-
-static NTSTATUS wow64_SQLErrorW( void *args )
-{
-    struct
-    {
-        UINT64 EnvironmentHandle;
-        UINT64 ConnectionHandle;
-        UINT64 StatementHandle;
-        PTR32  SqlState;
-        PTR32  NativeError;
-        PTR32  MessageText;
-        INT16  BufferLength;
-        PTR32  TextLength;
-    } const *params32 = args;
-
-    struct SQLErrorW_params params =
-    {
-        params32->EnvironmentHandle,
-        params32->ConnectionHandle,
-        params32->StatementHandle,
-        ULongToPtr(params32->SqlState),
-        ULongToPtr(params32->NativeError),
-        ULongToPtr(params32->MessageText),
-        params32->BufferLength,
-        ULongToPtr(params32->TextLength)
-    };
-
-    return wrap_SQLErrorW( &params );
-}
-
-static NTSTATUS wow64_SQLExecDirect( void *args )
-{
-    struct
-    {
-        UINT64 StatementHandle;
-        PTR32  StatementText;
-        INT32  TextLength;
-    } const *params32 = args;
-
-    struct SQLExecDirect_params params =
-    {
-        params32->StatementHandle,
-        ULongToPtr(params32->StatementText),
-        params32->TextLength,
-    };
-
-    return wrap_SQLExecDirect( &params );
-}
-
-static NTSTATUS wow64_SQLExecDirectW( void *args )
-{
-    struct
-    {
-        UINT64 StatementHandle;
-        PTR32  StatementText;
-        INT32  TextLength;
-    } const *params32 = args;
-
-    struct SQLExecDirectW_params params =
-    {
-        params32->StatementHandle,
-        ULongToPtr(params32->StatementText),
-        params32->TextLength,
-    };
-
-    return wrap_SQLExecDirectW( &params );
-}
-
-static NTSTATUS wow64_SQLExtendedFetch( void *args )
-{
-    struct
-    {
-        UINT64 StatementHandle;
-        INT16  FetchOrientation;
-        INT64  FetchOffset;
-        UINT64 RowCount;
-        PTR32  RowStatusArray;
-    } const *params32 = args;
-
-    struct SQLExtendedFetch_params params =
-    {
-        params32->StatementHandle,
-        params32->FetchOrientation,
-        params32->FetchOffset,
-        ULongToPtr(params32->RowCount),
-        ULongToPtr(params32->RowStatusArray)
-    };
-
-    return wrap_SQLExtendedFetch( &params );
-}
-
-static NTSTATUS wow64_SQLForeignKeys( void *args )
-{
-    struct
-    {
-        UINT64 StatementHandle;
-        PTR32  PkCatalogName;
-        INT16  NameLength1;
-        PTR32  PkSchemaName;
-        INT16  NameLength2;
-        PTR32  PkTableName;
-        INT16  NameLength3;
-        PTR32  FkCatalogName;
-        INT16  NameLength4;
-        PTR32  FkSchemaName;
-        INT16  NameLength5;
-        PTR32  FkTableName;
-        INT16  NameLength6;
-    } const *params32 = args;
-
-    struct SQLForeignKeys_params params =
-    {
-        params32->StatementHandle,
-        ULongToPtr(params32->PkCatalogName),
-        params32->NameLength1,
-        ULongToPtr(params32->PkSchemaName),
-        params32->NameLength2,
-        ULongToPtr(params32->PkTableName),
-        params32->NameLength3,
-        ULongToPtr(params32->FkCatalogName),
-        params32->NameLength4,
-        ULongToPtr(params32->FkSchemaName),
-        params32->NameLength5,
-        ULongToPtr(params32->FkTableName),
-        params32->NameLength6
-    };
-
-    return wrap_SQLForeignKeys( &params );
-}
-
-static NTSTATUS wow64_SQLForeignKeysW( void *args )
-{
-    struct
-    {
-        UINT64 StatementHandle;
-        PTR32  PkCatalogName;
-        INT16  NameLength1;
-        PTR32  PkSchemaName;
-        INT16  NameLength2;
-        PTR32  PkTableName;
-        INT16  NameLength3;
-        PTR32  FkCatalogName;
-        INT16  NameLength4;
-        PTR32  FkSchemaName;
-        INT16  NameLength5;
-        PTR32  FkTableName;
-        INT16  NameLength6;
-    } const *params32 = args;
-
-    struct SQLForeignKeysW_params params =
-    {
-        params32->StatementHandle,
-        ULongToPtr(params32->PkCatalogName),
-        params32->NameLength1,
-        ULongToPtr(params32->PkSchemaName),
-        params32->NameLength2,
-        ULongToPtr(params32->PkTableName),
-        params32->NameLength3,
-        ULongToPtr(params32->FkCatalogName),
-        params32->NameLength4,
-        ULongToPtr(params32->FkSchemaName),
-        params32->NameLength5,
-        ULongToPtr(params32->FkTableName),
-        params32->NameLength6
-    };
-
-    return wrap_SQLForeignKeysW( &params );
-}
-
-static NTSTATUS wow64_SQLGetConnectAttr( void *args )
-{
-    struct
-    {
-        UINT64 ConnectionHandle;
-        INT32  Attribute;
-        PTR32  Value;
-        INT32  BufferLength;
-        PTR32  StringLength;
-    } const *params32 = args;
-
-    struct SQLGetConnectAttr_params params =
-    {
-        params32->ConnectionHandle,
-        params32->Attribute,
-        ULongToPtr(params32->Value),
-        params32->BufferLength,
-        ULongToPtr(params32->StringLength)
-    };
-
-    return wrap_SQLGetConnectAttr( &params );
-}
-
-static NTSTATUS wow64_SQLGetConnectAttrW( void *args )
-{
-    struct
-    {
-        UINT64 ConnectionHandle;
-        INT32  Attribute;
-        PTR32  Value;
-        INT32  BufferLength;
-        PTR32  StringLength;
-    } const *params32 = args;
-
-    struct SQLGetConnectAttrW_params params =
-    {
-        params32->ConnectionHandle,
-        params32->Attribute,
-        ULongToPtr(params32->Value),
-        params32->BufferLength,
-        ULongToPtr(params32->StringLength)
-    };
-
-    return wrap_SQLGetConnectAttrW( &params );
-}
-
-static NTSTATUS wow64_SQLGetConnectOption( void *args )
-{
-    struct
-    {
-        UINT64 ConnectionHandle;
-        INT16  Option;
-        PTR32  Value;
-    } const *params32 = args;
-
-    struct SQLGetConnectOption_params params =
-    {
-        params32->ConnectionHandle,
-        params32->Option,
-        ULongToPtr(params32->Value)
-    };
-
-    return wrap_SQLGetConnectOption( &params );
-}
-
-static NTSTATUS wow64_SQLGetConnectOptionW( void *args )
-{
-    struct
-    {
-        UINT64 ConnectionHandle;
-        INT16  Option;
-        PTR32  Value;
-    } const *params32 = args;
-
-    struct SQLGetConnectOptionW_params params =
-    {
-        params32->ConnectionHandle,
-        params32->Option,
-        ULongToPtr(params32->Value)
-    };
-
-    return wrap_SQLGetConnectOptionW( &params );
-}
-
-static NTSTATUS wow64_SQLGetCursorName( void *args )
-{
-    struct
-    {
-        UINT64 StatementHandle;
-        PTR32  CursorName;
-        INT16  BufferLength;
-        PTR32  NameLength;
-    } const *params32 = args;
-
-    struct SQLGetCursorName_params params =
-    {
-        params32->StatementHandle,
-        ULongToPtr(params32->CursorName),
-        params32->BufferLength,
-        ULongToPtr(params32->NameLength)
-    };
-
-    return wrap_SQLGetCursorName( &params );
-}
-
-static NTSTATUS wow64_SQLGetCursorNameW( void *args )
-{
-    struct
-    {
-        UINT64 StatementHandle;
-        PTR32  CursorName;
-        INT16  BufferLength;
-        PTR32  NameLength;
-    } const *params32 = args;
-
-    struct SQLGetCursorNameW_params params =
-    {
-        params32->StatementHandle,
-        ULongToPtr(params32->CursorName),
-        params32->BufferLength,
-        ULongToPtr(params32->NameLength)
-    };
-
-    return wrap_SQLGetCursorNameW( &params );
-}
-
-static NTSTATUS wow64_SQLGetData( void *args )
-{
-    struct
-    {
-        UINT64 StatementHandle;
-        INT16  ColumnNumber;
-        INT16  TargetType;
-        PTR32  TargetValue;
-        INT64  BufferLength;
-        PTR32  StrLen_or_Ind;
-    } const *params32 = args;
-
-    struct SQLGetData_params params =
-    {
-        params32->StatementHandle,
-        params32->ColumnNumber,
-        params32->TargetType,
-        ULongToPtr(params32->TargetValue),
-        params32->BufferLength,
-        ULongToPtr(params32->StrLen_or_Ind)
-    };
-
-    return wrap_SQLGetData( &params );
-}
-
-static NTSTATUS wow64_SQLGetDescField( void *args )
-{
-    struct
-    {
-        UINT64 DescriptorHandle;
-        INT16  RecNumber;
-        INT16  FieldIdentifier;
-        PTR32  Value;
-        INT32  BufferLength;
-        PTR32  StringLength;
-    } const *params32 = args;
-
-    struct SQLGetDescField_params params =
-    {
-        params32->DescriptorHandle,
-        params32->RecNumber,
-        params32->FieldIdentifier,
-        ULongToPtr(params32->Value),
-        params32->BufferLength,
-        ULongToPtr(params32->StringLength)
-    };
-
-    return wrap_SQLGetDescField( &params );
-}
-
-static NTSTATUS wow64_SQLGetDescFieldW( void *args )
-{
-    struct
-    {
-        UINT64 DescriptorHandle;
-        INT16  RecNumber;
-        INT16  FieldIdentifier;
-        PTR32  Value;
-        INT32  BufferLength;
-        PTR32  StringLength;
-    } const *params32 = args;
-
-    struct SQLGetDescFieldW_params params =
-    {
-        params32->DescriptorHandle,
-        params32->RecNumber,
-        params32->FieldIdentifier,
-        ULongToPtr(params32->Value),
-        params32->BufferLength,
-        ULongToPtr(params32->StringLength)
-    };
-
-    return wrap_SQLGetDescFieldW( &params );
-}
-
-static NTSTATUS wow64_SQLGetDescRec( void *args )
-{
-    struct
-    {
-        UINT64 DescriptorHandle;
-        INT16  RecNumber;
-        PTR32  Name;
-        INT16  BufferLength;
-        PTR32  StringLength;
-        PTR32  Type;
-        PTR32  SubType;
-        PTR32  Length;
-        PTR32  Precision;
-        PTR32  Scale;
-        PTR32  Nullable;
-    } const *params32 = args;
-
-    struct SQLGetDescRec_params params =
-    {
-        params32->DescriptorHandle,
-        params32->RecNumber,
-        ULongToPtr(params32->Name),
-        params32->BufferLength,
-        ULongToPtr(params32->StringLength),
-        ULongToPtr(params32->Type),
-        ULongToPtr(params32->SubType),
-        ULongToPtr(params32->Length),
-        ULongToPtr(params32->Precision),
-        ULongToPtr(params32->Scale),
-        ULongToPtr(params32->Nullable)
-    };
-
-    return wrap_SQLGetDescRec( &params );
-}
-
-static NTSTATUS wow64_SQLGetDescRecW( void *args )
-{
-    struct
-    {
-        UINT64 DescriptorHandle;
-        INT16  RecNumber;
-        PTR32  Name;
-        INT16  BufferLength;
-        PTR32  StringLength;
-        PTR32  Type;
-        PTR32  SubType;
-        PTR32  Length;
-        PTR32  Precision;
-        PTR32  Scale;
-        PTR32  Nullable;
-    } const *params32 = args;
-
-    struct SQLGetDescRecW_params params =
-    {
-        params32->DescriptorHandle,
-        params32->RecNumber,
-        ULongToPtr(params32->Name),
-        params32->BufferLength,
-        ULongToPtr(params32->StringLength),
-        ULongToPtr(params32->Type),
-        ULongToPtr(params32->SubType),
-        ULongToPtr(params32->Length),
-        ULongToPtr(params32->Precision),
-        ULongToPtr(params32->Scale),
-        ULongToPtr(params32->Nullable)
-    };
-
-    return wrap_SQLGetDescRecW( &params );
-}
-
-static NTSTATUS wow64_SQLGetDiagRec( void *args )
-{
-    struct
-    {
-        INT16  HandleType;
-        UINT64 Handle;
-        INT16  RecNumber;
-        PTR32  SqlState;
-        PTR32  NativeError;
-        PTR32  MessageText;
-        INT16  BufferLength;
-        PTR32  TextLength;
-    } const *params32 = args;
-
-    struct SQLGetDiagRec_params params =
-    {
-        params32->HandleType,
-        params32->Handle,
-        params32->RecNumber,
-        ULongToPtr(params32->SqlState),
-        ULongToPtr(params32->NativeError),
-        ULongToPtr(params32->MessageText),
-        params32->BufferLength,
-        ULongToPtr(params32->TextLength)
-    };
-
-    return wrap_SQLGetDiagRec( &params );
-}
-
-static NTSTATUS wow64_SQLGetDiagRecW( void *args )
-{
-    struct
-    {
-        INT16  HandleType;
-        UINT64 Handle;
-        INT16  RecNumber;
-        PTR32  SqlState;
-        PTR32  NativeError;
-        PTR32  MessageText;
-        INT16  BufferLength;
-        PTR32  TextLength;
-    } const *params32 = args;
-
-    struct SQLGetDiagRecW_params params =
-    {
-        params32->HandleType,
-        params32->Handle,
-        params32->RecNumber,
-        ULongToPtr(params32->SqlState),
-        ULongToPtr(params32->NativeError),
-        ULongToPtr(params32->MessageText),
-        params32->BufferLength,
-        ULongToPtr(params32->TextLength)
-    };
-
-    return wrap_SQLGetDiagRecW( &params );
-}
-
-static NTSTATUS wow64_SQLGetDiagField( void *args )
-{
-    struct
-    {
-        INT16  HandleType;
-        UINT64 Handle;
-        INT16  RecNumber;
-        INT16  DiagIdentifier;
-        PTR32  DiagInfo;
-        INT16  BufferLength;
-        PTR32  StringLength;
-    } const *params32 = args;
-
-    struct SQLGetDiagField_params params =
-    {
-        params32->HandleType,
-        params32->Handle,
-        params32->RecNumber,
-        params32->DiagIdentifier,
-        ULongToPtr(params32->DiagInfo),
-        params32->BufferLength,
-        ULongToPtr(params32->StringLength)
-    };
-
-    return wrap_SQLGetDiagField( &params );
-}
-
-static NTSTATUS wow64_SQLGetDiagFieldW( void *args )
-{
-    struct
-    {
-        INT16  HandleType;
-        UINT64 Handle;
-        INT16  RecNumber;
-        INT16  DiagIdentifier;
-        PTR32  DiagInfo;
-        INT16  BufferLength;
-        PTR32  StringLength;
-    } const *params32 = args;
-
-    struct SQLGetDiagFieldW_params params =
-    {
-        params32->HandleType,
-        params32->Handle,
-        params32->RecNumber,
-        params32->DiagIdentifier,
-        ULongToPtr(params32->DiagInfo),
-        params32->BufferLength,
-        ULongToPtr(params32->StringLength)
-    };
-
-    return wrap_SQLGetDiagFieldW( &params );
-}
-
-static NTSTATUS wow64_SQLGetEnvAttr( void *args )
-{
-    struct
-    {
-        UINT64 EnvironmentHandle;
-        INT32  Attribute;
-        PTR32  Value;
-        INT32  BufferLength;
-        PTR32  StringLength;
-    } const *params32 = args;
-
-    struct SQLGetEnvAttr_params params =
-    {
-        params32->EnvironmentHandle,
-        params32->Attribute,
-        ULongToPtr(params32->Value),
-        params32->BufferLength,
-        ULongToPtr(params32->StringLength)
-    };
-
-    return wrap_SQLGetEnvAttr( &params );
-}
-
-static NTSTATUS wow64_SQLGetFunctions( void *args )
-{
-    struct
-    {
-        UINT64 ConnectionHandle;
-        UINT16 FunctionId;
-        PTR32  Supported;
-    } const *params32 = args;
-
-    struct SQLGetFunctions_params params =
-    {
-        params32->ConnectionHandle,
-        params32->FunctionId,
-        ULongToPtr(params32->Supported)
-    };
-
-    return wrap_SQLGetFunctions( &params );
-}
-
-static NTSTATUS wow64_SQLGetInfo( void *args )
-{
-    struct
-    {
-        UINT64 ConnectionHandle;
-        UINT16 InfoType;
-        PTR32  InfoValue;
-        INT16  BufferLength;
-        PTR32  StringLength;
-    } const *params32 = args;
-
-    struct SQLGetInfo_params params =
-    {
-        params32->ConnectionHandle,
-        params32->InfoType,
-        ULongToPtr(params32->InfoValue),
-        params32->BufferLength,
-        ULongToPtr(params32->StringLength)
-    };
-
-    return wrap_SQLGetInfo( &params );
-}
-
-static NTSTATUS wow64_SQLGetInfoW( void *args )
-{
-    struct
-    {
-        UINT64 ConnectionHandle;
-        UINT16 InfoType;
-        PTR32  InfoValue;
-        INT16  BufferLength;
-        PTR32  StringLength;
-    } const *params32 = args;
-
-    struct SQLGetInfoW_params params =
-    {
-        params32->ConnectionHandle,
-        params32->InfoType,
-        ULongToPtr(params32->InfoValue),
-        params32->BufferLength,
-        ULongToPtr(params32->StringLength)
-    };
-
-    return wrap_SQLGetInfoW( &params );
-}
-
-static NTSTATUS wow64_SQLGetStmtOption( void *args )
-{
-    struct
-    {
-        UINT64 StatementHandle;
-        UINT16 Option;
-        PTR32  Value;
-    } const *params32 = args;
-
-    struct SQLGetStmtOption_params params =
-    {
-        params32->StatementHandle,
-        params32->Option,
-        ULongToPtr(params32->Value)
-    };
-
-    return wrap_SQLGetStmtOption( &params );
-}
-
-static NTSTATUS wow64_SQLNativeSql( void *args )
-{
-    struct
-    {
-        UINT64 ConnectionHandle;
-        PTR32  InStatementText;
-        INT32  TextLength1;
-        PTR32  OutStatementText;
-        INT32  BufferLength;
-        PTR32  TextLength2;
-    } const *params32 = args;
-
-    struct SQLNativeSql_params params =
-    {
-        params32->ConnectionHandle,
-        ULongToPtr(params32->InStatementText),
-        params32->TextLength1,
-        ULongToPtr(params32->OutStatementText),
-        params32->BufferLength,
-        ULongToPtr(params32->TextLength2)
-    };
-
-    return wrap_SQLNativeSql( &params );
-}
-
-static NTSTATUS wow64_SQLNativeSqlW( void *args )
-{
-    struct
-    {
-        UINT64 ConnectionHandle;
-        PTR32  InStatementText;
-        INT32  TextLength1;
-        PTR32  OutStatementText;
-        INT32  BufferLength;
-        PTR32  TextLength2;
-    } const *params32 = args;
-
-    struct SQLNativeSqlW_params params =
-    {
-        params32->ConnectionHandle,
-        ULongToPtr(params32->InStatementText),
-        params32->TextLength1,
-        ULongToPtr(params32->OutStatementText),
-        params32->BufferLength,
-        ULongToPtr(params32->TextLength2)
-    };
-
-    return wrap_SQLNativeSqlW( &params );
-}
-
-static NTSTATUS wow64_SQLNumParams( void *args )
-{
-    struct
-    {
-        UINT64 StatementHandle;
-        PTR32  ParameterCount;
-    } const *params32 = args;
-
-    struct SQLNumParams_params params =
-    {
-        params32->StatementHandle,
-        ULongToPtr(params32->ParameterCount)
-    };
-
-    return wrap_SQLNumParams( &params );
-}
-
-static NTSTATUS wow64_SQLNumResultCols( void *args )
-{
-    struct
-    {
-        UINT64 StatementHandle;
-        PTR32  ColumnCount;
-    } const *params32 = args;
-
-    struct SQLNumResultCols_params params =
-    {
-        params32->StatementHandle,
-        ULongToPtr(params32->ColumnCount)
-    };
-
-    return wrap_SQLNumResultCols( &params );
-}
-
-static NTSTATUS wow64_SQLParamData( void *args )
-{
-    struct
-    {
-        UINT64 StatementHandle;
-        PTR32  Value;
-    } const *params32 = args;
-
-    struct SQLParamData_params params =
-    {
-        params32->StatementHandle,
-        ULongToPtr(params32->Value)
-    };
-
-    return wrap_SQLParamData( &params );
-}
-
-static NTSTATUS wow64_SQLParamOptions( void *args )
-{
-    struct
-    {
-        UINT64 StatementHandle;
-        UINT64 RowCount;
-        PTR32  RowNumber;
-    } const *params32 = args;
-
-    struct SQLParamOptions_params params =
-    {
-        params32->StatementHandle,
-        params32->RowCount,
-        ULongToPtr(params32->RowNumber)
-    };
-
-    return wrap_SQLParamOptions( &params );
-}
-
-static NTSTATUS wow64_SQLPrepare( void *args )
-{
-    struct
-    {
-        UINT64 StatementHandle;
-        PTR32  StatementText;
-        INT32  TextLength;
-    } const *params32 = args;
-
-    struct SQLPrepare_params params =
-    {
-        params32->StatementHandle,
-        ULongToPtr(params32->StatementText),
-        params32->TextLength,
-    };
-
-    return wrap_SQLPrepare( &params );
-}
-
-static NTSTATUS wow64_SQLPrepareW( void *args )
-{
-    struct
-    {
-        UINT64 StatementHandle;
-        PTR32  StatementText;
-        INT32  TextLength;
-    } const *params32 = args;
-
-    struct SQLPrepareW_params params =
-    {
-        params32->StatementHandle,
-        ULongToPtr(params32->StatementText),
-        params32->TextLength,
-    };
-
-    return wrap_SQLPrepareW( &params );
-}
-
-static NTSTATUS wow64_SQLPrimaryKeys( void *args )
-{
-    struct
-    {
-        UINT64 StatementHandle;
-        PTR32  CatalogName;
-        INT16  NameLength1;
-        PTR32  SchemaName;
-        INT16  NameLength2;
-        PTR32  TableName;
-        INT16  NameLength3;
-    } const *params32 = args;
-
-    struct SQLPrimaryKeys_params params =
-    {
-        params32->StatementHandle,
-        ULongToPtr(params32->CatalogName),
-        params32->NameLength1,
-        ULongToPtr(params32->SchemaName),
-        params32->NameLength2,
-        ULongToPtr(params32->TableName),
-        params32->NameLength3
-    };
-
-    return wrap_SQLPrimaryKeys( &params );
-}
-
-static NTSTATUS wow64_SQLPrimaryKeysW( void *args )
-{
-    struct
-    {
-        UINT64 StatementHandle;
-        PTR32  CatalogName;
-        INT16  NameLength1;
-        PTR32  SchemaName;
-        INT16  NameLength2;
-        PTR32  TableName;
-        INT16  NameLength3;
-    } const *params32 = args;
-
-    struct SQLPrimaryKeysW_params params =
-    {
-        params32->StatementHandle,
-        ULongToPtr(params32->CatalogName),
-        params32->NameLength1,
-        ULongToPtr(params32->SchemaName),
-        params32->NameLength2,
-        ULongToPtr(params32->TableName),
-        params32->NameLength3
-    };
-
-    return wrap_SQLPrimaryKeysW( &params );
-}
-
-static NTSTATUS wow64_SQLProcedureColumns( void *args )
-{
-    struct
-    {
-        UINT64 StatementHandle;
-        PTR32  CatalogName;
-        INT16  NameLength1;
-        PTR32  SchemaName;
-        INT16  NameLength2;
-        PTR32  ProcName;
-        INT16  NameLength3;
-        PTR32  ColumnName;
-        INT16  NameLength4;
-    } const *params32 = args;
-
-    struct SQLProcedureColumns_params params =
-    {
-        params32->StatementHandle,
-        ULongToPtr(params32->CatalogName),
-        params32->NameLength1,
-        ULongToPtr(params32->SchemaName),
-        params32->NameLength2,
-        ULongToPtr(params32->ProcName),
-        params32->NameLength3,
-        ULongToPtr(params32->ColumnName),
-        params32->NameLength4
-    };
-
-    return wrap_SQLProcedureColumns( &params );
-}
-
-static NTSTATUS wow64_SQLProcedureColumnsW( void *args )
-{
-    struct
-    {
-        UINT64 StatementHandle;
-        PTR32  CatalogName;
-        INT16  NameLength1;
-        PTR32  SchemaName;
-        INT16  NameLength2;
-        PTR32  ProcName;
-        INT16  NameLength3;
-        PTR32  ColumnName;
-        INT16  NameLength4;
-    } const *params32 = args;
-
-    struct SQLProcedureColumnsW_params params =
-    {
-        params32->StatementHandle,
-        ULongToPtr(params32->CatalogName),
-        params32->NameLength1,
-        ULongToPtr(params32->SchemaName),
-        params32->NameLength2,
-        ULongToPtr(params32->ProcName),
-        params32->NameLength3,
-        ULongToPtr(params32->ColumnName),
-        params32->NameLength4
-    };
-
-    return wrap_SQLProcedureColumnsW( &params );
-}
-
-static NTSTATUS wow64_SQLProcedures( void *args )
-{
-    struct
-    {
-        UINT64 StatementHandle;
-        PTR32  CatalogName;
-        INT16  NameLength1;
-        PTR32  SchemaName;
-        INT16  NameLength2;
-        PTR32  ProcName;
-        INT16  NameLength3;
-    } const *params32 = args;
-
-    struct SQLProcedures_params params =
-    {
-        params32->StatementHandle,
-        ULongToPtr(params32->CatalogName),
-        params32->NameLength1,
-        ULongToPtr(params32->SchemaName),
-        params32->NameLength2,
-        ULongToPtr(params32->ProcName),
-        params32->NameLength3
-    };
-
-    return wrap_SQLProcedures( &params );
-}
-
-static NTSTATUS wow64_SQLProceduresW( void *args )
-{
-    struct
-    {
-        UINT64 StatementHandle;
-        PTR32  CatalogName;
-        INT16  NameLength1;
-        PTR32  SchemaName;
-        INT16  NameLength2;
-        PTR32  ProcName;
-        INT16  NameLength3;
-    } const *params32 = args;
-
-    struct SQLProceduresW_params params =
-    {
-        params32->StatementHandle,
-        ULongToPtr(params32->CatalogName),
-        params32->NameLength1,
-        ULongToPtr(params32->SchemaName),
-        params32->NameLength2,
-        ULongToPtr(params32->ProcName),
-        params32->NameLength3
-    };
-
-    return wrap_SQLProceduresW( &params );
-}
-
-static NTSTATUS wow64_SQLPutData( void *args )
-{
-    struct
-    {
-        UINT64 StatementHandle;
-        PTR32  Data;
-        INT64  StrLen_or_Ind;
-    } const *params32 = args;
-
-    struct SQLPutData_params params =
-    {
-        params32->StatementHandle,
-        ULongToPtr(params32->Data),
-        params32->StrLen_or_Ind
-    };
-
-    return wrap_SQLPutData( &params );
-}
-
-static NTSTATUS wow64_SQLRowCount( void *args )
-{
-    struct
-    {
-        UINT64 StatementHandle;
-        PTR32  RowCount;
-    } const *params32 = args;
-
-    struct SQLRowCount_params params =
-    {
-        params32->StatementHandle,
-        ULongToPtr(params32->RowCount)
-    };
-
-    return wrap_SQLRowCount( &params );
-}
-
-static NTSTATUS wow64_SQLSetConnectAttr( void *args )
-{
-    struct
-    {
-        UINT64 ConnectionHandle;
-        INT32  Attribute;
-        PTR32  Value;
-        INT32  StringLength;
-    } const *params32 = args;
-
-    struct SQLSetConnectAttr_params params =
-    {
-        params32->ConnectionHandle,
-        params32->Attribute,
-        ULongToPtr(params32->Value),
-        params32->StringLength
-    };
-
-    return wrap_SQLSetConnectAttr( &params );
-}
-
-static NTSTATUS wow64_SQLSetConnectAttrW( void *args )
-{
-    struct
-    {
-        UINT64 ConnectionHandle;
-        INT32  Attribute;
-        PTR32  Value;
-        INT32  StringLength;
-    } const *params32 = args;
-
-    struct SQLSetConnectAttrW_params params =
-    {
-        params32->ConnectionHandle,
-        params32->Attribute,
-        ULongToPtr(params32->Value),
-        params32->StringLength
-    };
-
-    return wrap_SQLSetConnectAttrW( &params );
-}
-
-static NTSTATUS wow64_SQLSetCursorName( void *args )
-{
-    struct
-    {
-        UINT64 StatementHandle;
-        PTR32  CursorName;
-        INT16  NameLength;
-    } const *params32 = args;
-
-    struct SQLSetCursorName_params params =
-    {
-        params32->StatementHandle,
-        ULongToPtr(params32->CursorName),
-        params32->NameLength
-    };
-
-    return wrap_SQLSetCursorName( &params );
-}
-
-static NTSTATUS wow64_SQLSetCursorNameW( void *args )
-{
-    struct
-    {
-        UINT64 StatementHandle;
-        PTR32  CursorName;
-        INT16  NameLength;
-    } const *params32 = args;
-
-    struct SQLSetCursorNameW_params params =
-    {
-        params32->StatementHandle,
-        ULongToPtr(params32->CursorName),
-        params32->NameLength
-    };
-
-    return wrap_SQLSetCursorNameW( &params );
-}
-
-static NTSTATUS wow64_SQLSetDescField( void *args )
-{
-    struct
-    {
-        UINT64 DescriptorHandle;
-        INT16  RecNumber;
-        INT16  FieldIdentifier;
-        PTR32  Value;
-        INT32  BufferLength;
-    } const *params32 = args;
-
-    struct SQLSetDescField_params params =
-    {
-        params32->DescriptorHandle,
-        params32->RecNumber,
-        params32->FieldIdentifier,
-        ULongToPtr(params32->Value),
-        params32->BufferLength
-    };
-
-    return wrap_SQLSetDescField( &params );
-}
-
-static NTSTATUS wow64_SQLSetDescFieldW( void *args )
-{
-    struct
-    {
-        UINT64 DescriptorHandle;
-        INT16  RecNumber;
-        INT16  FieldIdentifier;
-        PTR32  Value;
-        INT32  BufferLength;
-    } const *params32 = args;
-
-    struct SQLSetDescFieldW_params params =
-    {
-        params32->DescriptorHandle,
-        params32->RecNumber,
-        params32->FieldIdentifier,
-        ULongToPtr(params32->Value),
-        params32->BufferLength
-    };
-
-    return wrap_SQLSetDescFieldW( &params );
-}
-
-static NTSTATUS wow64_SQLSetDescRec( void *args )
-{
-    struct
-    {
-        UINT64 DescriptorHandle;
-        INT16  RecNumber;
-        INT16  Type;
-        INT16  SubType;
-        INT64  Length;
-        INT16  Precision;
-        INT16  Scale;
-        PTR32  Data;
-        PTR32  StringLength;
-        PTR32  Indicator;
-    } const *params32 = args;
-
-    struct SQLSetDescRec_params params =
-    {
-        params32->DescriptorHandle,
-        params32->RecNumber,
-        params32->Type,
-        params32->SubType,
-        params32->Length,
-        params32->Precision,
-        params32->Scale,
-        ULongToPtr(params32->Data),
-        ULongToPtr(params32->StringLength),
-        ULongToPtr(params32->Indicator)
-    };
-
-    return wrap_SQLSetDescRec( &params );
-}
-
-static NTSTATUS wow64_SQLSetEnvAttr( void *args )
-{
-    struct
-    {
-        UINT64 EnvironmentHandle;
-        INT32  Attribute;
-        PTR32  Value;
-        INT32  StringLength;
-    } const *params32 = args;
-
-    struct SQLSetEnvAttr_params params =
-    {
-        params32->EnvironmentHandle,
-        params32->Attribute,
-        ULongToPtr(params32->Value),
-        params32->StringLength
-    };
-
-    return wrap_SQLSetEnvAttr( &params );
-}
-
-static NTSTATUS wow64_SQLSetParam( void *args )
-{
-    struct
-    {
-        UINT64 StatementHandle;
-        INT16  ParameterNumber;
-        INT16  ValueType;
-        INT16  ParameterType;
-        UINT64 LengthPrecision;
-        INT16  ParameterScale;
-        PTR32  ParameterValue;
-        PTR32  StrLen_or_Ind;
-    } const *params32 = args;
-
-    struct SQLSetParam_params params =
-    {
-        params32->StatementHandle,
-        params32->ParameterNumber,
-        params32->ValueType,
-        params32->ParameterType,
-        params32->LengthPrecision,
-        params32->ParameterScale,
-        ULongToPtr(params32->ParameterValue),
-        ULongToPtr(params32->StrLen_or_Ind)
-    };
-
-    return wrap_SQLSetParam( &params );
-}
-
-static NTSTATUS wow64_SQLSetStmtAttr( void *args )
-{
-    struct
-    {
-        UINT64 StatementHandle;
-        INT32  Attribute;
-        PTR32  Value;
-        INT32  StringLength;
-    } const *params32 = args;
-
-    struct SQLSetStmtAttr_params params =
-    {
-        params32->StatementHandle,
-        params32->Attribute,
-        ULongToPtr(params32->Value),
-        params32->StringLength
-    };
-
-    return wrap_SQLSetStmtAttr( &params );
-}
-
-static NTSTATUS wow64_SQLSetStmtAttrW( void *args )
-{
-    struct
-    {
-        UINT64 StatementHandle;
-        INT32  Attribute;
-        PTR32  Value;
-        INT32  StringLength;
-    } const *params32 = args;
-
-    struct SQLSetStmtAttrW_params params =
-    {
-        params32->StatementHandle,
-        params32->Attribute,
-        ULongToPtr(params32->Value),
-        params32->StringLength
-    };
-
-    return wrap_SQLSetStmtAttrW( &params );
-}
-
-static NTSTATUS wow64_SQLSpecialColumns( void *args )
-{
-    struct
-    {
-        UINT64 StatementHandle;
-        UINT16 IdentifierType;
-        PTR32  CatalogName;
-        INT16  NameLength1;
-        PTR32  SchemaName;
-        INT16  NameLength2;
-        PTR32  TableName;
-        INT16  NameLength3;
-        UINT16 Scope;
-        UINT16 Nullable;
-    } const *params32 = args;
-
-    struct SQLSpecialColumns_params params =
-    {
-        params32->StatementHandle,
-        params32->IdentifierType,
-        ULongToPtr(params32->CatalogName),
-        params32->NameLength1,
-        ULongToPtr(params32->SchemaName),
-        params32->NameLength2,
-        ULongToPtr(params32->TableName),
-        params32->NameLength3,
-        params32->Scope,
-        params32->Nullable
-    };
-
-    return wrap_SQLSpecialColumns( &params );
-}
-
-static NTSTATUS wow64_SQLSpecialColumnsW( void *args )
-{
-    struct
-    {
-        UINT64 StatementHandle;
-        UINT16 IdentifierType;
-        PTR32  CatalogName;
-        INT16  NameLength1;
-        PTR32  SchemaName;
-        INT16  NameLength2;
-        PTR32  TableName;
-        INT16  NameLength3;
-        UINT16 Scope;
-        UINT16 Nullable;
-    } const *params32 = args;
-
-    struct SQLSpecialColumnsW_params params =
-    {
-        params32->StatementHandle,
-        params32->IdentifierType,
-        ULongToPtr(params32->CatalogName),
-        params32->NameLength1,
-        ULongToPtr(params32->SchemaName),
-        params32->NameLength2,
-        ULongToPtr(params32->TableName),
-        params32->NameLength3,
-        params32->Scope,
-        params32->Nullable
-    };
-
-    return wrap_SQLSpecialColumnsW( &params );
-}
-
-static NTSTATUS wow64_SQLStatistics( void *args )
-{
-    struct
-    {
-        UINT64 StatementHandle;
-        PTR32  CatalogName;
-        INT16  NameLength1;
-        PTR32  SchemaName;
-        INT16  NameLength2;
-        PTR32  TableName;
-        INT16  NameLength3;
-        UINT16 Unique;
-        UINT16 Reserved;
-    } const *params32 = args;
-
-    struct SQLStatistics_params params =
-    {
-        params32->StatementHandle,
-        ULongToPtr(params32->CatalogName),
-        params32->NameLength1,
-        ULongToPtr(params32->SchemaName),
-        params32->NameLength2,
-        ULongToPtr(params32->TableName),
-        params32->NameLength3,
-        params32->Unique,
-        params32->Reserved
-    };
-
-    return wrap_SQLStatistics( &params );
-}
-
-static NTSTATUS wow64_SQLStatisticsW( void *args )
-{
-    struct
-    {
-        UINT64 StatementHandle;
-        PTR32  CatalogName;
-        INT16  NameLength1;
-        PTR32  SchemaName;
-        INT16  NameLength2;
-        PTR32  TableName;
-        INT16  NameLength3;
-        UINT16 Unique;
-        UINT16 Reserved;
-    } const *params32 = args;
-
-    struct SQLStatisticsW_params params =
-    {
-        params32->StatementHandle,
-        ULongToPtr(params32->CatalogName),
-        params32->NameLength1,
-        ULongToPtr(params32->SchemaName),
-        params32->NameLength2,
-        ULongToPtr(params32->TableName),
-        params32->NameLength3,
-        params32->Unique,
-        params32->Reserved
-    };
-
-    return wrap_SQLStatisticsW( &params );
-}
-
-static NTSTATUS wow64_SQLGetStmtAttr( void *args )
-{
-    struct
-    {
-        UINT64 StatementHandle;
-        INT32  Attribute;
-        PTR32  Value;
-        INT32  BufferLength;
-        PTR32  StringLength;
-    } const *params32 = args;
-
-    struct SQLGetStmtAttr_params params =
-    {
-        params32->StatementHandle,
-        params32->Attribute,
-        ULongToPtr(params32->Value),
-        params32->BufferLength,
-        ULongToPtr(params32->StringLength)
-    };
-
-    return wrap_SQLGetStmtAttr( &params );
-}
-
-static NTSTATUS wow64_SQLGetStmtAttrW( void *args )
-{
-    struct
-    {
-        UINT64 StatementHandle;
-        INT32  Attribute;
-        PTR32  Value;
-        INT32  BufferLength;
-        PTR32  StringLength;
-    } const *params32 = args;
-
-    struct SQLGetStmtAttrW_params params =
-    {
-        params32->StatementHandle,
-        params32->Attribute,
-        ULongToPtr(params32->Value),
-        params32->BufferLength,
-        ULongToPtr(params32->StringLength)
-    };
-
-    return wrap_SQLGetStmtAttrW( &params );
-}
-
-static NTSTATUS wow64_SQLTablePrivileges( void *args )
-{
-    struct
-    {
-        UINT64 StatementHandle;
-        PTR32  CatalogName;
-        INT16  NameLength1;
-        PTR32  SchemaName;
-        INT16  NameLength2;
-        PTR32  TableName;
-        INT16  NameLength3;
-    } const *params32 = args;
-
-    struct SQLTablePrivileges_params params =
-    {
-        params32->StatementHandle,
-        ULongToPtr(params32->CatalogName),
-        params32->NameLength1,
-        ULongToPtr(params32->SchemaName),
-        params32->NameLength2,
-        ULongToPtr(params32->TableName),
-        params32->NameLength3
-    };
-
-    return wrap_SQLTablePrivileges( &params );
-}
-
-static NTSTATUS wow64_SQLTablePrivilegesW( void *args )
-{
-    struct
-    {
-        UINT64 StatementHandle;
-        PTR32  CatalogName;
-        INT16  NameLength1;
-        PTR32  SchemaName;
-        INT16  NameLength2;
-        PTR32  TableName;
-        INT16  NameLength3;
-    } const *params32 = args;
-
-    struct SQLTablePrivilegesW_params params =
-    {
-        params32->StatementHandle,
-        ULongToPtr(params32->CatalogName),
-        params32->NameLength1,
-        ULongToPtr(params32->SchemaName),
-        params32->NameLength2,
-        ULongToPtr(params32->TableName),
-        params32->NameLength3
-    };
-
-    return wrap_SQLTablePrivilegesW( &params );
-}
-
-static NTSTATUS wow64_SQLTables( void *args )
-{
-    struct
-    {
-        UINT64 StatementHandle;
-        PTR32  CatalogName;
-        INT16  NameLength1;
-        PTR32  SchemaName;
-        INT16  NameLength2;
-        PTR32  TableName;
-        INT16  NameLength3;
-        PTR32  TableType;
-        INT16  NameLength4;
-    } const *params32 = args;
-
-    struct SQLTables_params params =
-    {
-        params32->StatementHandle,
-        ULongToPtr(params32->CatalogName),
-        params32->NameLength1,
-        ULongToPtr(params32->SchemaName),
-        params32->NameLength2,
-        ULongToPtr(params32->TableName),
-        params32->NameLength3,
-        ULongToPtr(params32->TableType),
-        params32->NameLength4
-    };
-
-    return wrap_SQLTables( &params );
-}
-
-static NTSTATUS wow64_SQLTablesW( void *args )
-{
-    struct
-    {
-        UINT64 StatementHandle;
-        PTR32  CatalogName;
-        INT16  NameLength1;
-        PTR32  SchemaName;
-        INT16  NameLength2;
-        PTR32  TableName;
-        INT16  NameLength3;
-        PTR32  TableType;
-        INT16  NameLength4;
-    } const *params32 = args;
-
-    struct SQLTablesW_params params =
-    {
-        params32->StatementHandle,
-        ULongToPtr(params32->CatalogName),
-        params32->NameLength1,
-        ULongToPtr(params32->SchemaName),
-        params32->NameLength2,
-        ULongToPtr(params32->TableName),
-        params32->NameLength3,
-        ULongToPtr(params32->TableType),
-        params32->NameLength4
-    };
-
-    return wrap_SQLTablesW( &params );
-}
-
-const unixlib_entry_t __wine_unix_call_wow64_funcs[] =
-{
-    odbc_process_attach,
-    wrap_SQLAllocConnect,
-    wrap_SQLAllocEnv,
-    wrap_SQLAllocHandle,
-    wrap_SQLAllocHandleStd,
-    wrap_SQLAllocStmt,
-    wow64_SQLBindCol,
-    wow64_SQLBindParam,
-    wow64_SQLBindParameter,
-    wow64_SQLBrowseConnect,
-    wow64_SQLBrowseConnectW,
-    wrap_SQLBulkOperations,
-    wrap_SQLCancel,
-    wrap_SQLCloseCursor,
-    wow64_SQLColAttribute,
-    wow64_SQLColAttributeW,
-    wow64_SQLColAttributes,
-    wow64_SQLColAttributesW,
-    wow64_SQLColumnPrivileges,
-    wow64_SQLColumnPrivilegesW,
-    wow64_SQLColumns,
-    wow64_SQLColumnsW,
-    wow64_SQLConnect,
-    wow64_SQLConnectW,
-    wrap_SQLCopyDesc,
-    wow64_SQLDataSources,
-    wow64_SQLDataSourcesW,
-    wow64_SQLDescribeCol,
-    wow64_SQLDescribeColW,
-    wow64_SQLDescribeParam,
-    wrap_SQLDisconnect,
-    wow64_SQLDriverConnect,
-    wow64_SQLDriverConnectW,
-    wow64_SQLDrivers,
-    wow64_SQLDriversW,
-    wrap_SQLEndTran,
-    wow64_SQLError,
-    wow64_SQLErrorW,
-    wow64_SQLExecDirect,
-    wow64_SQLExecDirectW,
-    wrap_SQLExecute,
-    wow64_SQLExtendedFetch,
-    wrap_SQLFetch,
-    wrap_SQLFetchScroll,
-    wow64_SQLForeignKeys,
-    wow64_SQLForeignKeysW,
-    wrap_SQLFreeConnect,
-    wrap_SQLFreeEnv,
-    wrap_SQLFreeHandle,
-    wrap_SQLFreeStmt,
-    wow64_SQLGetConnectAttr,
-    wow64_SQLGetConnectAttrW,
-    wow64_SQLGetConnectOption,
-    wow64_SQLGetConnectOptionW,
-    wow64_SQLGetCursorName,
-    wow64_SQLGetCursorNameW,
-    wow64_SQLGetData,
-    wow64_SQLGetDescField,
-    wow64_SQLGetDescFieldW,
-    wow64_SQLGetDescRec,
-    wow64_SQLGetDescRecW,
-    wow64_SQLGetDiagField,
-    wow64_SQLGetDiagFieldW,
-    wow64_SQLGetDiagRec,
-    wow64_SQLGetDiagRecW,
-    wow64_SQLGetEnvAttr,
-    wow64_SQLGetFunctions,
-    wow64_SQLGetInfo,
-    wow64_SQLGetInfoW,
-    wow64_SQLGetStmtAttr,
-    wow64_SQLGetStmtAttrW,
-    wow64_SQLGetStmtOption,
-    wrap_SQLGetTypeInfo,
-    wrap_SQLGetTypeInfoW,
-    wrap_SQLMoreResults,
-    wow64_SQLNativeSql,
-    wow64_SQLNativeSqlW,
-    wow64_SQLNumParams,
-    wow64_SQLNumResultCols,
-    wow64_SQLParamData,
-    wow64_SQLParamOptions,
-    wow64_SQLPrepare,
-    wow64_SQLPrepareW,
-    wow64_SQLPrimaryKeys,
-    wow64_SQLPrimaryKeysW,
-    wow64_SQLProcedureColumns,
-    wow64_SQLProcedureColumnsW,
-    wow64_SQLProcedures,
-    wow64_SQLProceduresW,
-    wow64_SQLPutData,
-    wow64_SQLRowCount,
-    wow64_SQLSetConnectAttr,
-    wow64_SQLSetConnectAttrW,
-    wrap_SQLSetConnectOption,
-    wrap_SQLSetConnectOptionW,
-    wow64_SQLSetCursorName,
-    wow64_SQLSetCursorNameW,
-    wow64_SQLSetDescField,
-    wow64_SQLSetDescFieldW,
-    wow64_SQLSetDescRec,
-    wow64_SQLSetEnvAttr,
-    wow64_SQLSetParam,
-    wrap_SQLSetPos,
-    wrap_SQLSetScrollOptions,
-    wow64_SQLSetStmtAttr,
-    wow64_SQLSetStmtAttrW,
-    wrap_SQLSetStmtOption,
-    wow64_SQLSpecialColumns,
-    wow64_SQLSpecialColumnsW,
-    wow64_SQLStatistics,
-    wow64_SQLStatisticsW,
-    wow64_SQLTablePrivileges,
-    wow64_SQLTablePrivilegesW,
-    wow64_SQLTables,
-    wow64_SQLTablesW,
-    wrap_SQLTransact,
-};
-
-C_ASSERT( ARRAYSIZE( __wine_unix_call_wow64_funcs) == unix_funcs_count );
-
-#endif  /* _WIN64 */
diff --git a/dlls/odbc32/unixlib.h b/dlls/odbc32/unixlib.h
deleted file mode 100644
index ed5f0129fd2..00000000000
--- a/dlls/odbc32/unixlib.h
+++ /dev/null
@@ -1,1256 +0,0 @@
-/*
- * Win32 ODBC functions
- *
- * Copyright 1999 Xiang Li, Corel Corporation
- *
- * This library is free software; you can redistribute it and/or
- * modify it under the terms of the GNU Lesser General Public
- * License as published by the Free Software Foundation; either
- * version 2.1 of the License, or (at your option) any later version.
- *
- * This library is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- * Lesser General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General Public
- * License along with this library; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
- *
- * NOTES:
- *   Proxy ODBC driver manager.  This manager delegates all ODBC
- *   calls to a real ODBC driver manager named by the environment
- *   variable LIB_ODBC_DRIVER_MANAGER, or to libodbc.so if the
- *   variable is not set.
- */
-
-#include <stdarg.h>
-#include "windef.h"
-#include "winbase.h"
-#include "wine/unixlib.h"
-
-#define SUCCESS(ret) (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO)
-
-enum sql_funcs
-{
-    process_attach,
-    unix_SQLAllocConnect,
-    unix_SQLAllocEnv,
-    unix_SQLAllocHandle,
-    unix_SQLAllocHandleStd,
-    unix_SQLAllocStmt,
-    unix_SQLBindCol,
-    unix_SQLBindParam,
-    unix_SQLBindParameter,
-    unix_SQLBrowseConnect,
-    unix_SQLBrowseConnectW,
-    unix_SQLBulkOperations,
-    unix_SQLCancel,
-    unix_SQLCloseCursor,
-    unix_SQLColAttribute,
-    unix_SQLColAttributeW,
-    unix_SQLColAttributes,
-    unix_SQLColAttributesW,
-    unix_SQLColumnPrivileges,
-    unix_SQLColumnPrivilegesW,
-    unix_SQLColumns,
-    unix_SQLColumnsW,
-    unix_SQLConnect,
-    unix_SQLConnectW,
-    unix_SQLCopyDesc,
-    unix_SQLDataSources,
-    unix_SQLDataSourcesW,
-    unix_SQLDescribeCol,
-    unix_SQLDescribeColW,
-    unix_SQLDescribeParam,
-    unix_SQLDisconnect,
-    unix_SQLDriverConnect,
-    unix_SQLDriverConnectW,
-    unix_SQLDrivers,
-    unix_SQLDriversW,
-    unix_SQLEndTran,
-    unix_SQLError,
-    unix_SQLErrorW,
-    unix_SQLExecDirect,
-    unix_SQLExecDirectW,
-    unix_SQLExecute,
-    unix_SQLExtendedFetch,
-    unix_SQLFetch,
-    unix_SQLFetchScroll,
-    unix_SQLForeignKeys,
-    unix_SQLForeignKeysW,
-    unix_SQLFreeConnect,
-    unix_SQLFreeEnv,
-    unix_SQLFreeHandle,
-    unix_SQLFreeStmt,
-    unix_SQLGetConnectAttr,
-    unix_SQLGetConnectAttrW,
-    unix_SQLGetConnectOption,
-    unix_SQLGetConnectOptionW,
-    unix_SQLGetCursorName,
-    unix_SQLGetCursorNameW,
-    unix_SQLGetData,
-    unix_SQLGetDescField,
-    unix_SQLGetDescFieldW,
-    unix_SQLGetDescRec,
-    unix_SQLGetDescRecW,
-    unix_SQLGetDiagField,
-    unix_SQLGetDiagFieldW,
-    unix_SQLGetDiagRec,
-    unix_SQLGetDiagRecW,
-    unix_SQLGetEnvAttr,
-    unix_SQLGetFunctions,
-    unix_SQLGetInfo,
-    unix_SQLGetInfoW,
-    unix_SQLGetStmtAttr,
-    unix_SQLGetStmtAttrW,
-    unix_SQLGetStmtOption,
-    unix_SQLGetTypeInfo,
-    unix_SQLGetTypeInfoW,
-    unix_SQLMoreResults,
-    unix_SQLNativeSql,
-    unix_SQLNativeSqlW,
-    unix_SQLNumParams,
-    unix_SQLNumResultCols,
-    unix_SQLParamData,
-    unix_SQLParamOptions,
-    unix_SQLPrepare,
-    unix_SQLPrepareW,
-    unix_SQLPrimaryKeys,
-    unix_SQLPrimaryKeysW,
-    unix_SQLProcedureColumns,
-    unix_SQLProcedureColumnsW,
-    unix_SQLProcedures,
-    unix_SQLProceduresW,
-    unix_SQLPutData,
-    unix_SQLRowCount,
-    unix_SQLSetConnectAttr,
-    unix_SQLSetConnectAttrW,
-    unix_SQLSetConnectOption,
-    unix_SQLSetConnectOptionW,
-    unix_SQLSetCursorName,
-    unix_SQLSetCursorNameW,
-    unix_SQLSetDescField,
-    unix_SQLSetDescFieldW,
-    unix_SQLSetDescRec,
-    unix_SQLSetEnvAttr,
-    unix_SQLSetParam,
-    unix_SQLSetPos,
-    unix_SQLSetScrollOptions,
-    unix_SQLSetStmtAttr,
-    unix_SQLSetStmtAttrW,
-    unix_SQLSetStmtOption,
-    unix_SQLSpecialColumns,
-    unix_SQLSpecialColumnsW,
-    unix_SQLStatistics,
-    unix_SQLStatisticsW,
-    unix_SQLTablePrivileges,
-    unix_SQLTablePrivilegesW,
-    unix_SQLTables,
-    unix_SQLTablesW,
-    unix_SQLTransact,
-    unix_funcs_count
-};
-
-struct param
-{
-    INT64 len;  /* result length stored in Unix lib */
-    void *ptr;  /* result length ptr passed by client */
-};
-
-struct param_binding
-{
-    UINT32 count;
-    struct param *param;
-};
-
-struct handle
-{
-    UINT64 unix_handle;
-    struct param_binding bind_col;
-    struct param_binding bind_param;
-    struct param_binding bind_parameter;
-};
-
-struct SQLAllocConnect_params
-{
-    UINT64 EnvironmentHandle;
-    UINT64 ConnectionHandle;
-};
-
-struct SQLAllocEnv_params
-{
-    UINT64 EnvironmentHandle;
-};
-
-struct SQLAllocHandle_params
-{
-    INT16  HandleType;
-    UINT64 InputHandle;
-    UINT64 OutputHandle;
-};
-
-struct SQLAllocHandleStd_params
-{
-    INT16  HandleType;
-    UINT64 InputHandle;
-    UINT64 OutputHandle;
-};
-
-struct SQLAllocStmt_params
-{
-    UINT64 ConnectionHandle;
-    UINT64 StatementHandle;
-};
-
-struct SQLBindCol_params
-{
-    UINT64 StatementHandle;
-    UINT16 ColumnNumber;
-    INT16  TargetType;
-    void  *TargetValue;
-    INT64  BufferLength;
-    INT64 *StrLen_or_Ind;
-};
-
-struct SQLBindParam_params
-{
-    UINT64 StatementHandle;
-    UINT16 ParameterNumber;
-    INT16  ValueType;
-    INT16  ParameterType;
-    UINT64 LengthPrecision;
-    INT16  ParameterScale;
-    void  *ParameterValue;
-    INT64 *StrLen_or_Ind;
-};
-
-struct SQLBindParameter_params
-{
-    UINT64 StatementHandle;
-    UINT16 ParameterNumber;
-    INT16  InputOutputType;
-    INT16  ValueType;
-    INT16  ParameterType;
-    UINT64 ColumnSize;
-    INT16  DecimalDigits;
-    void  *ParameterValue;
-    INT64  BufferLength;
-    INT64 *StrLen_or_Ind;
-};
-
-struct SQLBrowseConnect_params
-{
-    UINT64 ConnectionHandle;
-    UCHAR *InConnectionString;
-    INT16  StringLength1;
-    UCHAR *OutConnectionString;
-    INT16  BufferLength;
-    INT16 *StringLength2;
-};
-
-struct SQLBrowseConnectW_params
-{
-    UINT64 ConnectionHandle;
-    WCHAR *InConnectionString;
-    INT16  StringLength1;
-    WCHAR *OutConnectionString;
-    INT16  BufferLength;
-    INT16 *StringLength2;
-};
-
-struct SQLBulkOperations_params
-{
-    UINT64 StatementHandle;
-    INT16  Operation;
-};
-
-struct SQLCancel_params
-{
-    UINT64 StatementHandle;
-};
-
-struct SQLCloseCursor_params
-{
-    UINT64 StatementHandle;
-};
-
-struct SQLColAttribute_params
-{
-    UINT64 StatementHandle;
-    UINT16 ColumnNumber;
-    UINT16 FieldIdentifier;
-    void  *CharacterAttribute;
-    INT16  BufferLength;
-    INT16 *StringLength;
-    INT64 *NumericAttribute;
-};
-
-struct SQLColAttributeW_params
-{
-    UINT64 StatementHandle;
-    UINT16 ColumnNumber;
-    UINT16 FieldIdentifier;
-    void  *CharacterAttribute;
-    INT16  BufferLength;
-    INT16 *StringLength;
-    INT64 *NumericAttribute;
-};
-
-struct SQLColAttributes_params
-{
-    UINT64 StatementHandle;
-    UINT16 ColumnNumber;
-    UINT16 FieldIdentifier;
-    void  *CharacterAttributes;
-    INT16  BufferLength;
-    INT16 *StringLength;
-    INT64 *NumericAttributes;
-};
-
-struct SQLColAttributesW_params
-{
-    UINT64 StatementHandle;
-    UINT16 ColumnNumber;
-    UINT16 FieldIdentifier;
-    void  *CharacterAttributes;
-    INT16  BufferLength;
-    INT16 *StringLength;
-    INT64 *NumericAttributes;
-};
-
-struct SQLColumnPrivileges_params
-{
-    UINT64 StatementHandle;
-    UCHAR *CatalogName;
-    INT16  NameLength1;
-    UCHAR *SchemaName;
-    INT16  NameLength2;
-    UCHAR *TableName;
-    INT16  NameLength3;
-    UCHAR *ColumnName;
-    INT16  NameLength4;
-};
-
-struct SQLColumnPrivilegesW_params
-{
-    UINT64 StatementHandle;
-    WCHAR *CatalogName;
-    INT16  NameLength1;
-    WCHAR *SchemaName;
-    INT16  NameLength2;
-    WCHAR *TableName;
-    INT16  NameLength3;
-    WCHAR *ColumnName;
-    INT16  NameLength4;
-};
-
-struct SQLColumns_params
-{
-    UINT64 StatementHandle;
-    UCHAR *CatalogName;
-    INT16  NameLength1;
-    UCHAR *SchemaName;
-    INT16  NameLength2;
-    UCHAR *TableName;
-    INT16  NameLength3;
-    UCHAR *ColumnName;
-    INT16  NameLength4;
-};
-
-struct SQLColumnsW_params
-{
-    UINT64 StatementHandle;
-    WCHAR *CatalogName;
-    INT16  NameLength1;
-    WCHAR *SchemaName;
-    INT16  NameLength2;
-    WCHAR *TableName;
-    INT16  NameLength3;
-    WCHAR *ColumnName;
-    INT16  NameLength4;
-};
-
-struct SQLConnect_params
-{
-    UINT64 ConnectionHandle;
-    UCHAR *ServerName;
-    INT16  NameLength1;
-    UCHAR *UserName;
-    INT16  NameLength2;
-    UCHAR *Authentication;
-    INT16  NameLength3;
-};
-
-struct SQLConnectW_params
-{
-    UINT64 ConnectionHandle;
-    WCHAR *ServerName;
-    INT16  NameLength1;
-    WCHAR *UserName;
-    INT16  NameLength2;
-    WCHAR *Authentication;
-    INT16  NameLength3;
-};
-
-struct SQLCopyDesc_params
-{
-    UINT64 SourceDescHandle;
-    UINT64 TargetDescHandle;
-};
-
-struct SQLDataSources_params
-{
-    UINT64 EnvironmentHandle;
-    UINT16 Direction;
-    UCHAR *ServerName;
-    INT16  BufferLength1;
-    INT16 *NameLength1;
-    UCHAR *Description;
-    INT16  BufferLength2;
-    INT16 *NameLength2;
-};
-
-struct SQLDataSourcesW_params
-{
-    UINT64 EnvironmentHandle;
-    UINT16 Direction;
-    WCHAR *ServerName;
-    INT16  BufferLength1;
-    INT16 *NameLength1;
-    WCHAR *Description;
-    INT16  BufferLength2;
-    INT16 *NameLength2;
-};
-
-struct SQLDescribeCol_params
-{
-    UINT64  StatementHandle;
-    UINT16  ColumnNumber;
-    UCHAR  *ColumnName;
-    INT16   BufferLength;
-    INT16  *NameLength;
-    INT16  *DataType;
-    UINT64 *ColumnSize;
-    INT16  *DecimalDigits;
-    INT16  *Nullable;
-};
-
-struct SQLDescribeColW_params
-{
-    UINT64  StatementHandle;
-    UINT16  ColumnNumber;
-    WCHAR  *ColumnName;
-    INT16   BufferLength;
-    INT16  *NameLength;
-    INT16  *DataType;
-    UINT64 *ColumnSize;
-    INT16  *DecimalDigits;
-    INT16  *Nullable;
-};
-
-struct SQLDescribeParam_params
-{
-    UINT64  StatementHandle;
-    UINT16  ParameterNumber;
-    INT16  *DataType;
-    UINT64 *ParameterSize;
-    INT16  *DecimalDigits;
-    INT16  *Nullable;
-};
-
-struct SQLDisconnect_params
-{
-    UINT64 ConnectionHandle;
-};
-
-struct SQLDriverConnect_params
-{
-    UINT64 ConnectionHandle;
-    void  *WindowHandle;
-    UCHAR *ConnectionString;
-    INT16  Length;
-    UCHAR *OutConnectionString;
-    INT16  BufferLength;
-    INT16 *Length2;
-    UINT16 DriverCompletion;
-};
-
-struct SQLDriverConnectW_params
-{
-    UINT64 ConnectionHandle;
-    void  *WindowHandle;
-    WCHAR *InConnectionString;
-    INT16  Length;
-    WCHAR *OutConnectionString;
-    INT16  BufferLength;
-    INT16 *Length2;
-    UINT16 DriverCompletion;
-};
-
-struct SQLDrivers_params
-{
-    UINT64 EnvironmentHandle;
-    UINT16 Direction;
-    UCHAR *DriverDescription;
-    INT16  BufferLength1;
-    INT16 *DescriptionLength;
-    UCHAR *DriverAttributes;
-    INT16  BufferLength2;
-    INT16 *AttributesLength;
-};
-
-struct SQLDriversW_params
-{
-    UINT64 EnvironmentHandle;
-    UINT16 Direction;
-    WCHAR *DriverDescription;
-    INT16  BufferLength1;
-    INT16 *DescriptionLength;
-    WCHAR *DriverAttributes;
-    INT16  BufferLength2;
-    INT16 *AttributesLength;
-};
-
-struct SQLEndTran_params
-{
-    INT16  HandleType;
-    UINT64 Handle;
-    INT16  CompletionType;
-};
-
-struct SQLError_params
-{
-    UINT64 EnvironmentHandle;
-    UINT64 ConnectionHandle;
-    UINT64 StatementHandle;
-    UCHAR *SqlState;
-    INT32 *NativeError;
-    UCHAR *MessageText;
-    INT16  BufferLength;
-    INT16 *TextLength;
-};
-
-struct SQLErrorW_params
-{
-    UINT64 EnvironmentHandle;
-    UINT64 ConnectionHandle;
-    UINT64 StatementHandle;
-    WCHAR *SqlState;
-    INT32 *NativeError;
-    WCHAR *MessageText;
-    INT16  BufferLength;
-    INT16 *TextLength;
-};
-
-struct SQLExecDirect_params
-{
-    UINT64 StatementHandle;
-    UCHAR *StatementText;
-    INT32  TextLength;
-};
-
-struct SQLExecDirectW_params
-{
-    UINT64 StatementHandle;
-    WCHAR *StatementText;
-    INT32  TextLength;
-};
-
-struct SQLExecute_params
-{
-    UINT64 StatementHandle;
-};
-
-struct SQLExtendedFetch_params
-{
-    UINT64  StatementHandle;
-    UINT16  FetchOrientation;
-    INT64   FetchOffset;
-    UINT64 *RowCount;
-    UINT16 *RowStatusArray;
-};
-
-struct SQLFetch_params
-{
-    UINT64 StatementHandle;
-};
-
-struct SQLFetchScroll_params
-{
-    UINT64 StatementHandle;
-    INT16  FetchOrientation;
-    INT64  FetchOffset;
-};
-
-struct SQLForeignKeys_params
-{
-    UINT64 StatementHandle;
-    UCHAR *PkCatalogName;
-    INT16  NameLength1;
-    UCHAR *PkSchemaName;
-    INT16  NameLength2;
-    UCHAR *PkTableName;
-    INT16  NameLength3;
-    UCHAR *FkCatalogName;
-    INT16  NameLength4;
-    UCHAR *FkSchemaName;
-    INT16  NameLength5;
-    UCHAR *FkTableName;
-    INT16  NameLength6;
-};
-
-struct SQLForeignKeysW_params
-{
-    UINT64 StatementHandle;
-    WCHAR *PkCatalogName;
-    INT16  NameLength1;
-    WCHAR *PkSchemaName;
-    INT16  NameLength2;
-    WCHAR *PkTableName;
-    INT16  NameLength3;
-    WCHAR *FkCatalogName;
-    INT16  NameLength4;
-    WCHAR *FkSchemaName;
-    INT16  NameLength5;
-    WCHAR *FkTableName;
-    INT16  NameLength6;
-};
-
-struct SQLFreeConnect_params
-{
-    UINT64 ConnectionHandle;
-};
-
-struct SQLFreeEnv_params
-{
-    UINT64 EnvironmentHandle;
-};
-
-struct SQLFreeHandle_params
-{
-    INT16  HandleType;
-    UINT64 Handle;
-};
-
-struct SQLFreeStmt_params
-{
-    UINT64 StatementHandle;
-    UINT16 Option;
-};
-
-struct SQLGetConnectAttr_params
-{
-    UINT64 ConnectionHandle;
-    INT32  Attribute;
-    void  *Value;
-    INT32  BufferLength;
-    INT32 *StringLength;
-};
-
-struct SQLGetConnectAttrW_params
-{
-    UINT64 ConnectionHandle;
-    INT32  Attribute;
-    void  *Value;
-    INT32  BufferLength;
-    INT32 *StringLength;
-};
-
-struct SQLGetConnectOption_params
-{
-    UINT64 ConnectionHandle;
-    UINT16 Option;
-    void  *Value;
-};
-
-struct SQLGetConnectOptionW_params
-{
-    UINT64 ConnectionHandle;
-    INT16  Option;
-    void  *Value;
-};
-
-struct SQLGetCursorName_params
-{
-    UINT64 StatementHandle;
-    UCHAR *CursorName;
-    INT16  BufferLength;
-    INT16 *NameLength;
-};
-
-struct SQLGetCursorNameW_params
-{
-    UINT64 StatementHandle;
-    WCHAR *CursorName;
-    INT16  BufferLength;
-    INT16 *NameLength;
-};
-
-struct SQLGetData_params
-{
-    UINT64 StatementHandle;
-    UINT16 ColumnNumber;
-    INT16  TargetType;
-    void  *TargetValue;
-    INT64  BufferLength;
-    INT64 *StrLen_or_Ind;
-};
-
-struct SQLGetDescField_params
-{
-    UINT64 DescriptorHandle;
-    INT16  RecNumber;
-    INT16  FieldIdentifier;
-    void  *Value;
-    INT32  BufferLength;
-    INT32 *StringLength;
-}
-;
-struct SQLGetDescFieldW_params
-{
-    UINT64 DescriptorHandle;
-    INT16  RecNumber;
-    INT16  FieldIdentifier;
-    void  *Value;
-    INT32  BufferLength;
-    INT32 *StringLength;
-};
-
-struct SQLGetDescRec_params
-{
-    UINT64 DescriptorHandle;
-    INT16  RecNumber;
-    UCHAR *Name;
-    INT16  BufferLength;
-    INT16 *StringLength;
-    INT16 *Type;
-    INT16 *SubType;
-    INT64 *Length;
-    INT16 *Precision;
-    INT16 *Scale;
-    INT16 *Nullable;
-};
-
-struct SQLGetDescRecW_params
-{
-    UINT64 DescriptorHandle;
-    INT16  RecNumber;
-    WCHAR *Name;
-    INT16  BufferLength;
-    INT16 *StringLength;
-    INT16 *Type;
-    INT16 *SubType;
-    INT64 *Length;
-    INT16 *Precision;
-    INT16 *Scale;
-    INT16 *Nullable;
-};
-
-struct SQLGetDiagField_params
-{
-    INT16  HandleType;
-    UINT64 Handle;
-    INT16  RecNumber;
-    INT16  DiagIdentifier;
-    void  *DiagInfo;
-    INT16  BufferLength;
-    INT16 *StringLength;
-};
-
-struct SQLGetDiagFieldW_params
-{
-    INT16  HandleType;
-    UINT64 Handle;
-    INT16  RecNumber;
-    INT16  DiagIdentifier;
-    void  *DiagInfo;
-    INT16  BufferLength;
-    INT16 *StringLength;
-};
-
-struct SQLGetDiagRec_params
-{
-    INT16  HandleType;
-    UINT64 Handle;
-    INT16  RecNumber;
-    UCHAR *SqlState;
-    INT32 *NativeError;
-    UCHAR *MessageText;
-    INT16  BufferLength;
-    INT16 *TextLength;
-};
-
-struct SQLGetDiagRecW_params
-{
-    INT16  HandleType;
-    UINT64 Handle;
-    INT16  RecNumber;
-    WCHAR *SqlState;
-    INT32 *NativeError;
-    WCHAR *MessageText;
-    INT16  BufferLength;
-    INT16 *TextLength;
-};
-
-struct SQLGetEnvAttr_params
-{
-    UINT64 EnvironmentHandle;
-    INT32  Attribute;
-    void  *Value;
-    INT32  BufferLength;
-    INT32 *StringLength;
-};
-
-struct SQLGetFunctions_params
-{
-    UINT64  ConnectionHandle;
-    UINT16  FunctionId;
-    UINT16 *Supported;
-};
-
-struct SQLGetInfo_params
-{
-    UINT64 ConnectionHandle;
-    UINT16 InfoType;
-    void  *InfoValue;
-    INT16  BufferLength;
-    INT16 *StringLength;
-};
-
-struct SQLGetInfoW_params
-{
-    UINT64 ConnectionHandle;
-    UINT16 InfoType;
-    void  *InfoValue;
-    INT16  BufferLength;
-    INT16 *StringLength;
-};
-
-struct SQLGetStmtAttr_params
-{
-    UINT64 StatementHandle;
-    INT32  Attribute;
-    void  *Value;
-    INT32  BufferLength;
-    INT32 *StringLength;
-};
-
-struct SQLGetStmtAttrW_params
-{
-    UINT64 StatementHandle;
-    INT32  Attribute;
-    void  *Value;
-    INT32  BufferLength;
-    INT32 *StringLength;
-};
-
-struct SQLGetStmtOption_params
-{
-    UINT64 StatementHandle;
-    UINT16 Option;
-    void  *Value;
-};
-
-struct SQLGetTypeInfo_params
-{
-    UINT64 StatementHandle;
-    INT16  DataType;
-};
-
-struct SQLGetTypeInfoW_params
-{
-    UINT64 StatementHandle;
-    INT16  DataType;
-};
-
-struct SQLMoreResults_params
-{
-    UINT64 StatementHandle;
-};
-
-struct SQLNativeSql_params
-{
-    UINT64 ConnectionHandle;
-    UCHAR *InStatementText;
-    INT32  TextLength1;
-    UCHAR *OutStatementText;
-    INT32  BufferLength;
-    INT32 *TextLength2;
-};
-
-struct SQLNativeSqlW_params
-{
-    UINT64 ConnectionHandle;
-    WCHAR *InStatementText;
-    INT32  TextLength1;
-    WCHAR *OutStatementText;
-    INT32  BufferLength;
-    INT32 *TextLength2;
-};
-
-struct SQLNumParams_params
-{
-    UINT64 StatementHandle;
-    INT16 *ParameterCount;
-};
-
-struct SQLNumResultCols_params
-{
-    UINT64 StatementHandle;
-    INT16 *ColumnCount;
-};
-
-struct SQLParamData_params
-{
-    UINT64 StatementHandle;
-    void  *Value;
-};
-
-struct SQLParamOptions_params
-{
-    UINT64  StatementHandle;
-    UINT64  RowCount;
-    UINT64 *RowNumber;
-};
-
-struct SQLPrepare_params
-{
-    UINT64 StatementHandle;
-    UCHAR *StatementText;
-    INT32  TextLength;
-};
-
-struct SQLPrepareW_params
-{
-    UINT64 StatementHandle;
-    WCHAR *StatementText;
-    INT32  TextLength;
-};
-
-struct SQLPrimaryKeys_params
-{
-    UINT64 StatementHandle;
-    UCHAR *CatalogName;
-    INT16  NameLength1;
-    UCHAR *SchemaName;
-    INT16  NameLength2;
-    UCHAR *TableName;
-    INT16  NameLength3;
-};
-
-struct SQLPrimaryKeysW_params
-{
-    UINT64 StatementHandle;
-    WCHAR *CatalogName;
-    INT16  NameLength1;
-    WCHAR *SchemaName;
-    INT16  NameLength2;
-    WCHAR *TableName;
-    INT16  NameLength3;
-};
-
-struct SQLProcedureColumns_params
-{
-    UINT64 StatementHandle;
-    UCHAR *CatalogName;
-    INT16  NameLength1;
-    UCHAR *SchemaName;
-    INT16  NameLength2;
-    UCHAR *ProcName;
-    INT16  NameLength3;
-    UCHAR *ColumnName;
-    INT16  NameLength4;
-};
-
-struct SQLProcedureColumnsW_params
-{
-    UINT64 StatementHandle;
-    WCHAR *CatalogName;
-    INT16  NameLength1;
-    WCHAR *SchemaName;
-    INT16  NameLength2;
-    WCHAR *ProcName;
-    INT16  NameLength3;
-    WCHAR *ColumnName;
-    INT16  NameLength4;
-};
-
-struct SQLProcedures_params
-{
-    UINT64 StatementHandle;
-    UCHAR *CatalogName;
-    INT16  NameLength1;
-    UCHAR *SchemaName;
-    INT16  NameLength2;
-    UCHAR *ProcName;
-    INT16  NameLength3;
-};
-
-struct SQLProceduresW_params
-{
-    UINT64 StatementHandle;
-    WCHAR *CatalogName;
-    INT16  NameLength1;
-    WCHAR *SchemaName;
-    INT16  NameLength2;
-    WCHAR *ProcName;
-    INT16  NameLength3;
-};
-
-struct SQLPutData_params
-{
-    UINT64 StatementHandle;
-    void  *Data;
-    INT64  StrLen_or_Ind;
-};
-
-struct SQLRowCount_params
-{
-    UINT64 StatementHandle;
-    INT64 *RowCount;
-};
-
-struct SQLSetConnectAttr_params
-{
-    UINT64 ConnectionHandle;
-    INT32  Attribute;
-    void  *Value;
-    INT32  StringLength;
-};
-
-struct SQLSetConnectAttrW_params
-{
-    UINT64 ConnectionHandle;
-    INT32  Attribute;
-    void  *Value;
-    INT32  StringLength;
-};
-
-struct SQLSetConnectOption_params
-{
-    UINT64 ConnectionHandle;
-    UINT16 Option;
-    UINT64 Value;
-};
-
-struct SQLSetConnectOptionW_params
-{
-    UINT64 ConnectionHandle;
-    UINT16 Option;
-    UINT64 Value;
-};
-
-struct SQLSetCursorName_params
-{
-    UINT64 StatementHandle;
-    UCHAR *CursorName;
-    INT16  NameLength;
-};
-
-struct SQLSetCursorNameW_params
-{
-    UINT64 StatementHandle;
-    WCHAR *CursorName;
-    INT16  NameLength;
-};
-
-struct SQLSetDescField_params
-{
-    UINT64 DescriptorHandle;
-    INT16  RecNumber;
-    INT16  FieldIdentifier;
-    void  *Value;
-    INT32  BufferLength;
-};
-
-struct SQLSetDescFieldW_params
-{
-    UINT64 DescriptorHandle;
-    INT16  RecNumber;
-    INT16  FieldIdentifier;
-    void  *Value;
-    INT32  BufferLength;
-};
-
-struct SQLSetDescRec_params
-{
-    UINT64 DescriptorHandle;
-    INT16  RecNumber;
-    INT16  Type;
-    INT16  SubType;
-    INT64  Length;
-    INT16  Precision;
-    INT16  Scale;
-    void  *Data;
-    INT64 *StringLength;
-    INT64 *Indicator;
-};
-
-struct SQLSetEnvAttr_params
-{
-    UINT64 EnvironmentHandle;
-    INT32  Attribute;
-    void  *Value;
-    INT32  StringLength;
-};
-
-struct SQLSetParam_params
-{
-    UINT64 StatementHandle;
-    UINT16 ParameterNumber;
-    INT16  ValueType;
-    INT16  ParameterType;
-    UINT64 LengthPrecision;
-    INT16  ParameterScale;
-    void  *ParameterValue;
-    INT64 *StrLen_or_Ind;
-};
-
-struct SQLSetPos_params
-{
-    UINT64 StatementHandle;
-    UINT64 RowNumber;
-    UINT16 Operation;
-    UINT16 LockType;
-};
-
-struct SQLSetScrollOptions_params
-{
-    UINT64 StatementHandle;
-    UINT16 Concurrency;
-    INT64  KeySetSize;
-    UINT16 RowSetSize;
-};
-
-struct SQLSetStmtAttr_params
-{
-    UINT64 StatementHandle;
-    INT32  Attribute;
-    void  *Value;
-    INT32  StringLength;
-};
-
-struct SQLSetStmtAttrW_params
-{
-    UINT64 StatementHandle;
-    INT32  Attribute;
-    void  *Value;
-    INT32  StringLength;
-};
-
-struct SQLSetStmtOption_params
-{
-    UINT64 StatementHandle;
-    UINT16 Option;
-    UINT64 Value;
-};
-
-struct SQLSpecialColumns_params
-{
-    UINT64 StatementHandle;
-    UINT16 IdentifierType;
-    UCHAR *CatalogName;
-    INT16  NameLength1;
-    UCHAR *SchemaName;
-    INT16  NameLength2;
-    UCHAR *TableName;
-    INT16  NameLength3;
-    UINT16 Scope;
-    UINT16 Nullable;
-};
-
-struct SQLSpecialColumnsW_params
-{
-    UINT64 StatementHandle;
-    UINT16 IdentifierType;
-    WCHAR *CatalogName;
-    INT16  NameLength1;
-    WCHAR *SchemaName;
-    INT16  NameLength2;
-    WCHAR *TableName;
-    INT16  NameLength3;
-    UINT16 Scope;
-    UINT16 Nullable;
-};
-
-struct SQLStatistics_params
-{
-    UINT64 StatementHandle;
-    UCHAR *CatalogName;
-    INT16  NameLength1;
-    UCHAR *SchemaName;
-    INT16  NameLength2;
-    UCHAR *TableName;
-    INT16  NameLength3;
-    UINT16 Unique;
-    UINT16 Reserved;
-};
-
-struct SQLStatisticsW_params
-{
-    UINT64 StatementHandle;
-    WCHAR *CatalogName;
-    INT16  NameLength1;
-    WCHAR *SchemaName;
-    INT16  NameLength2;
-    WCHAR *TableName;
-    INT16  NameLength3;
-    UINT16 Unique;
-    UINT16 Reserved;
-};
-
-struct SQLTablePrivileges_params
-{
-    UINT64 StatementHandle;
-    UCHAR *CatalogName;
-    INT16  NameLength1;
-    UCHAR *SchemaName;
-    INT16  NameLength2;
-    UCHAR *TableName;
-    INT16  NameLength3;
-};
-
-struct SQLTablePrivilegesW_params
-{
-    UINT64 StatementHandle;
-    WCHAR *CatalogName;
-    INT16  NameLength1;
-    WCHAR *SchemaName;
-    INT16  NameLength2;
-    WCHAR *TableName;
-    INT16  NameLength3;
-};
-
-struct SQLTables_params
-{
-    UINT64 StatementHandle;
-    UCHAR *CatalogName;
-    INT16  NameLength1;
-    UCHAR *SchemaName;
-    INT16  NameLength2;
-    UCHAR *TableName;
-    INT16  NameLength3;
-    UCHAR *TableType;
-    INT16  NameLength4;
-};
-
-struct SQLTablesW_params
-{
-    UINT64 StatementHandle;
-    WCHAR *CatalogName;
-    INT16  NameLength1;
-    WCHAR *SchemaName;
-    INT16  NameLength2;
-    WCHAR *TableName;
-    INT16  NameLength3;
-    WCHAR *TableType;
-    INT16  NameLength4;
-};
-
-struct SQLTransact_params
-{
-    UINT64 EnvironmentHandle;
-    UINT64 ConnectionHandle;
-    UINT16 CompletionType;
-};
-- 
2.43.0

