From 49769a580bc4ce9a12a74d6f3c79cc32aa42acd5 Mon Sep 17 00:00:00 2001
From: Alistair Leslie-Hughes <leslie_alistair@hotmail.com>
Date: Tue, 1 Jun 2021 11:10:25 +1000
Subject: windows.networking.connectivity: Implement INetworkInformationStatics
 stubs.

v2:
Fixed QueryInterfaces

Based off patch by Esdras Tarsis.

diff --git a/dlls/windows.networking.connectivity/windows.networking.connectivity_main.c b/dlls/windows.networking.connectivity/windows.networking.connectivity_main.c
index 219170366be..2a0185dd009 100644
--- a/dlls/windows.networking.connectivity/windows.networking.connectivity_main.c
+++ b/dlls/windows.networking.connectivity/windows.networking.connectivity_main.c
@@ -10,12 +10,17 @@
 #include "initguid.h"
 
 #include "activation.h"
+#define WIDL_using_Windows_Networking_Connectivity
+#define WIDL_using_Windows_Foundation_Collections
+#include "windows.networking.connectivity.h"
 
 WINE_DEFAULT_DEBUG_CHANNEL(network);
 
 struct windows_networking_connectivity
 {
     IActivationFactory IActivationFactory_iface;
+    INetworkInformationStatics INetworkInformationStatics_iface;
+    IVectorView_ConnectionProfile IVectorView_iface;
     LONG refcount;
 };
 
@@ -24,9 +29,240 @@ static inline struct windows_networking_connectivity *impl_from_IActivationFacto
     return CONTAINING_RECORD(iface, struct windows_networking_connectivity, IActivationFactory_iface);
 }
 
+static inline struct windows_networking_connectivity *impl_from_INetworkInformationStatics(INetworkInformationStatics *iface)
+{
+    return CONTAINING_RECORD(iface, struct windows_networking_connectivity, INetworkInformationStatics_iface);
+}
+
+static inline struct windows_networking_connectivity *impl_from_IVectorView_ConnectionProfile(IVectorView_ConnectionProfile *iface)
+{
+    return CONTAINING_RECORD(iface, struct windows_networking_connectivity, IVectorView_iface);
+}
+
+static HRESULT STDMETHODCALLTYPE vector_view_QueryInterface(IVectorView_ConnectionProfile *iface, REFIID iid, void **object)
+{
+    TRACE("iface %p, iid %s, object %p stub!\n", iface, debugstr_guid(iid), object);
+    IUnknown_AddRef(iface);
+    *object = iface;
+    return S_OK;
+}
+
+static ULONG STDMETHODCALLTYPE vector_view_AddRef(IVectorView_ConnectionProfile *iface)
+{
+    struct windows_networking_connectivity *impl = impl_from_IVectorView_ConnectionProfile(iface);
+    ULONG rc = InterlockedIncrement(&impl->refcount);
+    TRACE("%p increasing refcount to %lu.\n", impl, rc);
+    return rc;
+}
+
+static ULONG STDMETHODCALLTYPE vector_view_Release(IVectorView_ConnectionProfile *iface)
+{
+    struct windows_networking_connectivity *impl = impl_from_IVectorView_ConnectionProfile(iface);
+    ULONG rc = InterlockedDecrement(&impl->refcount);
+    TRACE("%p decreasing refcount to %lu.\n", impl, rc);
+    return rc;
+}
+
+static HRESULT STDMETHODCALLTYPE vector_view_GetIids(IVectorView_ConnectionProfile *iface, ULONG *iid_count, IID **iids)
+{
+    FIXME("iface %p, iid_count %p, iids %p stub!\n", iface, iid_count, iids);
+    return E_NOTIMPL;
+}
+
+static HRESULT STDMETHODCALLTYPE vector_view_GetRuntimeClassName(IVectorView_ConnectionProfile *iface, HSTRING *class_name)
+{
+    FIXME("iface %p, class_name %p stub!\n", iface, class_name);
+    return E_NOTIMPL;
+}
+
+static HRESULT STDMETHODCALLTYPE vector_view_GetTrustLevel(IVectorView_ConnectionProfile *iface, TrustLevel *trust_level)
+{
+    FIXME("iface %p, trust_level %p stub!\n", iface, trust_level);
+    return E_NOTIMPL;
+}
+
+static HRESULT STDMETHODCALLTYPE vector_view_GetAt(IVectorView_ConnectionProfile *iface, UINT32 index, IConnectionProfile **out_value)
+{
+    FIXME("iface %p, index %#x, out_value %p stub!\n", iface, index, out_value);
+    return S_OK;
+}
+
+static HRESULT STDMETHODCALLTYPE vector_view_get_Size(
+    IVectorView_ConnectionProfile *iface, UINT32 *out_value)
+{
+    FIXME("iface %p, out_value %p stub!\n", iface, out_value);
+    *out_value = 0;
+    return S_OK;
+}
+
+static HRESULT STDMETHODCALLTYPE vector_view_IndexOf(
+    IVectorView_ConnectionProfile *iface, IConnectionProfile *value, UINT32 *index, BOOLEAN *out_value)
+{
+    FIXME("iface %p, value %p, index %p, out_value %p stub!\n", iface, value, index, out_value);
+    *out_value = FALSE;
+    return S_OK;
+}
+
+static HRESULT STDMETHODCALLTYPE vector_view_GetMany(
+    IVectorView_ConnectionProfile *iface, UINT32 start_index, UINT32 size, IConnectionProfile **items, UINT32 *out_value)
+{
+    FIXME("iface %p, start_index %#x, items %p, out_value %p stub!\n", iface, start_index, items, out_value);
+    *out_value = 0;
+    return S_OK;
+}
+
+static const struct IVectorView_ConnectionProfileVtbl vector_view_vtbl =
+{
+    vector_view_QueryInterface,
+    vector_view_AddRef,
+    vector_view_Release,
+    vector_view_GetIids,
+    vector_view_GetRuntimeClassName,
+    vector_view_GetTrustLevel,
+    vector_view_GetAt,
+    vector_view_get_Size,
+    vector_view_IndexOf,
+    vector_view_GetMany
+};
+
+static HRESULT STDMETHODCALLTYPE network_information_statics_QueryInterface(
+        INetworkInformationStatics *iface, REFIID iid, void **object)
+{
+    TRACE("iface %p, iid %s, object %p stub!\n", iface, debugstr_guid(iid), object);
+
+    if (IsEqualGUID(iid, &IID_IUnknown) ||
+        IsEqualGUID(iid, &IID_IInspectable) ||
+        IsEqualGUID(iid, &IID_IAgileObject) ||
+        IsEqualGUID(iid, &IID_INetworkInformationStatics))
+    {
+        IUnknown_AddRef(iface);
+        *object = iface;
+        return S_OK;
+    }
+
+    WARN("%s not implemented, returning E_NOINTERFACE.\n", debugstr_guid(iid));
+    *object = NULL;
+    return E_NOINTERFACE;
+}
+
+static ULONG STDMETHODCALLTYPE network_information_statics_AddRef(
+        INetworkInformationStatics *iface)
+{
+    struct windows_networking_connectivity *impl = impl_from_INetworkInformationStatics(iface);
+    ULONG rc = InterlockedIncrement(&impl->refcount);
+    TRACE("%p increasing refcount to %lu.\n", impl, rc);
+    return rc;
+}
+
+static ULONG STDMETHODCALLTYPE network_information_statics_Release(
+        INetworkInformationStatics *iface)
+{
+    struct windows_networking_connectivity *impl = impl_from_INetworkInformationStatics(iface);
+    ULONG rc = InterlockedDecrement(&impl->refcount);
+    TRACE("%p decreasing refcount to %lu.\n", impl, rc);
+    return rc;
+}
+
+static HRESULT STDMETHODCALLTYPE network_information_statics_GetIids(
+        INetworkInformationStatics *iface, ULONG *iid_count, IID **iids)
+{
+    FIXME("iface %p, iid_count %p, iids %p stub!\n", iface, iid_count, iids);
+    return E_NOTIMPL;
+}
+
+static HRESULT STDMETHODCALLTYPE network_information_statics_GetRuntimeClassName(
+        INetworkInformationStatics *iface, HSTRING *class_name)
+{
+    FIXME("iface %p, class_name %p stub!\n", iface, class_name);
+    return E_NOTIMPL;
+}
+
+static HRESULT STDMETHODCALLTYPE network_information_statics_GetTrustLevel(
+        INetworkInformationStatics *iface, TrustLevel *trust_level)
+{
+    FIXME("iface %p, trust_level %p stub!\n", iface, trust_level);
+    return E_NOTIMPL;
+}
+
+static HRESULT STDMETHODCALLTYPE network_information_statics_GetConnectionProfiles(INetworkInformationStatics *iface, __FIVectorView_1_Windows__CNetworking__CConnectivity__CConnectionProfile **value)
+{
+    struct windows_networking_connectivity *impl = impl_from_INetworkInformationStatics(iface);
+    FIXME("iface %p, %p stub!\n", iface, value);
+    *value = &impl->IVectorView_iface;
+    return S_OK;
+}
+
+static HRESULT STDMETHODCALLTYPE network_information_statics_GetInternetConnectionProfile(INetworkInformationStatics *iface, IConnectionProfile **value)
+{
+    FIXME("iface %p, %p stub!\n", iface, value);
+    return E_NOTIMPL;
+}
+
+static HRESULT STDMETHODCALLTYPE network_information_statics_GetLanIdentifiers(INetworkInformationStatics *iface, __FIVectorView_1_Windows__CNetworking__CConnectivity__CLanIdentifier **value)
+{
+    FIXME("iface %p, %p stub!\n", iface, value);
+    return E_NOTIMPL;
+}
+
+static HRESULT STDMETHODCALLTYPE network_information_statics_GetHostNames(INetworkInformationStatics *iface, __FIVectorView_1_Windows__CNetworking__CHostName **value)
+{
+    FIXME("iface %p, %p stub!\n", iface, value);
+    return E_NOTIMPL;
+}
+
+static HRESULT STDMETHODCALLTYPE network_information_statics_GetProxyConfigurationAsync(INetworkInformationStatics *iface, __x_ABI_CWindows_CFoundation_CIUriRuntimeClass *name,
+                                                                                        __FIAsyncOperation_1_Windows__CNetworking__CConnectivity__CProxyConfiguration **value)
+{
+    FIXME("iface %p, %p, %p stub!\n", iface, name, value);
+    return E_NOTIMPL;
+}
+
+static HRESULT STDMETHODCALLTYPE network_information_statics_GetSortedEndpointPairs(INetworkInformationStatics *iface, __FIIterable_1_Windows__CNetworking__CEndpointPair* destinationList,
+                                                                                    enum __x_ABI_CWindows_CNetworking_CHostNameSortOptions sortOptions,
+                                                                                    __FIVectorView_1_Windows__CNetworking__CEndpointPair **value)
+{
+    FIXME("iface %p, %p stub!\n", iface, value);
+    return E_NOTIMPL;
+}
+
+static HRESULT STDMETHODCALLTYPE network_information_statics_eventadd_NetworkStatusChanged(
+    INetworkInformationStatics *iface, __x_ABI_CWindows_CNetworking_CConnectivity_CINetworkStatusChangedEventHandler *value, EventRegistrationToken* token)
+{
+    FIXME("iface %p, value %p, token %p stub!\n", iface, value, token);
+    return S_OK;
+}
+
+static HRESULT STDMETHODCALLTYPE network_information_statics_eventremove_NetworkStatusChanged(
+    INetworkInformationStatics *iface, EventRegistrationToken token)
+{
+    FIXME("iface %p, token %#I64x stub!\n", iface, token.value);
+    return S_OK;
+}
+
+static const struct INetworkInformationStaticsVtbl network_information_statics_vtbl =
+{
+    network_information_statics_QueryInterface,
+    network_information_statics_AddRef,
+    network_information_statics_Release,
+    /* IInspectable methods */
+    network_information_statics_GetIids,
+    network_information_statics_GetRuntimeClassName,
+    network_information_statics_GetTrustLevel,
+    /* INetworkInformationStatics methods */
+    network_information_statics_GetConnectionProfiles,
+    network_information_statics_GetInternetConnectionProfile,
+    network_information_statics_GetLanIdentifiers,
+    network_information_statics_GetHostNames,
+    network_information_statics_GetProxyConfigurationAsync,
+    network_information_statics_GetSortedEndpointPairs,
+    network_information_statics_eventadd_NetworkStatusChanged,
+    network_information_statics_eventremove_NetworkStatusChanged,
+};
+
 static HRESULT STDMETHODCALLTYPE windows_networking_connectivity_QueryInterface(
         IActivationFactory *iface, REFIID iid, void **object)
 {
+    struct windows_networking_connectivity *impl = impl_from_IActivationFactory(iface);
     TRACE("iface %p, iid %s, object %p stub!\n", iface, debugstr_guid(iid), object);
 
     if (IsEqualGUID(iid, &IID_IUnknown) ||
@@ -39,6 +275,13 @@ static HRESULT STDMETHODCALLTYPE windows_networking_connectivity_QueryInterface(
         return S_OK;
     }
 
+    if (IsEqualGUID(iid, &IID_INetworkInformationStatics))
+    {
+        IUnknown_AddRef(iface);
+        *object = &impl->INetworkInformationStatics_iface;
+        return S_OK;
+    }
+
     FIXME("%s not implemented, returning E_NOINTERFACE.\n", debugstr_guid(iid));
     *object = NULL;
     return E_NOINTERFACE;
@@ -106,6 +349,8 @@ static const struct IActivationFactoryVtbl activation_factory_vtbl =
 static struct windows_networking_connectivity windows_networking_connectivity =
 {
     {&activation_factory_vtbl},
+    {&network_information_statics_vtbl},
+    {&vector_view_vtbl},
     1
 };
 
